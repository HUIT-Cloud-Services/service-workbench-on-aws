{"version":3,"sources":["../../../src/models/configuration/ConfigurationEditor.js"],"names":["_","types","getSnapshot","applySnapshot","createForm","InputManifest","toMobxFormFields","isConditionTrue","ConfigurationEditor","model","currentSectionIndex","review","inputManifest","maybe","configuration","optional","map","union","null","undefined","integer","number","boolean","string","mode","enumeration","volatile","_self","originalConfig","originalSectionConfig","actions","runInAction","fn","self","superCleanup","cleanup","normalizeForm","obj","transform","result","value","key","isObject","JSON","stringify","getSectionConfig","inputManifestSection","config","section","flattened","getSectionFlattened","forEach","item","name","has","cloneDeep","get","resetOriginalSectionConfig","configKeysAfter","index","sections","slice","Math","max","keys","configKeys","isEmpty","push","afterCreate","next","form","merge","values","changed","isEqual","keysAfter","nextSectionIndex","before","after","isEditMode","delete","previous","_form","previousSectionIndex","clearConfigs","clear","clearSectionConfigs","empty","applyChanges","cancel","restart","views","totalSections","length","definedConfigList","inputEntries","configMap","list","entry","isUndefined","merged","entries","formFields","input","children","hasNext","hasPrevious","found","condition","sectionsTitles","title"],"mappings":"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","sourcesContent":["/*\n *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\").\n *  You may not use this file except in compliance with the License.\n *  A copy of the License is located at\n *\n *  http://aws.amazon.com/apache2.0\n *\n *  or in the \"license\" file accompanying this file. This file is distributed\n *  on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n *  express or implied. See the License for the specific language governing\n *  permissions and limitations under the License.\n */\n\nimport _ from 'lodash';\nimport { types, getSnapshot, applySnapshot } from 'mobx-state-tree';\n\nimport { createForm } from '@aws-ee/base-ui/dist/helpers/form';\nimport { InputManifest, toMobxFormFields, isConditionTrue } from '@aws-ee/base-ui/dist/models/forms/InputManifest';\n\n// ==================================================================\n// ConfigurationEditor\n// ==================================================================\nconst ConfigurationEditor = types\n  .model('ConfigurationEditor', {\n    currentSectionIndex: 0, // IMPORTANT section index start from 0 not 1\n    review: false,\n    inputManifest: types.maybe(InputManifest),\n    configuration: types.optional(\n      types.map(types.union(types.null, types.undefined, types.integer, types.number, types.boolean, types.string)),\n      {},\n    ),\n    mode: types.optional(types.enumeration('Mode', ['create', 'edit']), 'create'), // mode - either \"create\" or \"edit\"\n  })\n\n  .volatile(_self => ({\n    originalConfig: undefined,\n    originalSectionConfig: undefined, // the key/value object for the original section config after next()\n  }))\n\n  .actions(() => ({\n    // I had issues using runInAction from mobx\n    // the issue is discussed here https://github.com/mobxjs/mobx-state-tree/issues/915\n    runInAction(fn) {\n      return fn();\n    },\n  }))\n\n  .actions(self => {\n    // save the base implementation of cleanup\n    const superCleanup = self.cleanup;\n\n    // If the value of a form field is an object, then make the value a json string instead\n    const normalizeForm = obj => {\n      return _.transform(\n        obj,\n        (result, value, key) => {\n          result[key] = _.isObject(value) ? JSON.stringify(value) : value;\n        },\n        {},\n      );\n    };\n\n    // Returns a key/value object for configuration keys that are part of the given input manifest section\n    const getSectionConfig = inputManifestSection => {\n      const config = {};\n      const section = inputManifestSection;\n      if (section === undefined) return config;\n      const flattened = self.inputManifest.getSectionFlattened(section) || [];\n      flattened.forEach(item => {\n        const key = item.name;\n        if (self.configuration.has(key)) config[key] = _.cloneDeep(self.configuration.get(key));\n      });\n\n      return config;\n    };\n\n    const resetOriginalSectionConfig = () => {\n      self.originalSectionConfig = getSectionConfig(self.inputManifestSection);\n    };\n\n    // Returns all config keys (if any) that belong to input manifest sections after the given index\n    const configKeysAfter = index => {\n      const sections = _.slice(_.get(self.inputManifest, 'sections', []), Math.max(index + 1, 0));\n      const keys = [];\n      _.forEach(sections, section => {\n        const config = getSectionConfig(section);\n        const configKeys = _.keys(config) || [];\n        if (!_.isEmpty(configKeys)) keys.push(...configKeys);\n      });\n\n      return keys;\n    };\n\n    return {\n      afterCreate() {\n        // We keep the original values of the configuration object so that when we do cancel, we simply restore the original copy\n        self.originalConfig = getSnapshot(self.configuration);\n        resetOriginalSectionConfig();\n      },\n\n      cleanup() {\n        superCleanup();\n      },\n\n      next(form) {\n        const configuration = self.configuration;\n        configuration.merge(normalizeForm(form.values()));\n\n        const changed = !_.isEqual(self.originalSectionConfig, getSectionConfig(self.inputManifestSection));\n        const keysAfter = configKeysAfter(self.currentSectionIndex);\n        const nextSectionIndex = self.nextSectionIndex;\n        const before = self.currentSectionIndex;\n\n        if (nextSectionIndex !== -1) self.currentSectionIndex = nextSectionIndex;\n        const after = self.currentSectionIndex;\n\n        resetOriginalSectionConfig();\n\n        // If the configuration keys changed, then it is time to clear all configuration keys (if any) after the current section\n        // In case of edit mode, do not clear any section (we need to pre-populate all sections with existing values)\n        if (!self.isEditMode && changed) {\n          _.forEach(keysAfter, key => {\n            self.configuration.delete(key);\n          });\n        }\n\n        // If the section index didn't move forward, it means that we don't have any more sections\n        // for input and it is time to show the review content\n        self.review = before === after;\n      },\n\n      previous(_form) {\n        if (self.review) {\n          self.review = false;\n          return;\n        }\n        // const configuration = self.configuration;\n        // configuration.merge(normalizeForm(form.values()));\n        const previousSectionIndex = self.previousSectionIndex;\n        if (previousSectionIndex !== -1) self.currentSectionIndex = previousSectionIndex;\n        resetOriginalSectionConfig();\n      },\n\n      clearConfigs() {\n        self.configuration.clear();\n      },\n\n      clearSectionConfigs() {\n        // We only clear configuration keys that belong to the current section\n        if (self.empty) {\n          self.configuration.clear();\n          return;\n        }\n\n        const section = self.inputManifestSection;\n        if (section === undefined) return;\n        const flattened = self.inputManifest.getSectionFlattened(section) || [];\n        flattened.forEach(item => {\n          self.configuration.delete(item.name);\n        });\n      },\n\n      applyChanges() {\n        self.originalConfig = getSnapshot(self.configuration);\n      },\n\n      cancel() {\n        self.review = false;\n        self.currentSectionIndex = 0;\n        if (self.originalConfig) {\n          applySnapshot(self.configuration, self.originalConfig);\n        }\n\n        resetOriginalSectionConfig();\n      },\n\n      restart() {\n        self.cancel();\n      },\n    };\n  })\n\n  .views(self => ({\n    get isEditMode() {\n      return self.mode === 'edit';\n    },\n\n    get inputManifestSection() {\n      if (self.inputManifest === undefined) return undefined;\n      const sections = self.inputManifest.sections;\n      const index = self.currentSectionIndex;\n      if (index > self.totalSections) return undefined;\n      if (index >= sections.length) return undefined;\n      return sections[index];\n    },\n\n    // A list of objects, where each object represents a configuration name/entry that is not undefined\n    // [ {name: 'xyz', title: '...', value: 'true', etc}, {name: 'abc', title: '...', value: 'something', etc}, ... ]\n    get definedConfigList() {\n      if (self.inputManifest === undefined) return [];\n      const inputEntries = self.inputManifest.flattened;\n      const configMap = self.configuration;\n      const list = [];\n      _.forEach(inputEntries, entry => {\n        let value = configMap.get(entry.name);\n        if (_.isUndefined(value)) value = entry.value;\n        if (!_.isUndefined(value)) list.push({ ...entry, value });\n      });\n\n      return list;\n    },\n\n    // A map of all names in inputManifest with their values from the configuration object if they exist\n    // or from the inputManifest if they exist, otherwise undefined is given as the value for the key\n    // An example of returned object shape: { 'configName': 'demo', 'doYouWantThis': undefined }\n    get merged() {\n      const inputEntries = self.inputManifest.flattened;\n      const map = {};\n      _.forEach(inputEntries, entry => {\n        map[entry.name] = entry.value;\n      });\n\n      /* eslint-disable no-restricted-syntax, no-unused-vars */\n      for (const [key, value] of self.configuration.entries()) {\n        map[key] = value;\n      }\n      /* eslint-enable no-restricted-syntax, no-unused-vars */\n\n      return map;\n    },\n\n    get formFields() {\n      const index = self.currentSectionIndex;\n      if (self.totalSections < index) return [];\n      const input = self.inputManifestSection;\n      if (_.isUndefined(input)) return [];\n\n      return toMobxFormFields(input.children, self.merged);\n    },\n\n    get form() {\n      return createForm(self.formFields);\n    },\n\n    get totalSections() {\n      if (self.inputManifest === undefined) return 0;\n      return self.inputManifest.sections.length;\n    },\n\n    get hasNext() {\n      return self.nextSectionIndex !== -1 && !self.review;\n    },\n\n    get hasPrevious() {\n      return self.previousSectionIndex !== -1 || self.review;\n    },\n\n    // Returns the next section index\n    // if the current section is the last section, return -1\n    // walk through the remaining sections and return the index of the first one\n    // that has condition === true, otherwise return -1\n    get nextSectionIndex() {\n      if (self.totalSections < self.currentSectionIndex) return -1;\n      if (self.inputManifest === undefined) return -1;\n      const sections = self.inputManifest.sections;\n      const merged = self.merged;\n      let found = false;\n      let index = self.currentSectionIndex + 1;\n\n      while (!found && index < self.totalSections) {\n        const entry = sections[index];\n        found = isConditionTrue(entry.condition, merged);\n        if (!found) index += 1;\n      }\n\n      return found ? index : -1;\n    },\n\n    // Returns the previous section index\n    // if the current section is 0, return -1\n    // walk through the previous sections and return the index of the first one\n    // that has condition === true, otherwise return -1\n    get previousSectionIndex() {\n      if (self.currentSectionIndex === 0) return -1;\n      const sections = self.inputManifest.sections;\n      const merged = self.merged;\n      let found = false;\n      let index = self.currentSectionIndex - 1;\n\n      while (!found && index >= 0) {\n        const entry = sections[index];\n        found = isConditionTrue(entry.condition, merged);\n        if (!found) index -= 1;\n      }\n\n      return found ? index : -1;\n    },\n\n    get sectionsTitles() {\n      const sections = self.inputManifest.sections;\n      return _.map(sections, index => index.title);\n    },\n\n    get empty() {\n      if (self.inputManifest === undefined) return true;\n      return self.inputManifest.empty;\n    },\n  }));\n\n// Note: Do NOT register ConfigurationEditor in the global context\n\nexport default ConfigurationEditor;\n"],"file":"ConfigurationEditor.js"}