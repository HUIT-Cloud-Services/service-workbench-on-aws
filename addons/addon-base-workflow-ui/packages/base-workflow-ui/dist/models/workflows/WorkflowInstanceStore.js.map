{"version":3,"sources":["../../../src/models/workflows/WorkflowInstanceStore.js"],"names":["types","getParent","BaseStore","isStoreReady","getWorkflowInstance","WorkflowInstanceStore","named","props","workflowId","workflowVer","number","instanceId","tickPeriod","actions","self","superCleanup","cleanup","doLoad","parent","load","instance","runInAction","version","Error","setInstance","instanceMst","getInstance","pending","setFastTickPeriod","setSlowTickPeriod","changeTickPeriod","views","workflow","undefined","getVersion"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAASA,KAAT,EAAgBC,SAAhB,QAAiC,iBAAjC;AACA,SAASC,SAAT,EAAoBC,YAApB,QAAwC,uCAAxC;AAEA,SAASC,mBAAT,QAAoC,mBAApC,C,CAEA;AACA;AACA;;AACA,MAAMC,qBAAqB,GAAGH,SAAS,CAACI,KAAV,CAAgB,uBAAhB,EAC3BC,KAD2B,CACrB;AACLC,EAAAA,UAAU,EAAE,EADP;AAELC,EAAAA,WAAW,EAAET,KAAK,CAACU,MAFd;AAGLC,EAAAA,UAAU,EAAE,EAHP;AAILC,EAAAA,UAAU,EAAE,MAAM,IAJb,CAImB;;AAJnB,CADqB,EAQ3BC,OAR2B,CAQnBC,IAAI,IAAI;AACf;AACA,QAAMC,YAAY,GAAGD,IAAI,CAACE,OAA1B;AAEA,SAAO;AACL,UAAMC,MAAN,GAAe;AACb,YAAMC,MAAM,GAAGjB,SAAS,CAACa,IAAD,EAAO,CAAP,CAAxB;;AACA,UAAI,CAACX,YAAY,CAACe,MAAD,CAAjB,EAA2B;AACzB,cAAMA,MAAM,CAACC,IAAP,EAAN;AACD;;AACD,YAAMC,QAAQ,GAAG,MAAMhB,mBAAmB,CAACU,IAAI,CAACN,UAAN,EAAkBM,IAAI,CAACL,WAAvB,EAAoCK,IAAI,CAACH,UAAzC,CAA1C;AACAG,MAAAA,IAAI,CAACO,WAAL,CAAiB,MAAM;AACrB,cAAMC,OAAO,GAAGR,IAAI,CAACQ,OAArB;AACA,YAAI,CAACA,OAAL,EAAc,MAAM,IAAIC,KAAJ,CAAW,aAAYT,IAAI,CAACN,UAAW,MAAKM,IAAI,CAACL,WAAY,iBAA7D,CAAN;AACda,QAAAA,OAAO,CAACE,WAAR,CAAoBJ,QAApB;AACA,cAAMK,WAAW,GAAGH,OAAO,CAACI,WAAR,CAAoBZ,IAAI,CAACH,UAAzB,CAApB;;AACA,YAAIc,WAAW,IAAIA,WAAW,CAACE,OAA/B,EAAwC;AACtCb,UAAAA,IAAI,CAACc,iBAAL;AACD,SAFD,MAEO;AACLd,UAAAA,IAAI,CAACe,iBAAL;AACD;AACF,OAVD;AAWD,KAlBI;;AAoBLA,IAAAA,iBAAiB,GAAG;AAClBf,MAAAA,IAAI,CAACgB,gBAAL,CAAsB,MAAM,IAA5B,EADkB,CACiB;AACpC,KAtBI;;AAwBLF,IAAAA,iBAAiB,GAAG;AAClBd,MAAAA,IAAI,CAACgB,gBAAL,CAAsB,IAAI,IAA1B,EADkB,CACe;AAClC,KA1BI;;AA4BLd,IAAAA,OAAO,EAAE,MAAM;AACbD,MAAAA,YAAY;AACb;AA9BI,GAAP;AAgCD,CA5C2B,EA8C3BgB,KA9C2B,CA8CrBjB,IAAI,KAAK;AACd,MAAIQ,OAAJ,GAAc;AACZ,UAAMJ,MAAM,GAAGjB,SAAS,CAACa,IAAD,EAAO,CAAP,CAAxB;AACA,UAAMkB,QAAQ,GAAGd,MAAM,CAACc,QAAxB;AACA,QAAI,CAACA,QAAL,EAAe,OAAOC,SAAP;AACf,WAAOD,QAAQ,CAACE,UAAT,CAAoBpB,IAAI,CAACL,WAAzB,CAAP;AACD;;AANa,CAAL,CA9CiB,CAA9B,C,CAuDA;AACA;;AACA,eAAeJ,qBAAf","sourcesContent":["/*\n *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\").\n *  You may not use this file except in compliance with the License.\n *  A copy of the License is located at\n *\n *  http://aws.amazon.com/apache2.0\n *\n *  or in the \"license\" file accompanying this file. This file is distributed\n *  on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n *  express or implied. See the License for the specific language governing\n *  permissions and limitations under the License.\n */\n\nimport { types, getParent } from 'mobx-state-tree';\nimport { BaseStore, isStoreReady } from '@aws-ee/base-ui/dist/models/BaseStore';\n\nimport { getWorkflowInstance } from '../../helpers/api';\n\n// ==================================================================\n// WorkflowInstanceStore\n// ==================================================================\nconst WorkflowInstanceStore = BaseStore.named('WorkflowInstanceStore')\n  .props({\n    workflowId: '',\n    workflowVer: types.number,\n    instanceId: '',\n    tickPeriod: 300 * 1000, // 5 minutes\n  })\n\n  .actions(self => {\n    // save the base implementation of cleanup\n    const superCleanup = self.cleanup;\n\n    return {\n      async doLoad() {\n        const parent = getParent(self, 2);\n        if (!isStoreReady(parent)) {\n          await parent.load();\n        }\n        const instance = await getWorkflowInstance(self.workflowId, self.workflowVer, self.instanceId);\n        self.runInAction(() => {\n          const version = self.version;\n          if (!version) throw new Error(`Workflow \"${self.workflowId}\" v${self.workflowVer} does not exist`);\n          version.setInstance(instance);\n          const instanceMst = version.getInstance(self.instanceId);\n          if (instanceMst && instanceMst.pending) {\n            self.setFastTickPeriod();\n          } else {\n            self.setSlowTickPeriod();\n          }\n        });\n      },\n\n      setSlowTickPeriod() {\n        self.changeTickPeriod(300 * 1000); // 5 minutes\n      },\n\n      setFastTickPeriod() {\n        self.changeTickPeriod(5 * 1000); // 5 seconds\n      },\n\n      cleanup: () => {\n        superCleanup();\n      },\n    };\n  })\n\n  .views(self => ({\n    get version() {\n      const parent = getParent(self, 2);\n      const workflow = parent.workflow;\n      if (!workflow) return undefined;\n      return workflow.getVersion(self.workflowVer);\n    },\n  }));\n\n// Note: Do NOT register this in the app context, if you want to gain access to an instance\n//       use WorkflowStore.getWorkflowInstanceStore()\nexport default WorkflowInstanceStore;\n"],"file":"WorkflowInstanceStore.js"}