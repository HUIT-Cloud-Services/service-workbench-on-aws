{"version":3,"sources":["../../../src/models/workflows/WorkflowAssignmentsStore.js"],"names":["_","getParent","BaseStore","isStoreReady","getWorkflowAssignments","WorkflowAssignmentsStore","named","props","workflowId","tickPeriod","actions","self","superCleanup","cleanup","doLoad","parent","load","assignments","runInAction","workflow","Error","setAssignments","views","empty","length","total","list","result","slice","reverse","sortBy"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,OAAOA,CAAP,MAAc,QAAd;AACA,SAASC,SAAT,QAA0B,iBAA1B;AACA,SAASC,SAAT,EAAoBC,YAApB,QAAwC,uCAAxC;AAEA,SAASC,sBAAT,QAAuC,mBAAvC,C,CAEA;AACA;AACA;;AACA,MAAMC,wBAAwB,GAAGH,SAAS,CAACI,KAAV,CAAgB,0BAAhB,EAC9BC,KAD8B,CACxB;AACLC,EAAAA,UAAU,EAAE,EADP;AAELC,EAAAA,UAAU,EAAE,MAAM,IAFb,CAEmB;;AAFnB,CADwB,EAM9BC,OAN8B,CAMtBC,IAAI,IAAI;AACf;AACA,QAAMC,YAAY,GAAGD,IAAI,CAACE,OAA1B;AAEA,SAAO;AACL,UAAMC,MAAN,GAAe;AACb,YAAMC,MAAM,GAAGd,SAAS,CAACU,IAAD,EAAO,CAAP,CAAxB;;AACA,UAAI,CAACR,YAAY,CAACY,MAAD,CAAjB,EAA2B;AACzB,cAAMA,MAAM,CAACC,IAAP,EAAN;AACD;;AACD,YAAMC,WAAW,GAAG,MAAMb,sBAAsB,CAACO,IAAI,CAACH,UAAN,CAAhD;AACAG,MAAAA,IAAI,CAACO,WAAL,CAAiB,MAAM;AACrB,cAAMC,QAAQ,GAAGR,IAAI,CAACQ,QAAtB;AACA,YAAI,CAACA,QAAL,EAAe,MAAM,IAAIC,KAAJ,CAAW,aAAYT,IAAI,CAACH,UAAW,kBAAvC,CAAN;AACfW,QAAAA,QAAQ,CAACE,cAAT,CAAwBJ,WAAxB;AACD,OAJD;AAKD,KAZI;;AAcLJ,IAAAA,OAAO,EAAE,MAAM;AACbD,MAAAA,YAAY;AACb;AAhBI,GAAP;AAkBD,CA5B8B,EA8B9BU,KA9B8B,CA8BxBX,IAAI,KAAK;AACd,MAAIM,WAAJ,GAAkB;AAChB,UAAME,QAAQ,GAAGR,IAAI,CAACQ,QAAtB;AACA,QAAI,CAACA,QAAL,EAAe,OAAO,EAAP;AACf,WAAOA,QAAQ,CAACF,WAAhB;AACD,GALa;;AAOd,MAAIE,QAAJ,GAAe;AACb,UAAMJ,MAAM,GAAGd,SAAS,CAACU,IAAD,EAAO,CAAP,CAAxB;AACA,WAAOI,MAAM,CAACI,QAAd;AACD,GAVa;;AAYd,MAAII,KAAJ,GAAY;AACV,WAAOZ,IAAI,CAACM,WAAL,CAAiBO,MAAjB,KAA4B,CAAnC;AACD,GAda;;AAgBd,MAAIC,KAAJ,GAAY;AACV,WAAOd,IAAI,CAACM,WAAL,CAAiBO,MAAxB;AACD,GAlBa;;AAoBd,MAAIE,IAAJ,GAAW;AACT,UAAMC,MAAM,GAAGhB,IAAI,CAACM,WAAL,CAAiBW,KAAjB,EAAf;AAEA,WAAO5B,CAAC,CAAC6B,OAAF,CAAU7B,CAAC,CAAC8B,MAAF,CAASH,MAAT,EAAiB,CAAC,WAAD,CAAjB,CAAV,CAAP;AACD;;AAxBa,CAAL,CA9BoB,CAAjC,C,CAyDA;AACA;;AACA,eAAetB,wBAAf","sourcesContent":["/*\n *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\").\n *  You may not use this file except in compliance with the License.\n *  A copy of the License is located at\n *\n *  http://aws.amazon.com/apache2.0\n *\n *  or in the \"license\" file accompanying this file. This file is distributed\n *  on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n *  express or implied. See the License for the specific language governing\n *  permissions and limitations under the License.\n */\n\nimport _ from 'lodash';\nimport { getParent } from 'mobx-state-tree';\nimport { BaseStore, isStoreReady } from '@aws-ee/base-ui/dist/models/BaseStore';\n\nimport { getWorkflowAssignments } from '../../helpers/api';\n\n// ==================================================================\n// WorkflowAssignmentsStore\n// ==================================================================\nconst WorkflowAssignmentsStore = BaseStore.named('WorkflowAssignmentsStore')\n  .props({\n    workflowId: '',\n    tickPeriod: 300 * 1000, // 5 minutes\n  })\n\n  .actions(self => {\n    // save the base implementation of cleanup\n    const superCleanup = self.cleanup;\n\n    return {\n      async doLoad() {\n        const parent = getParent(self, 2);\n        if (!isStoreReady(parent)) {\n          await parent.load();\n        }\n        const assignments = await getWorkflowAssignments(self.workflowId);\n        self.runInAction(() => {\n          const workflow = self.workflow;\n          if (!workflow) throw new Error(`Workflow \"${self.workflowId}\" does not exist`);\n          workflow.setAssignments(assignments);\n        });\n      },\n\n      cleanup: () => {\n        superCleanup();\n      },\n    };\n  })\n\n  .views(self => ({\n    get assignments() {\n      const workflow = self.workflow;\n      if (!workflow) return [];\n      return workflow.assignments;\n    },\n\n    get workflow() {\n      const parent = getParent(self, 2);\n      return parent.workflow;\n    },\n\n    get empty() {\n      return self.assignments.length === 0;\n    },\n\n    get total() {\n      return self.assignments.length;\n    },\n\n    get list() {\n      const result = self.assignments.slice();\n\n      return _.reverse(_.sortBy(result, ['createdAt']));\n    },\n  }));\n\n// Note: Do NOT register this in the app context, if you want to gain access to an instance\n//       use WorkflowStore.getWorkflowAssignmentsStore()\nexport default WorkflowAssignmentsStore;\n"],"file":"WorkflowAssignmentsStore.js"}