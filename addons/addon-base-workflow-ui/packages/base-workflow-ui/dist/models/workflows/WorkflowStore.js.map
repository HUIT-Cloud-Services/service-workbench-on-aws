{"version":3,"sources":["../../../src/models/workflows/WorkflowStore.js"],"names":["_","types","getParent","BaseStore","getWorkflow","toWorkflows","WorkflowInstancesStore","WorkflowInstanceStore","WorkflowAssignmentsStore","WorkflowStore","named","props","workflowId","instancesStores","optional","map","instanceStores","assignmentsStore","tickPeriod","actions","self","superCleanup","cleanup","doLoad","parent","workflowRaw","workflow","first","addWorkflow","getInstancesStore","workflowVer","encodedId","entry","get","set","create","getInstanceStore","instanceId","getAssignmentsStore","clear","views","w"],"mappings":"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","sourcesContent":["/*\n *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\").\n *  You may not use this file except in compliance with the License.\n *  A copy of the License is located at\n *\n *  http://aws.amazon.com/apache2.0\n *\n *  or in the \"license\" file accompanying this file. This file is distributed\n *  on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n *  express or implied. See the License for the specific language governing\n *  permissions and limitations under the License.\n */\n\nimport _ from 'lodash';\nimport { types, getParent } from 'mobx-state-tree';\nimport { BaseStore } from '@aws-ee/base-ui/dist/models/BaseStore';\n\nimport { getWorkflow } from '../../helpers/api';\nimport { toWorkflows } from './Workflow';\nimport WorkflowInstancesStore from './WorkflowInstancesStore';\nimport WorkflowInstanceStore from './WorkflowInstanceStore';\nimport WorkflowAssignmentsStore from './WorkflowAssignmentsStore';\n\n// ==================================================================\n// WorkflowStore\n// ==================================================================\nconst WorkflowStore = BaseStore.named('WorkflowStore')\n  .props({\n    workflowId: '',\n    instancesStores: types.optional(types.map(WorkflowInstancesStore), {}),\n    instanceStores: types.optional(types.map(WorkflowInstanceStore), {}),\n    assignmentsStore: types.optional(types.map(WorkflowAssignmentsStore), {}),\n    tickPeriod: 300 * 1000, // 5 minutes\n  })\n\n  .actions(self => {\n    // save the base implementation of cleanup\n    const superCleanup = self.cleanup;\n\n    return {\n      async doLoad() {\n        const parent = getParent(self, 2);\n        const workflowRaw = await getWorkflow(self.workflowId);\n        const workflow = _.first(toWorkflows(workflowRaw));\n        parent.addWorkflow(workflow);\n      },\n\n      getInstancesStore: (workflowId, workflowVer) => {\n        const encodedId = `${workflowId}__${workflowVer}`;\n        let entry = self.instancesStores.get(encodedId);\n        if (!entry) {\n          // Lazily create a WorkflowInstancesStore for each workflow version\n          self.instancesStores.set(encodedId, WorkflowInstancesStore.create({ workflowId, workflowVer }));\n          entry = self.instancesStores.get(encodedId);\n        }\n\n        return entry;\n      },\n\n      getInstanceStore: (workflowVer, instanceId) => {\n        const workflowId = self.workflowId;\n        const encodedId = `${workflowId}__${workflowVer}__${instanceId}`;\n        let entry = self.instanceStores.get(encodedId);\n        if (!entry) {\n          // Lazily create a WorkflowInstanceStore for each workflow version\n          self.instanceStores.set(encodedId, WorkflowInstanceStore.create({ workflowId, workflowVer, instanceId }));\n          entry = self.instanceStores.get(encodedId);\n        }\n\n        return entry;\n      },\n\n      getAssignmentsStore: () => {\n        const workflowId = self.workflowId;\n        let entry = self.assignmentsStore.get(workflowId);\n        if (!entry) {\n          // Lazily create a WorkflowAssignmentsStore for each workflow\n          self.assignmentsStore.set(workflowId, WorkflowAssignmentsStore.create({ workflowId }));\n          entry = self.assignmentsStore.get(workflowId);\n        }\n\n        return entry;\n      },\n\n      cleanup: () => {\n        self.instancesStores.clear();\n        self.instanceStores.clear();\n        self.assignmentsStore.clear();\n        superCleanup();\n      },\n    };\n  })\n\n  .views(self => ({\n    get workflow() {\n      const parent = getParent(self, 2);\n      const w = parent.getWorkflow(self.workflowId);\n      return w;\n    },\n  }));\n\n// Note: Do NOT register this in the global context, if you want to gain access to an instance\n//       use WorkflowsStore.getWorkflowStore()\nexport default WorkflowStore;\n"],"file":"WorkflowStore.js"}