{"version":3,"sources":["../../../src/models/workflows/Workflow.js"],"names":["_","types","getEnv","applySnapshot","detach","generateId","consolidateToMap","RunSpec","WorkflowStep","titles","instanceTtl","runSpecSize","runSpecTarget","title","desc","steps","statusColorMap","in_progress","error","done","WorkflowAssignment","model","id","wf","rev","number","createdAt","createdBy","updatedAt","updatedBy","triggerType","triggerTypeData","actions","self","setWorkflowAssignment","assignment","views","system","username","WorkflowInstance","identifier","wfId","wfVer","ttl","maybeNull","msg","wfStatus","stStatuses","optional","frozen","runSpec","input","workflow","setWorkflowInstance","instance","version","workflowsStore","getWorkflow","undefined","getVersion","pending","statusSummary","stepSummary","status","count","size","filter","item","statusLabel","startCase","statusColor","is","value","spread","success","warning","statusMsg","stepsSummary","msgSpread","selectedSteps","getStep","index","nth","strip","pre","color","startsWith","match","parsed","substring","length","parse","isEmpty","result","forEach","stepStatus","step","msgObj","push","stepTemplateId","stepTemplateVer","startTime","endTime","WorkflowVersion","v","maybe","stepsOrderChanged","boolean","array","instancesMap","map","workflowTemplateId","workflowTemplateVer","setWorkflowVersion","setInstances","instances","exiting","newItem","setInstance","put","setTitle","setDescription","setInstanceTtl","answer","isString","parseInt","isNaN","isNumber","setRunSpec","reinsertStep","currentIndex","targetIndex","current","splice","removeStep","idOrStep","remove","addStep","skippable","workflowStep","create","makeNew","stepId","find","getInstance","get","descHtml","showdown","convert","assets","propertySummaryRows","template","templatesStore","workflowTemplatesStore","getTemplate","canRearrangeSteps","canWorkflowRearrangeSteps","canOverrideProp","prop","canWorkflowOverrideProp","hasPendingInstances","some","Workflow","versions","assignments","setWorkflow","mapOfExisting","keyBy","toString","processed","workflowVersion","existing","replace","setAssignments","latest","largestVersion","versionNumbers","toWorkflows","entry","values"],"mappings":"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","sourcesContent":["/*\n *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\").\n *  You may not use this file except in compliance with the License.\n *  A copy of the License is located at\n *\n *  http://aws.amazon.com/apache2.0\n *\n *  or in the \"license\" file accompanying this file. This file is distributed\n *  on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n *  express or implied. See the License for the specific language governing\n *  permissions and limitations under the License.\n */\n\nimport _ from 'lodash';\nimport { types, getEnv, applySnapshot, detach } from 'mobx-state-tree';\nimport { generateId, consolidateToMap } from '@aws-ee/base-ui/dist/helpers/utils';\n\nimport { RunSpec } from '../workflow-templates/WorkflowTemplate';\nimport WorkflowStep from './WorkflowStep';\n\nconst titles = {\n  instanceTtl: 'Time to Live (TTL) for instances of the workflow',\n  runSpecSize: 'Runtime lambda size',\n  runSpecTarget: 'Runtime target',\n  title: 'Title',\n  desc: 'Description',\n  steps: 'Add, remove, and rearrange steps',\n};\n\nconst statusColorMap = {\n  // 'not_started': '', // to default to grey\n  in_progress: 'orange',\n  error: 'red',\n  done: 'green',\n};\n\n// ==================================================================\n// WorkflowAssignment\n// ==================================================================\nconst WorkflowAssignment = types\n  .model('WorkflowAssignment', {\n    id: '',\n    wf: '',\n    rev: types.number,\n    createdAt: '',\n    createdBy: '',\n    updatedAt: '',\n    updatedBy: '',\n    triggerType: '',\n    triggerTypeData: '',\n  })\n  .actions(self => ({\n    setWorkflowAssignment(assignment) {\n      applySnapshot(self, assignment);\n    },\n  }))\n\n  .views(self => ({\n    get system() {\n      return self.createdBy.username === '_system_';\n    },\n  }));\n\n// ==================================================================\n// WorkflowInstance\n// ==================================================================\nconst WorkflowInstance = types\n  .model('WorkflowInstance', {\n    id: types.identifier,\n    wfId: '',\n    wfVer: types.number,\n    ttl: types.maybeNull(types.number),\n    createdAt: '',\n    createdBy: '',\n    updatedAt: '',\n    updatedBy: '',\n    msg: '',\n    wfStatus: '',\n    stStatuses: types.optional(types.frozen(), []),\n    runSpec: RunSpec,\n    input: types.optional(types.frozen(), {}),\n    workflow: types.optional(types.frozen(), {}),\n  })\n  .actions(self => ({\n    setWorkflowInstance(instance) {\n      applySnapshot(self, instance);\n    },\n  }))\n\n  .views(self => ({\n    get system() {\n      return self.createdBy.username === '_system_';\n    },\n\n    // This is the workflow version\n    get version() {\n      const workflowsStore = getEnv(self).workflowsStore;\n      const workflow = workflowsStore.getWorkflow(self.wfId);\n      if (!workflow) return undefined;\n      return workflow.getVersion(self.wfVer);\n    },\n\n    get pending() {\n      return self.wfStatus === 'not_started' || self.wfStatus === 'in_progress';\n    },\n\n    get statusSummary() {\n      const stepSummary = status => {\n        const count = _.size(_.filter(self.stStatuses, item => item.status === status));\n        return {\n          count,\n          statusLabel: _.startCase(status),\n          statusColor: statusColorMap[status],\n        };\n      };\n      const is = value => self.wfStatus === value;\n      const spread = {\n        success: is('done'),\n        error: is('error'),\n        warning: is('in_progress'),\n      };\n\n      return {\n        statusMsg: self.msg,\n        statusLabel: _.startCase(self.wfStatus),\n        statusColor: statusColorMap[self.wfStatus],\n        stepsSummary: [\n          stepSummary('done'),\n          stepSummary('error'),\n          stepSummary('in_progress'),\n          stepSummary('skipped'),\n          stepSummary('not_started'),\n        ],\n        msgSpread: spread,\n      };\n    },\n\n    get steps() {\n      const selectedSteps = self.workflow.selectedSteps || [];\n      const getStep = index => _.nth(selectedSteps, index);\n      const strip = (pre, msg, color) => {\n        if (_.startsWith(msg, pre)) {\n          return {\n            match: true,\n            parsed: msg.substring(pre.length),\n            color,\n          };\n        }\n        return {\n          match: false,\n          parsed: msg,\n        };\n      };\n      const parse = msg => {\n        if (_.isEmpty(msg)) return {};\n        let item = strip('WARN|||', msg, 'orange');\n        if (!item.match) {\n          item = strip('ERR|||', msg, 'red');\n          if (!item.match) {\n            item = strip('INFO|||', msg, 'green');\n          }\n        }\n\n        return item;\n      };\n      const result = [];\n\n      _.forEach(self.stStatuses, (stepStatus, index) => {\n        const step = getStep(index) || {};\n        const msgObj = parse(stepStatus.msg);\n        result.push({\n          statusMsg: msgObj.parsed,\n          statusLabel: _.startCase(stepStatus.status),\n          statusColor: msgObj.color || statusColorMap[stepStatus.status],\n          stepTemplateId: step.stepTemplateId || 'unknown',\n          stepTemplateVer: step.stepTemplateVer,\n          title: step.title || 'Not available',\n          startTime: stepStatus.startTime,\n          endTime: stepStatus.endTime,\n        });\n      });\n\n      return result;\n    },\n  }));\n\n// ==================================================================\n// WorkflowVersion\n// ==================================================================\nconst WorkflowVersion = types\n  .model('WorkflowVersion', {\n    id: '',\n    v: types.number,\n    rev: types.maybe(types.number),\n    createdAt: '',\n    createdBy: '',\n    updatedAt: '',\n    updatedBy: '',\n    title: '',\n    desc: '',\n    instanceTtl: types.maybeNull(types.number),\n    runSpec: RunSpec,\n    stepsOrderChanged: types.boolean,\n    selectedSteps: types.optional(types.array(WorkflowStep), []),\n    instancesMap: types.optional(types.map(WorkflowInstance), {}),\n    workflowTemplateId: '',\n    workflowTemplateVer: types.maybe(types.number),\n  })\n  .actions(self => ({\n    setWorkflowVersion(version) {\n      const instancesMap = detach(self.instancesMap); // preserve the instances value\n      applySnapshot(self, version);\n      self.instancesMap = instancesMap;\n    },\n\n    // important \"instances\" is expected to be an array\n    setInstances(instances = []) {\n      consolidateToMap(self.instancesMap, instances, (exiting, newItem) => {\n        exiting.setWorkflowInstance(newItem);\n      });\n    },\n\n    setInstance(instance) {\n      self.instancesMap.put(instance);\n    },\n\n    setTitle(title) {\n      self.title = title;\n    },\n\n    setDescription(desc) {\n      self.desc = desc;\n    },\n\n    setInstanceTtl(value) {\n      let answer = null;\n      if (_.isString(value)) {\n        const parsed = parseInt(value, 10);\n        if (_.isNaN(parsed)) answer = null;\n        else answer = parsed;\n      } else if (_.isNumber(value)) {\n        answer = value;\n      }\n\n      self.instanceTtl = answer;\n    },\n\n    setRunSpec(runSpec) {\n      applySnapshot(self.runSpec, runSpec);\n    },\n\n    reinsertStep(currentIndex, targetIndex) {\n      const current = self.selectedSteps[currentIndex];\n\n      detach(current);\n      self.selectedSteps.splice(targetIndex, 0, current); // this will reattach the step\n    },\n\n    removeStep(idOrStep) {\n      const step = _.isString(idOrStep) ? self.getStep(idOrStep) : idOrStep;\n      self.selectedSteps.remove(step);\n    },\n\n    addStep(step) {\n      const { id, v, skippable, title, desc } = step;\n      const workflowStep = WorkflowStep.create(\n        {\n          id: generateId('wf-step'),\n          stepTemplateId: id,\n          stepTemplateVer: v,\n          title,\n          desc,\n          skippable,\n        },\n        getEnv(self),\n      );\n\n      workflowStep.makeNew();\n      self.selectedSteps.push(workflowStep);\n\n      return workflowStep;\n    },\n  }))\n\n  .views(self => ({\n    getStep(stepId) {\n      return _.find(self.selectedSteps, step => step.id === stepId);\n    },\n\n    get instances() {\n      const result = [];\n      self.instancesMap.forEach(value => {\n        // remember instancesMap is a Map not a simple object\n        result.push(value);\n      });\n\n      return result;\n    },\n\n    getInstance(id) {\n      return self.instancesMap.get(id);\n    },\n\n    get descHtml() {\n      const showdown = getEnv(self).showdown;\n      return showdown.convert(self.desc, self.assets); // TODO declare assets\n    },\n\n    get system() {\n      return self.createdBy.username === '_system_';\n    },\n\n    get propertySummaryRows() {\n      return [\n        {\n          title: titles.instanceTtl,\n          value: self.instanceTtl,\n        },\n        ...self.runSpec.propertySummaryRows,\n      ];\n    },\n\n    // This is the workflow template version\n    get template() {\n      const templatesStore = getEnv(self).workflowTemplatesStore;\n      const template = templatesStore.getTemplate(self.workflowTemplateId);\n      if (!template) return undefined;\n      return template.getVersion(self.workflowTemplateVer);\n    },\n\n    get canRearrangeSteps() {\n      const template = self.template;\n      if (!template) return false;\n      return template.canWorkflowRearrangeSteps;\n    },\n\n    canOverrideProp(prop) {\n      const template = self.template;\n      if (!template) return false;\n      return template.canWorkflowOverrideProp(prop);\n    },\n\n    get hasPendingInstances() {\n      return _.some(self.instances, ['pending', true]);\n    },\n  }));\n\n// ==================================================================\n// Workflow\n// ==================================================================\nconst Workflow = types\n  .model('Workflow', {\n    id: types.identifier,\n    versions: types.optional(types.array(WorkflowVersion), []),\n    assignments: types.optional(types.array(WorkflowAssignment), []),\n  })\n  .actions(self => ({\n    setWorkflow(workflow) {\n      // we try to preserve any existing version objects and update their content instead\n      const mapOfExisting = _.keyBy(self.versions, version => version.v.toString());\n      const processed = [];\n\n      _.forEach(workflow.versions, workflowVersion => {\n        const existing = mapOfExisting[workflowVersion.v];\n        if (existing) {\n          existing.setWorkflowVersion(workflowVersion);\n          processed.push(existing);\n        } else {\n          processed.push(WorkflowVersion.create(workflowVersion));\n        }\n      });\n\n      self.versions.replace(processed);\n    },\n\n    setAssignments(assignments) {\n      // we try to preserve any existing assignment objects and update their content instead\n      const mapOfExisting = _.keyBy(self.assignments, 'id');\n      const processed = [];\n\n      _.forEach(assignments, assignment => {\n        const existing = mapOfExisting[assignment.id];\n        if (existing) {\n          existing.setWorkflowAssignment(assignment);\n          processed.push(existing);\n        } else {\n          processed.push(WorkflowAssignment.create(assignment));\n        }\n      });\n\n      self.assignments.replace(processed);\n    },\n  }))\n\n  .views(self => ({\n    get latest() {\n      // we loop through all 'v' numbers and pick the workflow with the largest 'v' value\n      let largestVersion = self.versions[0];\n      _.forEach(self.versions, version => {\n        if (version.v > largestVersion.v) {\n          largestVersion = version;\n        }\n      });\n      return largestVersion;\n    },\n\n    getVersion(v) {\n      return _.find(self.versions, ['v', v]);\n    },\n\n    get versionNumbers() {\n      return _.map(self.versions, version => version.v);\n    },\n  }));\n\n// Given an array of [ { id, v: 0, ... }, { id, v:1, ... } ]\n// return an array of the grouping of the workflow versions based on their ids\n// [ { id, versions: [ ... ] }, { id, versions: [ ... ] }, ...]\nfunction toWorkflows(versions) {\n  const map = {};\n  _.forEach(versions, version => {\n    const id = version.id;\n    const entry = map[id] || { id, versions: [] };\n    entry.versions.push(version);\n    map[id] = entry;\n  });\n\n  return _.values(map);\n}\n\nexport { Workflow, WorkflowVersion, WorkflowInstance, toWorkflows };\n"],"file":"Workflow.js"}