{"version":3,"sources":["../../../src/models/users/UserDisplayName.js"],"names":["UserDisplayName","types","model","views","self","getDisplayName","uid","userStore","_","isUndefined","user","displayName","usersStore","asUserObject","getLongDisplayName","identifier","longDisplayName","isSystem","registerContextItems","appContext","userDisplayName","create"],"mappings":";;;;;;;;AAeA;;AACA;;;;AAhBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA,IAAMA,eAAe,GAAGC,qBAAMC,KAAN,CAAY,iBAAZ,EAA+B,EAA/B,EAAmCC,KAAnC,CAAyC,UAAAC,IAAI;AAAA,SAAK;AACxEC,IAAAA,cADwE,gCAChD;AAAA,UAAPC,GAAO,QAAPA,GAAO;AACtB,UAAIC,SAAJ;;AAEA,UAAIC,mBAAEC,WAAF,CAAcH,GAAd,CAAJ,EAAwB;AACtBC,QAAAA,SAAS,GAAG,2BAAOH,IAAP,EAAaG,SAAzB;AACA,YAAIA,SAAS,CAACG,IAAd,EAAoB,OAAOH,SAAS,CAACI,WAAjB;AACpB,eAAO,SAAP;AACD;;AAED,UAAIL,GAAG,KAAK,UAAZ,EAAwB,OAAO,QAAP;AAExB,UAAMM,UAAU,GAAG,2BAAOR,IAAP,EAAaQ,UAAhC;AACA,UAAMF,IAAI,GAAGE,UAAU,CAACC,YAAX,CAAwB;AAAEP,QAAAA,GAAG,EAAHA;AAAF,OAAxB,CAAb;AAEA,UAAIE,mBAAEC,WAAF,CAAcC,IAAd,CAAJ,EAAyB,OAAO,SAAP;AACzB,aAAOA,IAAI,CAACC,WAAL,IAAoB,SAA3B;AACD,KAjBuE;AAmBxE;AACAG,IAAAA,kBApBwE,8BAoBrDC,UApBqD,EAoBzC;AAC7B,UAAIR,SAAJ;;AAEA,UAAIC,mBAAEC,WAAF,CAAcM,UAAd,CAAJ,EAA+B;AAC7BR,QAAAA,SAAS,GAAG,2BAAOH,IAAP,EAAaG,SAAzB;AACA,YAAIA,SAAS,CAACG,IAAd,EAAoB,OAAOH,SAAS,CAACS,eAAjB;AACpB,eAAO,SAAP;AACD;;AAED,UAAID,UAAU,KAAK,UAAnB,EAA+B,OAAO,QAAP;AAE/B,UAAMH,UAAU,GAAG,2BAAOR,IAAP,EAAaQ,UAAhC;AACA,UAAMF,IAAI,GAAGE,UAAU,CAACC,YAAX,CAAwBE,UAAxB,CAAb;AAEA,UAAIP,mBAAEC,WAAF,CAAcC,IAAd,CAAJ,EAAyB,OAAO,SAAP;AACzB,aAAOA,IAAI,CAACM,eAAL,IAAwB,SAA/B;AACD,KApCuE;AAsCxE;AACAC,IAAAA,QAvCwE,oBAuC/DF,UAvC+D,EAuCnD;AACnB,UAAIR,SAAJ;;AAEA,UAAIC,mBAAEC,WAAF,CAAcM,UAAd,CAAJ,EAA+B;AAC7BR,QAAAA,SAAS,GAAG,2BAAOH,IAAP,EAAaG,SAAzB;AACA,YAAIA,SAAS,CAACG,IAAd,EAAoB,OAAOH,SAAS,CAACG,IAAV,CAAeO,QAAtB;AACpB,eAAO,KAAP;AACD;;AAED,UAAIF,UAAU,KAAK,UAAnB,EAA+B,OAAO,IAAP;AAE/B,UAAMH,UAAU,GAAG,2BAAOR,IAAP,EAAaQ,UAAhC;AACA,UAAMF,IAAI,GAAGE,UAAU,CAACC,YAAX,CAAwBE,UAAxB,CAAb;AAEA,UAAIP,mBAAEC,WAAF,CAAcC,IAAd,CAAJ,EAAyB,OAAO,KAAP;AACzB,aAAOA,IAAI,CAACO,QAAZ;AACD;AAvDuE,GAAL;AAAA,CAA7C,CAAxB;;;;AA0DA,SAASC,oBAAT,CAA8BC,UAA9B,EAA0C;AACxCA,EAAAA,UAAU,CAACC,eAAX,GAA6BpB,eAAe,CAACqB,MAAhB,CAAuB,EAAvB,EAA2BF,UAA3B,CAA7B;AACD","sourcesContent":["/*\n *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\").\n *  You may not use this file except in compliance with the License.\n *  A copy of the License is located at\n *\n *  http://aws.amazon.com/apache2.0\n *\n *  or in the \"license\" file accompanying this file. This file is distributed\n *  on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n *  express or implied. See the License for the specific language governing\n *  permissions and limitations under the License.\n */\n\nimport _ from 'lodash';\nimport { types, getEnv } from 'mobx-state-tree';\n\n// A convenient model that returns the display name or long display name given a user identifier\nconst UserDisplayName = types.model('UserDisplayName', {}).views(self => ({\n  getDisplayName({ uid }) {\n    let userStore;\n\n    if (_.isUndefined(uid)) {\n      userStore = getEnv(self).userStore;\n      if (userStore.user) return userStore.displayName;\n      return 'Unknown';\n    }\n\n    if (uid === '_system_') return 'System';\n\n    const usersStore = getEnv(self).usersStore;\n    const user = usersStore.asUserObject({ uid });\n\n    if (_.isUndefined(user)) return 'unknown';\n    return user.displayName || 'unknown';\n  },\n\n  // identifier: can be an instance of '_system_', other string or undefined\n  getLongDisplayName(identifier) {\n    let userStore;\n\n    if (_.isUndefined(identifier)) {\n      userStore = getEnv(self).userStore;\n      if (userStore.user) return userStore.longDisplayName;\n      return 'Unknown';\n    }\n\n    if (identifier === '_system_') return 'System';\n\n    const usersStore = getEnv(self).usersStore;\n    const user = usersStore.asUserObject(identifier);\n\n    if (_.isUndefined(user)) return 'unknown';\n    return user.longDisplayName || 'unknown';\n  },\n\n  // identifier: can be an instance of '_system_', other string or undefined\n  isSystem(identifier) {\n    let userStore;\n\n    if (_.isUndefined(identifier)) {\n      userStore = getEnv(self).userStore;\n      if (userStore.user) return userStore.user.isSystem;\n      return false;\n    }\n\n    if (identifier === '_system_') return true;\n\n    const usersStore = getEnv(self).usersStore;\n    const user = usersStore.asUserObject(identifier);\n\n    if (_.isUndefined(user)) return false;\n    return user.isSystem;\n  },\n}));\n\nfunction registerContextItems(appContext) {\n  appContext.userDisplayName = UserDisplayName.create({}, appContext);\n}\n\nexport { UserDisplayName, registerContextItems };\n"],"file":"UserDisplayName.js"}