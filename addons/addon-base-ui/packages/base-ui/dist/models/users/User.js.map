{"version":3,"sources":["../../../src/models/users/User.js"],"names":["User","types","model","uid","firstName","maybeNull","optional","string","lastName","isAdmin","username","ns","email","userType","authenticationProviderId","identityProviderName","status","rev","views","self","displayName","longDisplayName","unknown","fullName","isRootUser","_","toLower","isActive","isSystem","id","isSame","isSamePrincipal","principal","principalStr","JSON","stringify","getPrincipalObjFromPrincipalStr","parse","getPrincipalStrFromPrincipalObj"],"mappings":";;;;;;;;;AAeA;;AACA;;;;AAhBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA,IAAMA,IAAI,GAAGC,qBACVC,KADU,CACJ,MADI,EACI;AACbC,EAAAA,GAAG,EAAE,EADQ;AAEbC,EAAAA,SAAS,EAAEH,qBAAMI,SAAN,CAAgBJ,qBAAMK,QAAN,CAAeL,qBAAMM,MAArB,EAA6B,EAA7B,CAAhB,CAFE;AAGbC,EAAAA,QAAQ,EAAEP,qBAAMI,SAAN,CAAgBJ,qBAAMK,QAAN,CAAeL,qBAAMM,MAArB,EAA6B,EAA7B,CAAhB,CAHG;AAIbE,EAAAA,OAAO,EAAER,qBAAMK,QAAN,CAAeL,+BAAf,EAA8B,KAA9B,CAJI;AAKbS,EAAAA,QAAQ,EAAE,EALG;AAMbC,EAAAA,EAAE,EAAEV,qBAAMI,SAAN,CAAgBJ,qBAAMK,QAAN,CAAeL,qBAAMM,MAArB,EAA6B,EAA7B,CAAhB,CANS;AAObK,EAAAA,KAAK,EAAE,EAPM;AAQbC,EAAAA,QAAQ,EAAE,EARG;AASbC,EAAAA,wBAAwB,EAAE,EATb;AASiB;AAC9BC,EAAAA,oBAAoB,EAAEd,qBAAMI,SAAN,CAAgBJ,qBAAMK,QAAN,CAAeL,qBAAMM,MAArB,EAA6B,EAA7B,CAAhB,CAVT;AAU4D;AACzES,EAAAA,MAAM,EAAE,QAXK;AAYbC,EAAAA,GAAG,EAAE;AAZQ,CADJ,EAeVC,KAfU,CAeJ,UAAAC,IAAI;AAAA,SAAK;AACd,QAAIC,WAAJ,GAAkB;AAChB,uBAAUD,IAAI,CAACf,SAAf,cAA4Be,IAAI,CAACX,QAAjC;AACD,KAHa;;AAKd,QAAIa,eAAJ,GAAsB;AACpB,UAAIF,IAAI,CAACG,OAAT,EAAkB;AAChB,yBAAUH,IAAI,CAACT,QAAf;AACD;;AACD,UAAMa,QAAQ,aAAMJ,IAAI,CAACf,SAAX,cAAwBe,IAAI,CAACX,QAA7B,CAAd;;AACA,UAAIW,IAAI,CAACP,KAAT,EAAgB;AACd,yBAAUW,QAAV,eAAuBJ,IAAI,CAACP,KAA5B;AACD;;AACD,aAAOW,QAAP;AACD,KAda;;AAgBd,QAAID,OAAJ,GAAc;AACZ,aAAO,CAACH,IAAI,CAACf,SAAN,IAAmB,CAACe,IAAI,CAACX,QAAhC;AACD,KAlBa;;AAoBd,QAAIgB,UAAJ,GAAiB;AACf,aAAOC,mBAAEC,OAAF,CAAUP,IAAI,CAACN,QAAf,MAA6B,MAApC;AACD,KAtBa;;AAwBd,QAAIc,QAAJ,GAAe;AACb,aAAOF,mBAAEC,OAAF,CAAUP,IAAI,CAACH,MAAf,MAA2B,QAAlC;AACD,KA1Ba;;AA4Bd,QAAIY,QAAJ,GAAe;AACb,aAAOT,IAAI,CAACU,EAAL,KAAY,UAAnB;AACD,KA9Ba;;AAgCdC,IAAAA,MAhCc,kBAgCP3B,GAhCO,EAgCF;AACV,aAAOgB,IAAI,CAAChB,GAAL,KAAaA,GAApB;AACD,KAlCa;AAoCd4B,IAAAA,eApCc,iCAoCoB;AAAA,UAAhBrB,QAAgB,QAAhBA,QAAgB;AAAA,UAANC,EAAM,QAANA,EAAM;AAChC,aAAOQ,IAAI,CAACT,QAAL,KAAkBA,QAAlB,IAA8BS,IAAI,CAACR,EAAL,KAAYA,EAAjD;AACD,KAtCa;;AAwCd,QAAIkB,EAAJ,GAAS;AACP,aAAOV,IAAI,CAAChB,GAAZ;AACD,KA1Ca;;AA4Cd,QAAI6B,SAAJ,GAAgB;AACd,aAAO;AAAEtB,QAAAA,QAAQ,EAAES,IAAI,CAACT,QAAjB;AAA2BC,QAAAA,EAAE,EAAEQ,IAAI,CAACR;AAApC,OAAP;AACD,KA9Ca;;AAgDd,QAAIsB,YAAJ,GAAmB;AACjB,aAAOC,IAAI,CAACC,SAAL,CAAehB,IAAI,CAACa,SAApB,CAAP;AACD;;AAlDa,GAAL;AAAA,CAfA,CAAb;;;;AAoEA,SAASI,+BAAT,CAAyCH,YAAzC,EAAuD;AACrD,SAAOC,IAAI,CAACG,KAAL,CAAWJ,YAAX,CAAP;AACD;;AAED,SAASK,+BAAT,QAA2D;AAAA,MAAhB5B,QAAgB,SAAhBA,QAAgB;AAAA,MAANC,EAAM,SAANA,EAAM;AACzD,SAAOuB,IAAI,CAACC,SAAL,CAAe;AAAEzB,IAAAA,QAAQ,EAARA,QAAF;AAAYC,IAAAA,EAAE,EAAFA;AAAZ,GAAf,CAAP;AACD","sourcesContent":["/*\n *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\").\n *  You may not use this file except in compliance with the License.\n *  A copy of the License is located at\n *\n *  http://aws.amazon.com/apache2.0\n *\n *  or in the \"license\" file accompanying this file. This file is distributed\n *  on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n *  express or implied. See the License for the specific language governing\n *  permissions and limitations under the License.\n */\n\nimport { types } from 'mobx-state-tree';\nimport _ from 'lodash';\n\nconst User = types\n  .model('User', {\n    uid: '',\n    firstName: types.maybeNull(types.optional(types.string, '')),\n    lastName: types.maybeNull(types.optional(types.string, '')),\n    isAdmin: types.optional(types.boolean, false),\n    username: '',\n    ns: types.maybeNull(types.optional(types.string, '')),\n    email: '',\n    userType: '',\n    authenticationProviderId: '', // Id of the authentication provider this user is authenticated against (such as internal, cognito auth provider id etc)\n    identityProviderName: types.maybeNull(types.optional(types.string, '')), // Name of the identity provider this user belongs to (such as Identity Provider Id in cognito user pool in case of Federation etc)\n    status: 'active',\n    rev: 0,\n  })\n  .views(self => ({\n    get displayName() {\n      return `${self.firstName} ${self.lastName}`;\n    },\n\n    get longDisplayName() {\n      if (self.unknown) {\n        return `${self.username}??`;\n      }\n      const fullName = `${self.firstName} ${self.lastName}`;\n      if (self.email) {\n        return `${fullName} (${self.email})`;\n      }\n      return fullName;\n    },\n\n    get unknown() {\n      return !self.firstName && !self.lastName;\n    },\n\n    get isRootUser() {\n      return _.toLower(self.userType) === 'root';\n    },\n\n    get isActive() {\n      return _.toLower(self.status) === 'active';\n    },\n\n    get isSystem() {\n      return self.id === '_system_';\n    },\n\n    isSame(uid) {\n      return self.uid === uid;\n    },\n\n    isSamePrincipal({ username, ns }) {\n      return self.username === username && self.ns === ns;\n    },\n\n    get id() {\n      return self.uid;\n    },\n\n    get principal() {\n      return { username: self.username, ns: self.ns };\n    },\n\n    get principalStr() {\n      return JSON.stringify(self.principal);\n    },\n  }));\n\nfunction getPrincipalObjFromPrincipalStr(principalStr) {\n  return JSON.parse(principalStr);\n}\n\nfunction getPrincipalStrFromPrincipalObj({ username, ns }) {\n  return JSON.stringify({ username, ns });\n}\nexport { User, getPrincipalObjFromPrincipalStr, getPrincipalStrFromPrincipalObj };\n"],"file":"User.js"}