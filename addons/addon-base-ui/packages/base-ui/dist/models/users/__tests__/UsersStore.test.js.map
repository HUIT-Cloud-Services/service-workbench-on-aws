{"version":3,"sources":["../../../../src/models/users/__tests__/UsersStore.test.js"],"names":["jest","mock","describe","store","appContext","uid","newUser","firstName","lastName","username","ns","email","userType","isAdmin","authenticationProviderId","identityProviderName","status","projectId","rev","updatedUser","beforeEach","usersStore","it","getUsers","mockResolvedValueOnce","addUser","load","expect","toMatchObject","list","length","toBe","updateUser"],"mappings":"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","sourcesContent":["/*\n *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\").\n *  You may not use this file except in compliance with the License.\n *  A copy of the License is located at\n *\n *  http://aws.amazon.com/apache2.0\n *\n *  or in the \"license\" file accompanying this file. This file is distributed\n *  on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n *  express or implied. See the License for the specific language governing\n *  permissions and limitations under the License.\n */\n\nimport { registerContextItems as registerUsersStore } from '../UsersStore';\nimport { addUser, getUsers, updateUser } from '../../../helpers/api';\n\njest.mock('../../../helpers/api');\n\ndescribe('UsersStore', () => {\n  let store = null;\n  const appContext = {};\n  const uid = 'u-exampleUserId';\n\n  const newUser = {\n    uid,\n    firstName: 'exampleFn',\n    lastName: 'exampleLn',\n    username: 'example',\n    ns: 'example',\n    email: 'example@example.com',\n    userType: 'Researcher',\n    isAdmin: true,\n    authenticationProviderId: 'black_mesa', // Id of the authentication provider this user is authenticated against (such as internal, cognito auth provider id etc)\n    identityProviderName: 'lambda_sector', // Name of the identity provider this user belongs to (such as Identity Provider Id in cognito user pool in case of Federation etc)\n    status: 'active',\n    projectId: ['grav-gun'],\n    rev: 0,\n  };\n\n  const updatedUser = {\n    uid,\n    firstName: 'exampleFnUpdated',\n    lastName: 'unknown',\n    username: 'example',\n    ns: 'example',\n    email: 'example@example.com',\n    userType: 'Administrator',\n    isAdmin: true,\n  };\n\n  beforeEach(async () => {\n    await registerUsersStore(appContext);\n    store = appContext.usersStore;\n  });\n\n  describe('addUser', () => {\n    it('should add a new user', async () => {\n      // BUILD\n      getUsers.mockResolvedValueOnce([]);\n      addUser.mockResolvedValueOnce(newUser);\n      await store.load();\n\n      // OPERATE\n      await store.addUser(newUser);\n\n      // CHECK\n      expect(newUser).toMatchObject(store.list[0]);\n    });\n\n    it('should not add user because it already exists', async () => {\n      // BUILD\n      getUsers.mockResolvedValueOnce([newUser]);\n      addUser.mockResolvedValueOnce(newUser);\n      await store.load();\n\n      // OPERATE\n      await store.addUser(newUser);\n\n      // CHECK\n      expect(store.list.length).toBe(1);\n    });\n  });\n\n  describe('updateUser', () => {\n    it('should update the user info', async () => {\n      // BUILD\n      getUsers.mockResolvedValueOnce([newUser]);\n      updateUser.mockResolvedValueOnce(updatedUser);\n      await store.load();\n\n      // OPERATE\n      await store.updateUser(updatedUser);\n\n      // CHECK\n      expect(store.list[0]).toMatchObject(updatedUser);\n    });\n  });\n});\n"],"file":"UsersStore.test.js"}