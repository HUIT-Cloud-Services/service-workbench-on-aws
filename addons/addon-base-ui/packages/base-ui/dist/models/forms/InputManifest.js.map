{"version":3,"sources":["../../../src/models/forms/InputManifest.js"],"names":["InputManifest","types","model","sections","optional","array","frozen","actions","_self","views","self","flattened","_","flatten","map","section","findEntries","children","names","entry","name","empty","length","getSectionFlattened","isInteractive","isUndefined","isNil","nonInteractive","isConditionTrue","condition","config","isEmpty","template","toMobxFormFieldProps","value","add","key","val","title","placeholder","rules","extra","desc","disabled","options","yesLabel","noLabel","cloneDeep","explain","toMobxFormFields","input","result","queue","slice","shift","field","push","isObject","fields","applyMarkdown","inputManifest","showdown","assets","copy","transform","obj","isArray","item","keys","Object","forEach","convert","visit","visitFn","entries"],"mappings":"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","sourcesContent":["/*\n *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\").\n *  You may not use this file except in compliance with the License.\n *  A copy of the License is located at\n *\n *  http://aws.amazon.com/apache2.0\n *\n *  or in the \"license\" file accompanying this file. This file is distributed\n *  on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n *  express or implied. See the License for the specific language governing\n *  permissions and limitations under the License.\n */\n\nimport _ from 'lodash';\nimport { types, getSnapshot } from 'mobx-state-tree';\n\n// ==================================================================\n// InputManifest\n// ==================================================================\nconst InputManifest = types\n  .model('InputManifest', {\n    sections: types.optional(types.array(types.frozen()), []),\n  })\n  .actions(_self => ({}))\n\n  .views(self => ({\n    // An array of all the input entries (excluding non-interactive ones). This is a convenient method that\n    // traverses the whole input manifest tree.\n    // [ { name, title, ... }, { name, title, ...} ]\n    get flattened() {\n      return _.flatten(_.map(self.sections, section => findEntries(section.children)));\n    },\n\n    get names() {\n      return _.map(self.flattened, entry => entry.name);\n    },\n\n    get empty() {\n      return self.flattened.length === 0;\n    },\n\n    getSectionFlattened(section = {}) {\n      return _.flatten(findEntries(section.children));\n    },\n  }));\n\n// ==================================================================\n// Helpers\n// ==================================================================\n\n// Does the entry represent an input that will interact with the user\nfunction isInteractive(entry) {\n  if (_.isUndefined(entry)) return false;\n  return _.isNil(entry.nonInteractive) || entry.nonInteractive === false;\n}\n\n// Condition is true if it is empty/undefined or if the lodash expression evaluates to the string \"true\"\nfunction isConditionTrue(condition, config) {\n  if (_.isEmpty(condition)) return true;\n  return _.template(condition)(config) === 'true';\n}\n\n// Given an inputManifestEntry returns a object that contains all the supported mobx form field props\n// For a list of all mobx form field props see https://foxhound87.github.io/mobx-react-form/docs/fields/defining-flat-fields/unified-properties.html\nfunction toMobxFormFieldProps(entry, value) {\n  if (!isInteractive(entry)) return {};\n  const map = {};\n  const add = (key, val) => {\n    if (!_.isUndefined(val)) map[key] = val;\n  };\n  const { name, title, placeholder, rules, extra = {}, desc, disabled, options, yesLabel, noLabel } = entry;\n\n  add('name', name);\n  add('value', _.isUndefined(value) ? entry.default : value);\n  add('label', title);\n  add('placeholder', placeholder);\n  add('rules', rules);\n  add('default', _.isUndefined(entry.default) ? value : entry.default);\n  add('extra', { ..._.cloneDeep(extra), explain: desc, options, yesLabel, noLabel });\n  add('disabled', disabled);\n\n  return map;\n}\n\n// Recursive function\n// input = an array of the input manifest section children or input manifest entry children\n// config = all names in inputManifest and their values (if they exist)\nfunction toMobxFormFields(input = [], config) {\n  const result = [];\n  if (input.length === 0) return result;\n  const queue = input.slice();\n\n  while (queue.length > 0) {\n    const entry = queue.shift();\n    const name = entry.name;\n    if (isInteractive(entry) && isConditionTrue(entry.condition, config)) {\n      const value = config[name];\n      const field = toMobxFormFieldProps(entry, value);\n      result.push(field);\n      const children = entry.children;\n      if (_.isObject(children)) {\n        const fields = toMobxFormFields(children, config); // recursive call\n        if (fields.length > 0) {\n          result.push(...fields);\n        }\n      }\n    }\n  }\n\n  return result;\n}\n\n// Given an instance of inputManifest, apply markdown on all 'desc' props and return\n// a new json object (NOT an instance of inputManifest)\nfunction applyMarkdown({ inputManifest, showdown, assets = {} }) {\n  const copy = _.cloneDeep(getSnapshot(inputManifest));\n\n  function transform(obj) {\n    if (_.isNil(obj)) return obj;\n    if (_.isArray(obj))\n      return _.map(obj, item => {\n        return transform(item);\n      });\n\n    if (!_.isObject(obj)) return obj;\n    const keys = Object.keys(obj);\n\n    keys.forEach(key => {\n      if (key !== 'desc') {\n        obj[key] = transform(obj[key]);\n        return;\n      }\n      const desc = obj[key];\n      if (_.isNil(desc)) return;\n      obj.desc = showdown.convert(desc, assets);\n    });\n\n    return obj;\n  }\n\n  copy.sections = transform(copy.sections);\n\n  return copy;\n}\n\n// Given an array of input entries, visit each one of them by passing the item\n// to the visitFn\nfunction visit(input = [], visitFn = obj => obj) {\n  const result = [];\n  if (input.length === 0) return result;\n  const queue = input.slice();\n\n  while (queue.length > 0) {\n    const entry = queue.shift();\n    result.push(visitFn(entry));\n    const children = entry.children;\n    if (_.isObject(children)) {\n      const entries = visit(children, visitFn); // recursive call\n      if (entries.length > 0) {\n        entries.forEach(field => {\n          result.push(visitFn(field));\n        });\n      }\n    }\n  }\n  return result;\n}\n\n// ==================================================================\n// Internal Helpers\n// ==================================================================\n\n// Find all names with their entries (such as titles). This is a recursive function.\n// Returns an array,  [ { name, title, ... }, { name, title, ...} ]\nfunction findEntries(input = []) {\n  const result = [];\n  if (input.length === 0) return result;\n  const queue = input.slice();\n\n  while (queue.length > 0) {\n    const entry = queue.shift();\n    if (isInteractive(entry)) {\n      result.push(entry);\n    }\n    const children = entry.children;\n    if (_.isObject(children)) {\n      const entries = findEntries(children); // recursive call\n      if (entries.length > 0) {\n        entries.forEach(field => {\n          result.push(field);\n        });\n      }\n    }\n  }\n  return result;\n}\n\nexport { InputManifest, isInteractive, toMobxFormFieldProps, isConditionTrue, toMobxFormFields, applyMarkdown, visit };\n"],"file":"InputManifest.js"}