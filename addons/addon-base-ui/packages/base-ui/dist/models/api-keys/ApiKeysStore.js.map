{"version":3,"sources":["../../../src/models/api-keys/ApiKeysStore.js"],"names":["ApiKeysStore","BaseStore","named","props","uid","types","identifier","apiKeys","optional","map","ApiKey","actions","self","superCleanup","cleanup","doLoad","isStoreForCurrentUser","runInAction","forEach","apiKey","apiKeyModel","create","id","replace","createNewApiKey","put","revokeApiKey","apiKeyId","user","undefined","views","empty","size","list","result","push","userStore","currentUser"],"mappings":"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","sourcesContent":["/*\n *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\").\n *  You may not use this file except in compliance with the License.\n *  A copy of the License is located at\n *\n *  http://aws.amazon.com/apache2.0\n *\n *  or in the \"license\" file accompanying this file. This file is distributed\n *  on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n *  express or implied. See the License for the specific language governing\n *  permissions and limitations under the License.\n */\n\nimport { getEnv, types } from 'mobx-state-tree';\n\nimport { getApiKeys, createNewApiKey, revokeApiKey } from '../../helpers/api';\nimport { BaseStore } from '../BaseStore';\nimport ApiKey from './ApiKey';\n\nconst ApiKeysStore = BaseStore.named('ApiKeysStore')\n  .props({\n    uid: types.identifier,\n    apiKeys: types.optional(types.map(ApiKey), {}),\n  })\n  .actions(self => {\n    // save the base implementation of cleanup\n    const superCleanup = self.cleanup;\n    return {\n      async doLoad() {\n        // do not pass uid param when loading api keys for current user\n        const apiKeys = await getApiKeys(!self.isStoreForCurrentUser() && { uid: self.uid });\n        self.runInAction(() => {\n          const map = {};\n          apiKeys.forEach(apiKey => {\n            const apiKeyModel = ApiKey.create(apiKey);\n            map[apiKeyModel.id] = apiKeyModel;\n          });\n          self.apiKeys.replace(map);\n        });\n      },\n      async createNewApiKey() {\n        const apiKey = await createNewApiKey(!self.isStoreForCurrentUser() && { uid: self.uid });\n        self.runInAction(() => {\n          // The put call below will automatically use the id from ApiKey\n          // (as it is marked \"types.identifier\") and add that as a key in the map and\n          // store the object as value against it\n          self.apiKeys.put(ApiKey.create(apiKey));\n        });\n      },\n      async revokeApiKey(apiKeyId) {\n        const apiKey = await revokeApiKey(apiKeyId, !self.isStoreForCurrentUser() && { uid: self.uid });\n        self.runInAction(() => {\n          self.apiKeys.put(ApiKey.create(apiKey));\n        });\n      },\n      cleanup: () => {\n        self.user = undefined;\n        superCleanup();\n      },\n    };\n  })\n  .views(self => ({\n    get empty() {\n      return self.apiKeys.size === 0;\n    },\n    get list() {\n      const result = [];\n      // converting map self.apiKeys to result array\n      self.apiKeys.forEach(apiKey => result.push(apiKey));\n      return result;\n    },\n    isStoreForCurrentUser: () => {\n      const userStore = getEnv(self).userStore;\n      const currentUser = userStore.user;\n      return currentUser.uid === self.uid;\n    },\n  }));\n\n// Note: Do NOT register this in the global context, if you want to gain access to an instance\n//       use UserStore.apiKeysStore or UsersStore.getApiKeysStore(uid)\nexport default ApiKeysStore;\n"],"file":"ApiKeysStore.js"}