{"version":3,"sources":["../../../src/models/api-keys/UserApiKeysStore.js"],"names":["UserApiKeysStore","BaseStore","named","props","userApiKeysStores","types","optional","map","ApiKeysStore","actions","self","superCleanup","cleanup","doLoad","userStore","load","currentUser","user","currentUserApiKeyStore","create","uid","runInAction","put","getApiKeysStore","entry","get","getCurrentUserApiKeysStore","id","undefined","views","empty","size","registerContextItems","appContext","userApiKeysStore"],"mappings":";;;;;;;;AAeA;;AAEA;;AACA;;;;;;;;AAEA,IAAMA,gBAAgB,GAAGC,qBAAUC,KAAV,CAAgB,kBAAhB,EACtBC,KADsB,CAChB;AACL;AACAC,EAAAA,iBAAiB,EAAEC,qBAAMC,QAAN,CAAeD,qBAAME,GAAN,CAAUC,wBAAV,CAAf,EAAwC,EAAxC;AAFd,CADgB,EAKtBC,OALsB,CAKd,UAAAC,IAAI,EAAI;AACf;AACA,MAAMC,YAAY,GAAGD,IAAI,CAACE,OAA1B;AACA,SAAO;AACCC,IAAAA,MADD,oBACU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACPC,gBAAAA,SADO,GACK,2BAAOJ,IAAP,EAAaI,SADlB;;AAAA,oBAER,6BAAaA,SAAb,CAFQ;AAAA;AAAA;AAAA;;AAAA;AAAA,uBAILA,SAAS,CAACC,IAAV,EAJK;;AAAA;AAOPC,gBAAAA,WAPO,GAOOF,SAAS,CAACG,IAPjB;AAQPC,gBAAAA,sBARO,GAQkBV,yBAAaW,MAAb,CAAoB;AAAEC,kBAAAA,GAAG,EAAEJ,WAAW,CAACI;AAAnB,iBAApB,CARlB;;AAAA,oBASR,6BAAaF,sBAAb,CATQ;AAAA;AAAA;AAAA;;AAAA;AAAA,uBAWLA,sBAAsB,CAACH,IAAvB,EAXK;;AAAA;AAcbL,gBAAAA,IAAI,CAACW,WAAL,CAAiB,YAAM;AACrB;AACA;AACA;AACAX,kBAAAA,IAAI,CAACN,iBAAL,CAAuBkB,GAAvB,CAA2BJ,sBAA3B;AACD,iBALD;;AAda;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAoBd,KArBI;AAsBLK,IAAAA,eAAe,EAAE,yBAAAH,GAAG,EAAI;AACtB,UAAII,KAAK,GAAGd,IAAI,CAACN,iBAAL,CAAuBqB,GAAvB,CAA2BL,GAA3B,CAAZ;;AACA,UAAI,CAACI,KAAL,EAAY;AACVd,QAAAA,IAAI,CAACN,iBAAL,CAAuBkB,GAAvB,CAA2Bd,yBAAaW,MAAb,CAAoB;AAAEC,UAAAA,GAAG,EAAHA;AAAF,SAApB,CAA3B;AACAI,QAAAA,KAAK,GAAGd,IAAI,CAACN,iBAAL,CAAuBqB,GAAvB,CAA2BL,GAA3B,CAAR;AACD;;AACD,aAAOI,KAAP;AACD,KA7BI;AA8BLE,IAAAA,0BAA0B,EAAE,sCAAM;AAChC,UAAMZ,SAAS,GAAG,2BAAOJ,IAAP,EAAaI,SAA/B;AACA,UAAME,WAAW,GAAGF,SAAS,CAACG,IAA9B;AACA,aAAOP,IAAI,CAACa,eAAL,CAAqBP,WAAW,CAACW,EAAjC,CAAP;AACD,KAlCI;AAmCLf,IAAAA,OAAO,EAAE,mBAAM;AACbF,MAAAA,IAAI,CAACO,IAAL,GAAYW,SAAZ;AACAjB,MAAAA,YAAY;AACb;AAtCI,GAAP;AAwCD,CAhDsB,EAiDtBkB,KAjDsB,CAiDhB,UAAAnB,IAAI;AAAA,SAAK;AACd,QAAIoB,KAAJ,GAAY;AACV,aAAOpB,IAAI,CAACN,iBAAL,CAAuB2B,IAAvB,KAAgC,CAAvC;AACD;;AAHa,GAAL;AAAA,CAjDY,CAAzB;;;;AAuDA,SAASC,oBAAT,CAA8BC,UAA9B,EAA0C;AACxCA,EAAAA,UAAU,CAACC,gBAAX,GAA8BlC,gBAAgB,CAACmB,MAAjB,CAAwB,EAAxB,EAA4Bc,UAA5B,CAA9B;AACD","sourcesContent":["/*\n *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\").\n *  You may not use this file except in compliance with the License.\n *  A copy of the License is located at\n *\n *  http://aws.amazon.com/apache2.0\n *\n *  or in the \"license\" file accompanying this file. This file is distributed\n *  on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n *  express or implied. See the License for the specific language governing\n *  permissions and limitations under the License.\n */\n\nimport { getEnv, types } from 'mobx-state-tree';\n\nimport { BaseStore, isStoreReady } from '../BaseStore';\nimport ApiKeysStore from './ApiKeysStore';\n\nconst UserApiKeysStore = BaseStore.named('UserApiKeysStore')\n  .props({\n    // key = uid and value = ApiKeysStore for that user\n    userApiKeysStores: types.optional(types.map(ApiKeysStore), {}),\n  })\n  .actions(self => {\n    // save the base implementation of cleanup\n    const superCleanup = self.cleanup;\n    return {\n      async doLoad() {\n        const userStore = getEnv(self).userStore;\n        if (!isStoreReady(userStore)) {\n          // Load current user information, if not loaded already\n          await userStore.load();\n        }\n\n        const currentUser = userStore.user;\n        const currentUserApiKeyStore = ApiKeysStore.create({ uid: currentUser.uid });\n        if (!isStoreReady(currentUserApiKeyStore)) {\n          // Load API keys for the current user\n          await currentUserApiKeyStore.load();\n        }\n\n        self.runInAction(() => {\n          // The put call below will automatically use the id from currentUserApiKeyStore\n          // (as it is marked \"types.identifier\") and add that as a key in the map and\n          // store the object as value against it\n          self.userApiKeysStores.put(currentUserApiKeyStore);\n        });\n      },\n      getApiKeysStore: uid => {\n        let entry = self.userApiKeysStores.get(uid);\n        if (!entry) {\n          self.userApiKeysStores.put(ApiKeysStore.create({ uid }));\n          entry = self.userApiKeysStores.get(uid);\n        }\n        return entry;\n      },\n      getCurrentUserApiKeysStore: () => {\n        const userStore = getEnv(self).userStore;\n        const currentUser = userStore.user;\n        return self.getApiKeysStore(currentUser.id);\n      },\n      cleanup: () => {\n        self.user = undefined;\n        superCleanup();\n      },\n    };\n  })\n  .views(self => ({\n    get empty() {\n      return self.userApiKeysStores.size === 0;\n    },\n  }));\n\nfunction registerContextItems(appContext) {\n  appContext.userApiKeysStore = UserApiKeysStore.create({}, appContext);\n}\n\nexport { UserApiKeysStore, registerContextItems };\n"],"file":"UserApiKeysStore.js"}