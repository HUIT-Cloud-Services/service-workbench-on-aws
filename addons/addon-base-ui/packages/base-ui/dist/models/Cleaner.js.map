{"version":3,"sources":["../../src/models/Cleaner.js"],"names":["Cleaner","appContext","disposers","intervalIds","keys","_","forEach","key","fn","isFunction","id","isNil","clearInterval","obj","cleanup","registerContextItems","cleaner"],"mappings":";;;;;;;;AAeA;;AACA;;AAEA;;;;;;;;;;AAEA;AACA;IACMA,O;AACJ,mBAAYC,UAAZ,EAAwB;AAAA;;AACtB,SAAKA,UAAL,GAAkBA,UAAlB;AACD;;;;8BAES;AAAA;;AAAA,6BAC2B,KAAKA,UADhC;AAAA,UACAC,SADA,oBACAA,SADA;AAAA,UACWC,WADX,oBACWA,WADX,EAGR;AACA;;AACA,UAAIC,IAAI,GAAGC,mBAAED,IAAF,CAAOF,SAAP,CAAX;;AACAG,yBAAEC,OAAF,CAAUF,IAAV,EAAgB,UAAAG,GAAG,EAAI;AACrB,YAAMC,EAAE,GAAGN,SAAS,CAACK,GAAD,CAApB;;AACA,YAAIF,mBAAEI,UAAF,CAAaD,EAAb,CAAJ,EAAsB;AACpBA,UAAAA,EAAE;AACH;;AACD,eAAON,SAAS,CAACK,GAAD,CAAhB;AACD,OAND;;AAQAH,MAAAA,IAAI,GAAGC,mBAAED,IAAF,CAAOD,WAAP,CAAP;;AACAE,yBAAEC,OAAF,CAAUF,IAAV,EAAgB,UAAAG,GAAG,EAAI;AACrB,YAAMG,EAAE,GAAGP,WAAW,CAACI,GAAD,CAAtB;;AACA,YAAI,CAACF,mBAAEM,KAAF,CAAQD,EAAR,CAAL,EAAkB;AAChBE,UAAAA,aAAa,CAACF,EAAD,CAAb;AACD;;AACD,eAAOP,WAAW,CAACI,GAAD,CAAlB;AACD,OAND;;AAQA,6BAAY,YAAM;AAChB;;AAEAF,2BAAEC,OAAF,CAAU,KAAI,CAACL,UAAf,EAA2B,UAAAY,GAAG,EAAI;AAChC,cAAIA,GAAG,KAAK,KAAZ,EAAkB,OADc,CACN;;AAC1B,cAAIR,mBAAEI,UAAF,CAAaI,GAAG,CAACC,OAAjB,CAAJ,EAA+B;AAC7BD,YAAAA,GAAG,CAACC,OAAJ;AACD;AACF,SALD;AAMD,OATD;AAUD;;;;;;;;AAGH,SAASC,oBAAT,CAA8Bd,UAA9B,EAA0C;AACxCA,EAAAA,UAAU,CAACe,OAAX,GAAqB,IAAIhB,OAAJ,CAAYC,UAAZ,CAArB;AACD","sourcesContent":["/*\n *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\").\n *  You may not use this file except in compliance with the License.\n *  A copy of the License is located at\n *\n *  http://aws.amazon.com/apache2.0\n *\n *  or in the \"license\" file accompanying this file. This file is distributed\n *  on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n *  express or implied. See the License for the specific language governing\n *  permissions and limitations under the License.\n */\n\nimport _ from 'lodash';\nimport { runInAction } from 'mobx';\n\nimport { forgetIdToken } from '../helpers/api';\n\n// An object that captures all the clean up logic when the app is done or no jwt token\n// is found.\nclass Cleaner {\n  constructor(appContext) {\n    this.appContext = appContext;\n  }\n\n  cleanup() {\n    const { disposers, intervalIds } = this.appContext;\n\n    // it is important that we start with cleaning the disposers, otherwise snapshots events will be fired\n    // for cleaned stores\n    let keys = _.keys(disposers);\n    _.forEach(keys, key => {\n      const fn = disposers[key];\n      if (_.isFunction(fn)) {\n        fn();\n      }\n      delete disposers[key];\n    });\n\n    keys = _.keys(intervalIds);\n    _.forEach(keys, key => {\n      const id = intervalIds[key];\n      if (!_.isNil(id)) {\n        clearInterval(id);\n      }\n      delete intervalIds[key];\n    });\n\n    runInAction(() => {\n      forgetIdToken();\n\n      _.forEach(this.appContext, obj => {\n        if (obj === this) return; // we don't want to end up in an infinite loop\n        if (_.isFunction(obj.cleanup)) {\n          obj.cleanup();\n        }\n      });\n    });\n  }\n}\n\nfunction registerContextItems(appContext) {\n  appContext.cleaner = new Cleaner(appContext);\n}\n\nexport { Cleaner, registerContextItems };\n"],"file":"Cleaner.js"}