{"version":3,"sources":["../../../src/models/configuration/ConfigurationEditor.js"],"names":["ConfigurationEditor","types","model","currentSectionIndex","review","inputManifest","maybe","InputManifest","configuration","optional","map","union","undefined","integer","number","string","mode","enumeration","_self","originalConfig","originalSectionConfig","actions","runInAction","fn","self","superCleanup","cleanup","normalizeForm","obj","_","transform","result","value","key","isObject","JSON","stringify","getSectionConfig","inputManifestSection","config","section","flattened","getSectionFlattened","forEach","item","name","has","cloneDeep","get","resetOriginalSectionConfig","configKeysAfter","index","sections","slice","Math","max","keys","configKeys","isEmpty","push","afterCreate","next","form","merge","values","changed","isEqual","keysAfter","nextSectionIndex","before","after","isEditMode","previous","_form","previousSectionIndex","clearConfigs","clear","clearSectionConfigs","empty","applyChanges","cancel","restart","views","totalSections","length","definedConfigList","inputEntries","configMap","list","entry","isUndefined","merged","entries","formFields","input","children","hasNext","hasPrevious","found","condition","sectionsTitles","title"],"mappings":"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","sourcesContent":["/*\n *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\").\n *  You may not use this file except in compliance with the License.\n *  A copy of the License is located at\n *\n *  http://aws.amazon.com/apache2.0\n *\n *  or in the \"license\" file accompanying this file. This file is distributed\n *  on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n *  express or implied. See the License for the specific language governing\n *  permissions and limitations under the License.\n */\n\nimport _ from 'lodash';\nimport { types, getSnapshot, applySnapshot } from 'mobx-state-tree';\n\nimport { createForm } from '../../helpers/form';\nimport { InputManifest, toMobxFormFields, isConditionTrue } from '../forms/InputManifest';\n\n// ==================================================================\n// ConfigurationEditor\n// ==================================================================\nconst ConfigurationEditor = types\n  .model('ConfigurationEditor', {\n    currentSectionIndex: 0, // IMPORTANT section index start from 0 not 1\n    review: false,\n    inputManifest: types.maybe(InputManifest),\n    configuration: types.optional(\n      types.map(types.union(types.null, types.undefined, types.integer, types.number, types.boolean, types.string)),\n      {},\n    ),\n    mode: types.optional(types.enumeration('Mode', ['create', 'edit']), 'create'), // mode - either \"create\" or \"edit\"\n  })\n\n  .volatile(_self => ({\n    originalConfig: undefined,\n    originalSectionConfig: undefined, // the key/value object for the original section config after next()\n  }))\n\n  .actions(() => ({\n    // I had issues using runInAction from mobx\n    // the issue is discussed here https://github.com/mobxjs/mobx-state-tree/issues/915\n    runInAction(fn) {\n      return fn();\n    },\n  }))\n\n  .actions(self => {\n    // save the base implementation of cleanup\n    const superCleanup = self.cleanup;\n\n    // If the value of a form field is an object, then make the value a json string instead\n    const normalizeForm = obj => {\n      return _.transform(\n        obj,\n        (result, value, key) => {\n          result[key] = _.isObject(value) ? JSON.stringify(value) : value;\n        },\n        {},\n      );\n    };\n\n    // Returns a key/value object for configuration keys that are part of the given input manifest section\n    const getSectionConfig = inputManifestSection => {\n      const config = {};\n      const section = inputManifestSection;\n      if (section === undefined) return config;\n      const flattened = self.inputManifest.getSectionFlattened(section) || [];\n      flattened.forEach(item => {\n        const key = item.name;\n        if (self.configuration.has(key)) config[key] = _.cloneDeep(self.configuration.get(key));\n      });\n\n      return config;\n    };\n\n    const resetOriginalSectionConfig = () => {\n      self.originalSectionConfig = getSectionConfig(self.inputManifestSection);\n    };\n\n    // Returns all config keys (if any) that belong to input manifest sections after the given index\n    const configKeysAfter = index => {\n      const sections = _.slice(_.get(self.inputManifest, 'sections', []), Math.max(index + 1, 0));\n      const keys = [];\n      _.forEach(sections, section => {\n        const config = getSectionConfig(section);\n        const configKeys = _.keys(config) || [];\n        if (!_.isEmpty(configKeys)) keys.push(...configKeys);\n      });\n\n      return keys;\n    };\n\n    return {\n      afterCreate() {\n        // We keep the original values of the configuration object so that when we do cancel, we simply restore the original copy\n        self.originalConfig = getSnapshot(self.configuration);\n        resetOriginalSectionConfig();\n      },\n\n      cleanup() {\n        superCleanup();\n      },\n\n      next(form) {\n        const configuration = self.configuration;\n        configuration.merge(normalizeForm(form.values()));\n\n        const changed = !_.isEqual(self.originalSectionConfig, getSectionConfig(self.inputManifestSection));\n        const keysAfter = configKeysAfter(self.currentSectionIndex);\n        const nextSectionIndex = self.nextSectionIndex;\n        const before = self.currentSectionIndex;\n\n        if (nextSectionIndex !== -1) self.currentSectionIndex = nextSectionIndex;\n        const after = self.currentSectionIndex;\n\n        resetOriginalSectionConfig();\n\n        // If the configuration keys changed, then it is time to clear all configuration keys (if any) after the current section\n        // In case of edit mode, do not clear any section (we need to pre-populate all sections with existing values)\n        if (!self.isEditMode && changed) {\n          _.forEach(keysAfter, key => {\n            self.configuration.delete(key);\n          });\n        }\n\n        // If the section index didn't move forward, it means that we don't have any more sections\n        // for input and it is time to show the review content\n        self.review = before === after;\n      },\n\n      previous(_form) {\n        if (self.review) {\n          self.review = false;\n          return;\n        }\n        // const configuration = self.configuration;\n        // configuration.merge(normalizeForm(form.values()));\n        const previousSectionIndex = self.previousSectionIndex;\n        if (previousSectionIndex !== -1) self.currentSectionIndex = previousSectionIndex;\n        resetOriginalSectionConfig();\n      },\n\n      clearConfigs() {\n        self.configuration.clear();\n      },\n\n      clearSectionConfigs() {\n        // We only clear configuration keys that belong to the current section\n        if (self.empty) {\n          self.configuration.clear();\n          return;\n        }\n\n        const section = self.inputManifestSection;\n        if (section === undefined) return;\n        const flattened = self.inputManifest.getSectionFlattened(section) || [];\n        flattened.forEach(item => {\n          self.configuration.delete(item.name);\n        });\n      },\n\n      applyChanges() {\n        self.originalConfig = getSnapshot(self.configuration);\n      },\n\n      cancel() {\n        self.review = false;\n        self.currentSectionIndex = 0;\n        if (self.originalConfig) {\n          applySnapshot(self.configuration, self.originalConfig);\n        }\n\n        resetOriginalSectionConfig();\n      },\n\n      restart() {\n        self.cancel();\n      },\n    };\n  })\n\n  .views(self => ({\n    get isEditMode() {\n      return self.mode === 'edit';\n    },\n\n    get inputManifestSection() {\n      if (self.inputManifest === undefined) return undefined;\n      const sections = self.inputManifest.sections;\n      const index = self.currentSectionIndex;\n      if (index > self.totalSections) return undefined;\n      if (index >= sections.length) return undefined;\n      return sections[index];\n    },\n\n    // A list of objects, where each object represents a configuration name/entry that is not undefined\n    // [ {name: 'xyz', title: '...', value: 'true', etc}, {name: 'abc', title: '...', value: 'something', etc}, ... ]\n    get definedConfigList() {\n      if (self.inputManifest === undefined) return [];\n      const inputEntries = self.inputManifest.flattened;\n      const configMap = self.configuration;\n      const list = [];\n      _.forEach(inputEntries, entry => {\n        let value = configMap.get(entry.name);\n        if (_.isUndefined(value)) value = entry.value;\n        if (!_.isUndefined(value)) list.push({ ...entry, value });\n      });\n\n      return list;\n    },\n\n    // A map of all names in inputManifest with their values from the configuration object if they exist\n    // or from the inputManifest if they exist, otherwise undefined is given as the value for the key\n    // An example of returned object shape: { 'configName': 'demo', 'doYouWantThis': undefined }\n    get merged() {\n      const inputEntries = self.inputManifest.flattened;\n      const map = {};\n      _.forEach(inputEntries, entry => {\n        map[entry.name] = entry.value;\n      });\n\n      /* eslint-disable no-restricted-syntax */\n      for (const [key, value] of self.configuration.entries()) {\n        map[key] = value;\n      }\n      /* eslint-enable no-restricted-syntax */\n\n      return map;\n    },\n\n    get formFields() {\n      const index = self.currentSectionIndex;\n      if (self.totalSections < index) return [];\n      const input = self.inputManifestSection;\n      if (_.isUndefined(input)) return [];\n\n      return toMobxFormFields(input.children, self.merged);\n    },\n\n    get form() {\n      return createForm(self.formFields);\n    },\n\n    get totalSections() {\n      if (self.inputManifest === undefined) return 0;\n      return self.inputManifest.sections.length;\n    },\n\n    get hasNext() {\n      return self.nextSectionIndex !== -1 && !self.review;\n    },\n\n    get hasPrevious() {\n      return self.previousSectionIndex !== -1 || self.review;\n    },\n\n    // Returns the next section index\n    // if the current section is the last section, return -1\n    // walk through the remaining sections and return the index of the first one\n    // that has condition === true, otherwise return -1\n    get nextSectionIndex() {\n      if (self.totalSections < self.currentSectionIndex) return -1;\n      if (self.inputManifest === undefined) return -1;\n      const sections = self.inputManifest.sections;\n      const merged = self.merged;\n      let found = false;\n      let index = self.currentSectionIndex + 1;\n\n      while (!found && index < self.totalSections) {\n        const entry = sections[index];\n        found = isConditionTrue(entry.condition, merged);\n        if (!found) index += 1;\n      }\n\n      return found ? index : -1;\n    },\n\n    // Returns the previous section index\n    // if the current section is 0, return -1\n    // walk through the previous sections and return the index of the first one\n    // that has condition === true, otherwise return -1\n    get previousSectionIndex() {\n      if (self.currentSectionIndex === 0) return -1;\n      const sections = self.inputManifest.sections;\n      const merged = self.merged;\n      let found = false;\n      let index = self.currentSectionIndex - 1;\n\n      while (!found && index >= 0) {\n        const entry = sections[index];\n        found = isConditionTrue(entry.condition, merged);\n        if (!found) index -= 1;\n      }\n\n      return found ? index : -1;\n    },\n\n    get sectionsTitles() {\n      const sections = self.inputManifest.sections;\n      return _.map(sections, index => index.title);\n    },\n\n    get empty() {\n      if (self.inputManifest === undefined) return true;\n      return self.inputManifest.empty;\n    },\n  }));\n\n// Note: Do NOT register ConfigurationEditor in the global context\n\nexport default ConfigurationEditor;\n"],"file":"ConfigurationEditor.js"}