{"version":3,"sources":["../../../src/models/authentication/AuthenticationProviderPublicConfigsStore.js"],"names":["AuthenticationProviderPublicConfigsStore","BaseStore","named","props","authenticationProviderPublicConfigs","types","optional","array","AuthenticationProviderPublicConfig","actions","self","doLoad","configs","runInAction","authentication","selected","_","get","setSelectedAuthenticationProviderId","views","authenticationProviderOptions","size","entry","key","id","text","title","value","result","forEach","config","type","enableNativeUserPoolUsers","push","toAuthenticationProviderFromId","authenticationProviderId","find","registerContextItems","appContext","authenticationProviderPublicConfigsStore","create"],"mappings":";;;;;;;;AAeA;;AACA;;AACA;;AACA;;AACA;;;;;;;;AAEA,IAAMA,wCAAwC,GAAGC,qBAAUC,KAAV,CAAgB,0CAAhB,EAC9CC,KAD8C,CACxC;AACLC,EAAAA,mCAAmC,EAAEC,qBAAMC,QAAN,CAAeD,qBAAME,KAAN,CAAYC,8CAAZ,CAAf,EAAgE,EAAhE;AADhC,CADwC,EAI9CC,OAJ8C,CAItC,UAAAC,IAAI;AAAA,SAAK;AACVC,IAAAA,MADU,oBACD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACS,kDADT;;AAAA;AACPC,gBAAAA,OADO;AAGbF,gBAAAA,IAAI,CAACG,WAAL,CAAiB,YAAM;AACrBH,kBAAAA,IAAI,CAACN,mCAAL,GAA2CQ,OAA3C;AACA,sBAAME,cAAc,GAAG,2BAAOJ,IAAP,EAAaI,cAApC;;AACA,sBAAMC,QAAQ,GAAGC,mBAAEC,GAAF,CAAML,OAAN,EAAe,QAAf,EAAyB,EAAzB,CAAjB;;AACAE,kBAAAA,cAAc,CAACI,mCAAf,CAAmDH,QAAnD;AACD,iBALD;;AAHa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASd;AAVe,GAAL;AAAA,CAJkC,EAgB9CI,KAhB8C,CAgBxC,UAAAT,IAAI;AAAA,SAAK;AACd,QAAIU,6BAAJ,GAAoC;AAClC,UAAMC,IAAI,GAAGL,mBAAEK,IAAF,CAAOX,IAAI,CAACN,mCAAZ,CAAb,CADkC,CAGlC;;;AACA,UAAIiB,IAAI,KAAK,CAAb,EAAgB;AACd,YAAMC,KAAK,GAAGZ,IAAI,CAACN,mCAAL,CAAyC,CAAzC,CAAd;AACA,eAAO,CACL;AACEmB,UAAAA,GAAG,EAAED,KAAK,CAACE,EADb;AAEEC,UAAAA,IAAI,EAAEH,KAAK,CAACI,KAFd;AAGEC,UAAAA,KAAK,EAAEL,KAAK,CAACE;AAHf,SADK,CAAP;AAOD,OAbiC,CAelC;AACA;;;AACA,UAAMI,MAAM,GAAG,EAAf;;AACAZ,yBAAEa,OAAF,CAAUnB,IAAI,CAACN,mCAAf,EAAoD,UAAA0B,MAAM,EAAI;AAC5D,YAAIA,MAAM,CAACC,IAAP,KAAgB,mBAAhB,IAAuC,CAACD,MAAM,CAACE,yBAAnD,EAA8E;AAC9EJ,QAAAA,MAAM,CAACK,IAAP,CAAY;AACVV,UAAAA,GAAG,EAAEO,MAAM,CAACN,EADF;AAEVC,UAAAA,IAAI,EAAEK,MAAM,CAACJ,KAFH;AAGVC,UAAAA,KAAK,EAAEG,MAAM,CAACN;AAHJ,SAAZ;AAKD,OAPD;;AASA,aAAOI,MAAP;AACD,KA7Ba;;AA+BdM,IAAAA,8BA/Bc,0CA+BiBC,wBA/BjB,EA+B2C;AACvD,aAAOnB,mBAAEoB,IAAF,CAAO1B,IAAI,CAACN,mCAAZ,EAAiD;AAAEoB,QAAAA,EAAE,EAAEW;AAAN,OAAjD,CAAP;AACD;AAjCa,GAAL;AAAA,CAhBoC,CAAjD;;;;AAoDA,SAASE,oBAAT,CAA8BC,UAA9B,EAA0C;AACxCA,EAAAA,UAAU,CAACC,wCAAX,GAAsDvC,wCAAwC,CAACwC,MAAzC,CAAgD,EAAhD,EAAoDF,UAApD,CAAtD;AACD","sourcesContent":["/*\n *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\").\n *  You may not use this file except in compliance with the License.\n *  A copy of the License is located at\n *\n *  http://aws.amazon.com/apache2.0\n *\n *  or in the \"license\" file accompanying this file. This file is distributed\n *  on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n *  express or implied. See the License for the specific language governing\n *  permissions and limitations under the License.\n */\n\nimport { getEnv, types } from 'mobx-state-tree';\nimport _ from 'lodash';\nimport { BaseStore } from '../BaseStore';\nimport { getAuthenticationProviderPublicConfigs } from '../../helpers/api';\nimport AuthenticationProviderPublicConfig from './AuthenticationProviderPublicConfig';\n\nconst AuthenticationProviderPublicConfigsStore = BaseStore.named('AuthenticationProviderPublicConfigsStore')\n  .props({\n    authenticationProviderPublicConfigs: types.optional(types.array(AuthenticationProviderPublicConfig), []),\n  })\n  .actions(self => ({\n    async doLoad() {\n      const configs = await getAuthenticationProviderPublicConfigs();\n\n      self.runInAction(() => {\n        self.authenticationProviderPublicConfigs = configs;\n        const authentication = getEnv(self).authentication;\n        const selected = _.get(configs, '[0].id', '');\n        authentication.setSelectedAuthenticationProviderId(selected);\n      });\n    },\n  }))\n  .views(self => ({\n    get authenticationProviderOptions() {\n      const size = _.size(self.authenticationProviderPublicConfigs);\n\n      // We don't do any filtering if we only have one configuration\n      if (size === 1) {\n        const entry = self.authenticationProviderPublicConfigs[0];\n        return [\n          {\n            key: entry.id,\n            text: entry.title,\n            value: entry.id,\n          },\n        ];\n      }\n\n      // We need to loop through all the configurations and remove any entry\n      // that is of type cognito_user_pool but only if enableNativeUserPoolUsers = false\n      const result = [];\n      _.forEach(self.authenticationProviderPublicConfigs, config => {\n        if (config.type === 'cognito_user_pool' && !config.enableNativeUserPoolUsers) return;\n        result.push({\n          key: config.id,\n          text: config.title,\n          value: config.id,\n        });\n      });\n\n      return result;\n    },\n\n    toAuthenticationProviderFromId(authenticationProviderId) {\n      return _.find(self.authenticationProviderPublicConfigs, { id: authenticationProviderId });\n    },\n  }));\n\nfunction registerContextItems(appContext) {\n  appContext.authenticationProviderPublicConfigsStore = AuthenticationProviderPublicConfigsStore.create({}, appContext);\n}\n\nexport { AuthenticationProviderPublicConfigsStore, registerContextItems };\n"],"file":"AuthenticationProviderPublicConfigsStore.js"}