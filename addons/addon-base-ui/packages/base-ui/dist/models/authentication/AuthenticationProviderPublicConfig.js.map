{"version":3,"sources":["../../../src/models/authentication/AuthenticationProviderPublicConfig.js"],"names":["toAbsoluteUrl","uri","config","apiPath","AUTHN_EXTENSION_POINT","adjustRedirectUri","redirectType","redirectParamName","preservePath","initialRedirectUri","adjustedUri","websiteUrl","window","location","origin","AuthenticationProviderPublicConfig","types","model","id","title","identifier","type","credentialHandlingType","signInUri","signOutUri","enableNativeUserPoolUsers","maybeNull","actions","self","cleanup","login","username","password","pluginRegistry","handleException","err","code","_","get","isBoom","boom","badRequest","message","apiError","runPlugins","authenticationProviderId","absoluteSignInUrl","loginResult","explicitLogin","undefined","logout","autoLogout","absoluteSignOutUrl","cleaner","history","pushState","explicitLogout","views"],"mappings":"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","sourcesContent":["/*\n *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\").\n *  You may not use this file except in compliance with the License.\n *  A copy of the License is located at\n *\n *  http://aws.amazon.com/apache2.0\n *\n *  or in the \"license\" file accompanying this file. This file is distributed\n *  on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n *  express or implied. See the License for the specific language governing\n *  permissions and limitations under the License.\n */\n\nimport _ from 'lodash';\nimport { getEnv, types } from 'mobx-state-tree';\nimport { authenticate, config } from '../../helpers/api';\nimport { isAbsoluteUrl, getQueryParam, removeQueryParams, addQueryParams } from '../../helpers/utils';\nimport { boom } from '../../helpers/errors';\nimport { websiteUrl } from '../../helpers/settings';\n\nfunction toAbsoluteUrl(uri) {\n  return isAbsoluteUrl(uri) ? uri : `${config.apiPath}/${uri}`;\n}\nconst AUTHN_EXTENSION_POINT = 'authentication';\n\n// TODO: Remove this temp adjustment method. See comments in \"absoluteSignInUrl\" getter below for more details.\nfunction adjustRedirectUri(uri, redirectType = 'login') {\n  // Adjust the name of the query param to update and determine whether to preserve the path\n  // based on whether the user is logging in or out\n  let redirectParamName = 'redirect_uri';\n  let preservePath = true;\n  if (redirectType === 'logout') {\n    redirectParamName = 'logout_uri';\n    preservePath = false;\n  }\n\n  // if the current uri contains redirect param and if it is not the same as websiteUrl then adjust it\n  // This is required during local development. For other envs, redirectUri and websiteUrl will be same.\n  const initialRedirectUri = getQueryParam(uri, [redirectParamName]);\n\n  let adjustedUri = uri;\n  if (initialRedirectUri !== websiteUrl) {\n    adjustedUri = removeQueryParams(uri, [redirectParamName]);\n    adjustedUri = addQueryParams(adjustedUri, {\n      [redirectParamName]: preservePath ? window.location : window.location.origin,\n    });\n  }\n\n  return adjustedUri;\n}\n\nconst AuthenticationProviderPublicConfig = types\n  .model('AuthenticationProviderPublicConfig', {\n    id: '',\n    title: types.identifier,\n    type: '',\n    credentialHandlingType: '',\n    signInUri: '',\n    signOutUri: '',\n    enableNativeUserPoolUsers: types.maybeNull(types.boolean),\n  })\n  .actions(self => ({\n    cleanup() {\n      // No-op for now\n    },\n\n    login: async ({ username, password } = {}) => {\n      const pluginRegistry = getEnv(self).pluginRegistry;\n\n      const handleException = err => {\n        const code = _.get(err, 'code');\n        const isBoom = _.get(err, 'isBoom');\n        if (code === 'badRequest') throw boom.badRequest(err, err.message);\n        if (isBoom) throw err;\n        throw boom.apiError(err, 'Something went wrong while trying to contact the server.');\n      };\n\n      try {\n        // Notify each authentication plugins of explicit login attempt\n        await pluginRegistry.runPlugins(AUTHN_EXTENSION_POINT, 'loginInitiated');\n\n        if (self.credentialHandlingType === 'submit') {\n          // if the selectedAuthenticationProvider requires credentials to be submitted\n          // then submit the username/password to the specified URL\n          const authenticationProviderId = self.id;\n\n          const loginResult = await authenticate(self.absoluteSignInUrl, username, password, authenticationProviderId);\n\n          // If code reached here means the login was successful.\n          // (The above line would throw exception in case of failed login - in case of incorrect credentials or any other error)\n          // Notify each authentication plugins after explicit login.\n          await pluginRegistry.runPlugins(AUTHN_EXTENSION_POINT, 'loginDetected', { explicitLogin: true });\n\n          return loginResult;\n        }\n        if (self.credentialHandlingType === 'redirect') {\n          // if the selectedAuthenticationProvider requires us to redirect to identity provider\n          // instead of collecting credentials from user (for example, in case of SAML)\n          // just redirect to the specified url.\n          // The authentication plugins will be notified of 'loginDetected' in this case after the login process is\n          // complete by the \"initialization-plugin\"\n          window.location = self.absoluteSignInUrl;\n        }\n      } catch (err) {\n        handleException(err);\n      }\n      return undefined;\n    },\n\n    logout: async ({ autoLogout = false } = {}) => {\n      const pluginRegistry = getEnv(self).pluginRegistry;\n      // Notify each authentication plugins of explicit logout attempt.\n      // Explicit logout may be explicitly initiated\n      // - by user - \"autoLogout: false\" - (e.g., clicking on logout) OR\n      // - by application automatically - \"autoLogout: true\" - (e.g., app code initiating logout due to certain period\n      // of user inactivity\n      await pluginRegistry.runPlugins(AUTHN_EXTENSION_POINT, 'logoutInitiated', { autoLogout });\n\n      if (self.signOutUri) {\n        // if the selectedAuthenticationProvider requires us to redirect to some logout URL\n        // (such as SAML logout url in case of identity federation) just redirect to the specified url.\n        // The authentication plugins will be notified of 'logoutDetected' in this case after the logout process is\n        // complete by the \"initialization-plugin\"\n        window.location = self.absoluteSignOutUrl;\n      } else {\n        const cleaner = getEnv(self).cleaner;\n        await cleaner.cleanup();\n        window.history.pushState('', '', '/');\n\n        // Notify each authentication plugins after explicit logout.\n        await pluginRegistry.runPlugins(AUTHN_EXTENSION_POINT, 'logoutDetected', {\n          explicitLogout: true,\n          autoLogout,\n        });\n      }\n    },\n  }))\n  .views(self => ({\n    get absoluteSignInUrl() {\n      // The \"signInUri\" below contains redirectUrl that comes from server and points back to the actual websiteUrl\n      // (even on local machines during local development)\n      // TODO: Temp code: Adjust redirectUrl for local development.\n      //  This will go away once we switch to the idea of \"provider registry\". Currently, the provider configs are retrieved\n      //  from a central \"AuthenticationProviderConfigService\" on the server side and the providers do not get a chance to adjust \"signInUri\"\n      //  (or any other config variables) before returning them during local development, once we move to \"provider registry\" the registry will\n      //  pick appropriate auth provider impl and give it a chance to adjust variables or create derived variables\n      return adjustRedirectUri(toAbsoluteUrl(self.signInUri));\n    },\n    get absoluteSignOutUrl() {\n      return adjustRedirectUri(toAbsoluteUrl(self.signOutUri), 'logout');\n    },\n  }));\n\nexport default AuthenticationProviderPublicConfig;\n"],"file":"AuthenticationProviderPublicConfig.js"}