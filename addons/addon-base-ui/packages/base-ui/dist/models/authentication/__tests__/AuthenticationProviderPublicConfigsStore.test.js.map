{"version":3,"sources":["../../../../src/models/authentication/__tests__/AuthenticationProviderPublicConfigsStore.test.js"],"names":["jest","mock","publicConfigurationsNativeDisabled","id","title","type","credentialHandlingType","signInUri","signOutUri","userPoolId","clientId","enableNativeUserPoolUsers","publicConfigurationsNativeEnabled","describe","it","appContext","getAuthenticationProviderPublicConfigs","mockResolvedValue","_","cloneDeep","store","AuthenticationProviderPublicConfigsStore","create","load","options","authenticationProviderOptions","expect","toHaveBeenCalled","toEqual","key","text","value"],"mappings":"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","sourcesContent":["/*\n *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\").\n *  You may not use this file except in compliance with the License.\n *  A copy of the License is located at\n *\n *  http://aws.amazon.com/apache2.0\n *\n *  or in the \"license\" file accompanying this file. This file is distributed\n *  on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n *  express or implied. See the License for the specific language governing\n *  permissions and limitations under the License.\n */\nimport _ from 'lodash';\n\nimport { AuthenticationProviderPublicConfigsStore } from '../AuthenticationProviderPublicConfigsStore';\nimport { registerContextItems as registerAuthentication } from '../Authentication';\nimport { getAuthenticationProviderPublicConfigs } from '../../../helpers/api';\n\njest.mock('../../../helpers/api');\n\n// This is an object containing the auth provider public configurations as test data for when enableNativeUserPoolUser = false\nconst publicConfigurationsNativeDisabled = [\n  {\n    id: 'internal',\n    title: 'Default Login',\n    type: 'internal',\n    credentialHandlingType: 'submit',\n    signInUri: 'api/authentication/id-tokens',\n    signOutUri: 'api/authentication/logout',\n  },\n  {\n    id: 'https://cognito-idp.us-east-1.amazonaws.com/us-east-1_poolId1',\n    title: 'Login using Active Directory',\n    type: 'cognito_user_pool',\n    credentialHandlingType: 'redirect',\n    signOutUri:\n      'https://test-raas1.auth.us-east-1.amazoncognito.com/logout?client_id=199999999991&logout_uri=https://12345.cloudfront.net',\n    userPoolId: 'us-east-1_poolId1',\n    clientId: '199999999991',\n    enableNativeUserPoolUsers: false,\n  },\n  {\n    id: 'datalake.example.com',\n    title: 'Login using Active Directory',\n    type: 'cognito_user_pool_federated_idp',\n    credentialHandlingType: 'redirect',\n    signInUri:\n      'https://test-raas1.auth.us-east-1.amazoncognito.com/oauth2/authorize?response_type=token&client_id=199999999991&redirect_uri=https://12345.cloudfront.net&idp_identifier=datalake.example.com',\n    signOutUri:\n      'https://test-raas1.auth.us-east-1.amazoncognito.com/logout?client_id=199999999991&logout_uri=https://12345.cloudfront.net',\n  },\n  {\n    id: 'https://cognito-idp.us-east-1.amazonaws.com/us-east-1_poolId2',\n    title: 'Login using Active Directory 2',\n    type: 'cognito_user_pool',\n    credentialHandlingType: 'redirect',\n    signOutUri:\n      'https://test-raas2.auth.us-east-1.amazoncognito.com/logout?client_id=28888888888882&logout_uri=https://12345.cloudfront.net',\n    userPoolId: 'us-east-1_poolId2',\n    clientId: '28888888888882',\n    enableNativeUserPoolUsers: false,\n  },\n  {\n    id: 'datalake2.example.com',\n    title: 'Login using Active Directory 2',\n    type: 'cognito_user_pool_federated_idp',\n    credentialHandlingType: 'redirect',\n    signInUri:\n      'https://test-raas2.auth.us-east-1.amazoncognito.com/login?response_type=token&client_id=28888888888882&redirect_uri=https://12345.cloudfront.net&idp_identifier=datalake2.example.com',\n    signOutUri:\n      'https://test-raas2.auth.us-east-1.amazoncognito.com/logout?client_id=28888888888882&logout_uri=https://12345.cloudfront.net',\n  },\n];\n\n// This is an object containing the auth provider public configurations as test data for when enableNativeUserPoolUser = true\nconst publicConfigurationsNativeEnabled = [\n  {\n    id: 'internal',\n    title: 'Default Login',\n    type: 'internal',\n    credentialHandlingType: 'submit',\n    signInUri: 'api/authentication/id-tokens',\n    signOutUri: 'api/authentication/logout',\n  },\n  {\n    id: 'https://cognito-idp.us-east-1.amazonaws.com/us-east-1_poolId1',\n    title: 'Login using Active Directory',\n    type: 'cognito_user_pool',\n    credentialHandlingType: 'redirect',\n    signOutUri:\n      'https://test-raas1.auth.us-east-1.amazoncognito.com/logout?client_id=199999999991&logout_uri=https://12345.cloudfront.net',\n    userPoolId: 'us-east-1_poolId1',\n    clientId: '199999999991',\n    enableNativeUserPoolUsers: true,\n    signInUri:\n      'https://test-raas1.auth.us-east-1.amazoncognito.com/oauth2/authorize?response_type=token&client_id=199999999991&redirect_uri=https://12345.cloudfront.net&identity_provider=COGNITO',\n  },\n  {\n    id: 'datalake.example.com',\n    title: 'Login using Active Directory',\n    type: 'cognito_user_pool_federated_idp',\n    credentialHandlingType: 'redirect',\n    signInUri:\n      'https://test-raas1.auth.us-east-1.amazoncognito.com/oauth2/authorize?response_type=token&client_id=199999999991&redirect_uri=https://12345.cloudfront.net&idp_identifier=datalake.example.com',\n    signOutUri:\n      'https://test-raas1.auth.us-east-1.amazoncognito.com/logout?client_id=199999999991&logout_uri=https://12345.cloudfront.net',\n  },\n  {\n    id: 'https://cognito-idp.us-east-1.amazonaws.com/us-east-1_poolId2',\n    title: 'Login using Active Directory 2',\n    type: 'cognito_user_pool',\n    credentialHandlingType: 'redirect',\n    signOutUri:\n      'https://test-raas2.auth.us-east-1.amazoncognito.com/logout?client_id=28888888888882&logout_uri=https://12345.cloudfront.net',\n    userPoolId: 'us-east-1_poolId2',\n    clientId: '28888888888882',\n    enableNativeUserPoolUsers: true,\n    signInUri:\n      'https://test-raas2.auth.us-east-1.amazoncognito.com/login?response_type=token&client_id=28888888888882&redirect_uri=https://12345.cloudfront.net&identity_provider=COGNITO',\n  },\n  {\n    id: 'datalake2.example.com',\n    title: 'Login using Active Directory 2',\n    type: 'cognito_user_pool_federated_idp',\n    credentialHandlingType: 'redirect',\n    signInUri:\n      'https://test-raas2.auth.us-east-1.amazoncognito.com/login?response_type=token&client_id=28888888888882&redirect_uri=https://12345.cloudfront.net&idp_identifier=datalake2.example.com',\n    signOutUri:\n      'https://test-raas2.auth.us-east-1.amazoncognito.com/logout?client_id=28888888888882&logout_uri=https://12345.cloudfront.net',\n  },\n];\n\ndescribe('AuthenticationProviderPublicConfigsStore', () => {\n  describe('authenticationProviderOptions', () => {\n    it('should return config options without entries for cognito user pools if nativeUserPool is disabled', async () => {\n      const appContext = {};\n\n      // Lets register the authentication store because it is a dependency\n      registerAuthentication(appContext);\n\n      // Make the api call return the test data\n      getAuthenticationProviderPublicConfigs.mockResolvedValue(_.cloneDeep(publicConfigurationsNativeDisabled));\n\n      // Create the store and trigger the loading\n      const store = AuthenticationProviderPublicConfigsStore.create({}, appContext);\n      await store.load();\n\n      // Get the provider options\n      const options = store.authenticationProviderOptions;\n\n      // Lets see if the api is called\n      expect(getAuthenticationProviderPublicConfigs).toHaveBeenCalled();\n\n      // Check if the returned options are as expected\n      expect(options).toEqual([\n        { key: 'internal', text: 'Default Login', value: 'internal' },\n        {\n          key: 'datalake.example.com',\n          text: 'Login using Active Directory',\n          value: 'datalake.example.com',\n        },\n        {\n          key: 'datalake2.example.com',\n          text: 'Login using Active Directory 2',\n          value: 'datalake2.example.com',\n        },\n      ]);\n    });\n\n    it('should return config options with entries for cognito user pools if nativeUserPool is enabled', async () => {\n      const appContext = {};\n\n      // Lets register the authentication store because it is a dependency\n      registerAuthentication(appContext);\n\n      // Make the api call return the test data\n      getAuthenticationProviderPublicConfigs.mockResolvedValue(_.cloneDeep(publicConfigurationsNativeEnabled));\n\n      // Create the store and trigger the loading\n      const store = AuthenticationProviderPublicConfigsStore.create({}, appContext);\n      await store.load();\n\n      // Get the provider options\n      const options = store.authenticationProviderOptions;\n\n      // Lets see if the api is called\n      expect(getAuthenticationProviderPublicConfigs).toHaveBeenCalled();\n\n      // Check if the returned options are as expected\n      expect(options).toEqual([\n        { key: 'internal', text: 'Default Login', value: 'internal' },\n        {\n          key: 'https://cognito-idp.us-east-1.amazonaws.com/us-east-1_poolId1',\n          text: 'Login using Active Directory',\n          value: 'https://cognito-idp.us-east-1.amazonaws.com/us-east-1_poolId1',\n        },\n        {\n          key: 'datalake.example.com',\n          text: 'Login using Active Directory',\n          value: 'datalake.example.com',\n        },\n        {\n          key: 'https://cognito-idp.us-east-1.amazonaws.com/us-east-1_poolId2',\n          text: 'Login using Active Directory 2',\n          value: 'https://cognito-idp.us-east-1.amazonaws.com/us-east-1_poolId2',\n        },\n        {\n          key: 'datalake2.example.com',\n          text: 'Login using Active Directory 2',\n          value: 'datalake2.example.com',\n        },\n      ]);\n\n      // NOTE: the current AuthenticationProviderPublicConfigsStore.authenticationProviderOptions is not ideal\n      // when enableNativeUserPoolUsers = true. This is not because of the code in the UI, it is because the API\n      // call does not yet handle enableNativeUserPoolUsers = true correctly. For example, the text option\n      // is repeated when the type is cognito_user_pool and cognito_user_pool_federated_idp.\n    });\n  });\n});\n"],"file":"AuthenticationProviderPublicConfigsStore.test.js"}