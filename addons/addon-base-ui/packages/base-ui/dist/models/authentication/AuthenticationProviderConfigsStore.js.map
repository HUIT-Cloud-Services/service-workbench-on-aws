{"version":3,"sources":["../../../src/models/authentication/AuthenticationProviderConfigsStore.js"],"names":["AuthenticationProviderConfigsStore","BaseStore","named","props","authenticationProviderConfigs","types","optional","map","frozen","authenticationProviderConfigEditors","AuthenticationProviderConfigEditor","actions","self","doLoad","runInAction","forEach","authenticationProviderConfig","id","replace","getUpdateAuthenticationProviderConfigEditor","authenticationProviderConfigId","authenticationProviderConfigEditor","get","create","getAuthenticationProviderConfig","setConfigEditor","getConfigEditorForUpdate","put","inputManifestForUpdate","config","type","inputManifest","_","cloneDeep","filteredSections","sections","section","filteredChildren","filter","children","child","name","configuration","toConfiguration","ConfigurationEditor","currentSectionIndex","review","mode","undefined","updateAuthenticationProvider","updated","set","getCreateAuthenticationProviderConfigEditor","_authenticationProviderTypeConfig","views","empty","size","list","getAuthenticationProviderConfigByIdpName","idpName","providerConfig","find","authNProvider","idps","foundIdp","flatObj","_result","_value","key","toOpaqueKey","opaqueKey","transform","result","value","fromConfiguration","fromOpaqueKey","registerContextItems","appContext","authenticationProviderConfigsStore"],"mappings":"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","sourcesContent":["/*\n *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\").\n *  You may not use this file except in compliance with the License.\n *  A copy of the License is located at\n *\n *  http://aws.amazon.com/apache2.0\n *\n *  or in the \"license\" file accompanying this file. This file is distributed\n *  on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n *  express or implied. See the License for the specific language governing\n *  permissions and limitations under the License.\n */\n\nimport { types } from 'mobx-state-tree';\nimport _ from 'lodash';\n\nimport { getAuthenticationProviderConfigs, updateAuthenticationProviderConfig } from '../../helpers/api';\nimport { BaseStore } from '../BaseStore';\nimport { flattenObject, mapToArray, unFlattenObject } from '../../helpers/utils';\nimport ConfigurationEditor from '../configuration/ConfigurationEditor';\nimport AuthenticationProviderConfigEditor from './AuthenticationProviderConfigEditor';\n\nconst AuthenticationProviderConfigsStore = BaseStore.named('AuthenticationProviderConfigsStore')\n  .props({\n    // authenticationProviderConfigs: A map of authentication provider configurations. Key = id, Value = authn provider config\n    // Each config in the array has the following shape\n    /*\n    {\n      id: STRING // id of the authentication provider\n      title: STRING // title of the authentication provider\n      ..... // The rest of the fields which differ depending on the type of the authentication provider\n      type: { // An object containing information about the authentication provider type\n        type: STRING // authentication provider type\n        title: STRING // title of the authentication provider type\n        description: STRING // description about the authentication provider type\n        config: { // An object authentication provider type configuration\n          credentialHandlingType: STRING // credentialHandlingType indicating credential handling for the authentication provider\n                                         // Possible values:\n                                         // 'submit' -- The credentials should be submitted to the URL provided by the authentication provider\n                                         // 'redirect' -- The credentials should be NOT be collected and the user should be redirected directly to the\n                                         // URL provided by the authentication provider. For example, in case of SAML auth, the username/password\n                                         // should not be collected by the service provider but the user should be redirected to the identity provider\n\n          inputSchema: OBJECT // An object containing JSON schema that describes all properties of the authentication provider configuration that must be provided as\n                              // input when creating this authentication provider.\n                              // This schema will defer based on authentication provider type.\n          inputManifestForCreate: OBJECT // An object similar to inputSchema containing a manifest that describes all properties of the authentication provider configuration that must be provided as\n                              // input when creating this authentication provider. In addition, the object also has information that can be used by the UI to display inputs\n                              // forms such as which inputs to ask from user in which section of the wizard, which sections to show based on which conditions etc.\n                              // This manifest will defer based on authentication provider type.\n          inputManifestForUpdate: OBJECT // Similar to inputManifestForCreate that describes inputs to be accepted from user when updating an existing authentication provider\n        }\n      }\n    }\n    */\n    authenticationProviderConfigs: types.optional(types.map(types.frozen()), {}),\n\n    /*\n      Key = authenticationProviderConfigId, Value = AuthenticationProviderConfigEditor\n     */\n    authenticationProviderConfigEditors: types.optional(types.map(AuthenticationProviderConfigEditor), {}),\n  })\n  .actions(self => ({\n    async doLoad() {\n      const authenticationProviderConfigs = await getAuthenticationProviderConfigs();\n      self.runInAction(() => {\n        const map = {};\n        authenticationProviderConfigs.forEach(authenticationProviderConfig => {\n          map[authenticationProviderConfig.id] = authenticationProviderConfig;\n        });\n        self.authenticationProviderConfigs.replace(map);\n      });\n    },\n\n    getUpdateAuthenticationProviderConfigEditor(authenticationProviderConfigId) {\n      let authenticationProviderConfigEditor = self.authenticationProviderConfigEditors.get(\n        authenticationProviderConfigId,\n      );\n      if (!authenticationProviderConfigEditor) {\n        authenticationProviderConfigEditor = AuthenticationProviderConfigEditor.create({\n          id: authenticationProviderConfigId,\n        });\n        const authenticationProviderConfig = self.getAuthenticationProviderConfig(authenticationProviderConfigId);\n        authenticationProviderConfigEditor.setConfigEditor(self.getConfigEditorForUpdate(authenticationProviderConfig));\n\n        self.authenticationProviderConfigEditors.put(authenticationProviderConfigEditor);\n      }\n      return authenticationProviderConfigEditor;\n    },\n\n    getConfigEditorForUpdate(authenticationProviderConfig) {\n      const inputManifestForUpdate = authenticationProviderConfig.config.type.config.inputManifestForUpdate;\n      if (inputManifestForUpdate) {\n        const inputManifest = _.cloneDeep(inputManifestForUpdate);\n        // \"id\" is read-only and should not be part of the inputManifestForUpdate when updating an existing provider so remove it\n        const filteredSections = _.map(inputManifest.sections, section => {\n          const filteredChildren = _.filter(section.children, child => child.name !== 'id');\n          section.children = filteredChildren;\n          return section;\n        });\n        inputManifest.sections = filteredSections;\n\n        const configuration = toConfiguration(authenticationProviderConfig.config);\n        return ConfigurationEditor.create({\n          currentSectionIndex: 0,\n          review: false,\n          inputManifest,\n          configuration,\n          mode: 'edit',\n        });\n      }\n      return undefined;\n    },\n\n    async updateAuthenticationProvider(authenticationProviderConfig) {\n      const updated = await updateAuthenticationProviderConfig(authenticationProviderConfig);\n      self.runInAction(() => {\n        self.authenticationProviderConfigs.set(updated.id, updated);\n        const authenticationProviderConfigEditor = self.authenticationProviderConfigEditors.get(updated.id);\n        authenticationProviderConfigEditor.setConfigEditor(self.getConfigEditorForUpdate(updated));\n      });\n    },\n\n    getCreateAuthenticationProviderConfigEditor(_authenticationProviderTypeConfig) {},\n  }))\n  .views(self => ({\n    get empty() {\n      return self.authenticationProviderConfigs.size === 0;\n    },\n    get list() {\n      return mapToArray(self.authenticationProviderConfigs);\n    },\n    getAuthenticationProviderConfig(authenticationProviderConfigId) {\n      return self.authenticationProviderConfigs.get(authenticationProviderConfigId);\n    },\n\n    /**\n     * Method that finds first authentication provider that has an idp with the given idp name\n     * @param idpName Name of the identity provider\n     * @returns {*}\n     */\n    getAuthenticationProviderConfigByIdpName(idpName) {\n      const providerConfig = _.find(self.list, authNProvider => {\n        const idps = _.get(authNProvider, 'config.federatedIdentityProviders');\n        const foundIdp = _.find(idps, { name: idpName });\n        // return true if idp is found under this authentication provider\n        return !!foundIdp;\n      });\n      return providerConfig;\n    },\n  }));\n/**\n * Translates given authenticationProviderConfig into ConfigurationEditor compatible flat \"configuration\" object with key/value pairs.\n * The authenticationProviderConfig may be an object graph but the returned \"configuration\" will be flat object with key/value pairs.\n * @param authenticationProviderConfig\n * @return configuration\n */\nfunction toConfiguration(authenticationProviderConfig) {\n  // Authentication provider \"type\" information is not part of inputs and can be skipped from the configuration\n  const flatObj = flattenObject(authenticationProviderConfig, (_result, _value, key) => key !== 'type');\n\n  // MobX form tries to handle nested object notations using dots and and array notations using\n  // [] and expects nested field structure\n  // Here, we want the keys like 'a.b[0].c[1]' etc to be treated as opaque keys in MobX\n  // So replace . and [] to make sure mobx does not treat them as nested keys\n  const toOpaqueKey = key => {\n    let opaqueKey = _.replace(key, /\\./g, '/');\n    opaqueKey = _.replace(opaqueKey, /\\[/g, '|-');\n    opaqueKey = _.replace(opaqueKey, /]/g, '-|');\n    return opaqueKey;\n  };\n  return _.transform(\n    flatObj,\n    (result, value, key) => {\n      result[toOpaqueKey(key)] = value;\n    },\n    {},\n  );\n}\n\n/**\n * Translates given configuration object containing key/value pairs into authenticationProviderConfig.\n * This function is inverse of toConfiguration function above.\n * @param configuration\n * @return authenticationProviderConfig\n */\nfunction fromConfiguration(configuration) {\n  // MobX form tries to handle nested object notations using dots and and array notations using\n  // [] and expects nested field structure\n  // Here, the configuration may have been translated to use opaque keys with dots replaced by / and\n  // [ replaced by |- and ] replaced with -|\n  // Convert those keys back to use dot and [] notations\n  const fromOpaqueKey = key => {\n    let opaqueKey = _.replace(key, /\\//g, '.');\n    opaqueKey = _.replace(opaqueKey, /(\\|-)/g, '[');\n    opaqueKey = _.replace(opaqueKey, /(-\\|)/g, ']');\n    return opaqueKey;\n  };\n\n  const flatObj = _.transform(\n    configuration,\n    (result, value, key) => {\n      result[fromOpaqueKey(key)] = value;\n    },\n    {},\n  );\n\n  // Authentication provider \"type\" information is not part of inputs and can be skipped from the configuration\n  return unFlattenObject(flatObj, (_result, _value, key) => key !== 'type');\n}\n\nfunction registerContextItems(appContext) {\n  appContext.authenticationProviderConfigsStore = AuthenticationProviderConfigsStore.create({}, appContext);\n}\n\nexport { AuthenticationProviderConfigsStore, registerContextItems, fromConfiguration };\n"],"file":"AuthenticationProviderConfigsStore.js"}