{"version":3,"sources":["../../src/models/BaseStore.js"],"names":["BaseStore","types","model","state","error","maybe","Err","tickPeriod","heartbeatInterval","actions","runInAction","fn","self","loadingPromise","load","args","Promise","resolve","reject","doLoad","then","undefined","err","startHeartbeat","shouldHeartbeat","id","setInterval","stopHeartbeat","clearInterval","changeTickPeriod","period","beating","heartBeating","cleanup","views","initial","ready","loading","reloading","errorMessage","message","isStoreReady","obj","isStoreEmpty","empty","isStoreNotEmpty","isStoreLoading","isStoreReloading","isStoreNew","isStoreError"],"mappings":";;;;;;;AAeA;;AACA;;;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAMA,SAAS,GAAGC,qBACfC,KADe,CACT,WADS,EACI;AAClBC,EAAAA,KAAK,EAAE,SADW;AAElBC,EAAAA,KAAK,EAAEH,qBAAMI,KAAN,CAAYC,QAAZ,CAFW;AAGlBC,EAAAA,UAAU,EAAE,IAAI,IAHE;AAGI;AACtBC,EAAAA,iBAAiB,EAAE;AAJD,CADJ,EAOfC,OAPe,CAOP;AAAA,SAAO;AACd;AACA;AACAC,IAAAA,WAHc,uBAGFC,EAHE,EAGE;AACd,aAAOA,EAAE,EAAT;AACD;AALa,GAAP;AAAA,CAPO,EAcfF,OAde,CAcP,UAAAG,IAAI,EAAI;AACf,MAAIC,cAAJ;AAEA,SAAO;AACLC,IAAAA,IAAI,EAAE,gBAAa;AAAA,wCAATC,IAAS;AAATA,QAAAA,IAAS;AAAA;;AACjB,UAAIF,cAAJ,EAAoB,OAAOA,cAAP,CADH,CAGjB;;AACA,UAAID,IAAI,CAACT,KAAL,KAAe,OAAnB,EAA4BS,IAAI,CAACT,KAAL,GAAa,WAAb,CAA5B,KACKS,IAAI,CAACT,KAAL,GAAa,SAAb;AAELU,MAAAA,cAAc,GAAG,IAAIG,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAChD;AACA,YAAI;AACFN,UAAAA,IAAI,CACDO,MADH,OAAAP,IAAI,EACSG,IADT,CAAJ,CAEGK,IAFH,CAEQ,YAAM;AACVR,YAAAA,IAAI,CAACF,WAAL,CAAiB,YAAM;AACrBE,cAAAA,IAAI,CAACT,KAAL,GAAa,OAAb;AACAS,cAAAA,IAAI,CAACR,KAAL,GAAaiB,SAAb;AACD,aAHD;AAIAR,YAAAA,cAAc,GAAGQ,SAAjB;AACAJ,YAAAA,OAAO;AACR,WATH,WAUS,UAAAK,GAAG,EAAI;AACZV,YAAAA,IAAI,CAACF,WAAL,CAAiB,YAAM;AACrBE,cAAAA,IAAI,CAACT,KAAL,GAAaS,IAAI,CAACT,KAAL,KAAe,SAAf,GAA2B,SAA3B,GAAuC,OAApD;AACAS,cAAAA,IAAI,CAACR,KAAL,GAAa,gBAAMkB,GAAN,CAAb;AACD,aAHD;AAIAT,YAAAA,cAAc,GAAGQ,SAAjB;AACAH,YAAAA,MAAM,CAACI,GAAD,CAAN;AACD,WAjBH;AAkBD,SAnBD,CAmBE,OAAOA,GAAP,EAAY;AACZV,UAAAA,IAAI,CAACF,WAAL,CAAiB,YAAM;AACrBE,YAAAA,IAAI,CAACT,KAAL,GAAaS,IAAI,CAACT,KAAL,KAAe,SAAf,GAA2B,SAA3B,GAAuC,OAApD;AACAS,YAAAA,IAAI,CAACR,KAAL,GAAa,gBAAMkB,GAAN,CAAb;AACD,WAHD;AAIAT,UAAAA,cAAc,GAAGQ,SAAjB;AACAH,UAAAA,MAAM,CAACI,GAAD,CAAN;AACD;AACF,OA7BgB,CAAjB;AA+BA,aAAOT,cAAP;AACD,KAxCI;AA0CLU,IAAAA,cAAc,EAAE,0BAAM;AACpB,UAAIX,IAAI,CAACJ,iBAAL,KAA2B,CAA/B,EAAkC,OADd,CACsB;;AAC1C,UAAI,CAACI,IAAI,CAACY,eAAL,EAAL,EAA6B;AAC7B,UAAMC,EAAE,GAAGC,WAAW,uEAAC;AAAA;AAAA;AAAA;AAAA;AAAA,oBAChBd,IAAI,CAACY,eAAL,EADgB;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA,uBAGbZ,IAAI,CAACE,IAAL,EAHa;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAD,IAOnBF,IAAI,CAACL,UAPc,CAAtB;AAQAK,MAAAA,IAAI,CAACJ,iBAAL,GAAyBiB,EAAzB;AACD,KAtDI;AAuDLD,IAAAA,eAAe,EAAE,2BAAM;AACrB,aAAO,IAAP,CADqB,CACR;AACd,KAzDI;AA0DLG,IAAAA,aAAa,EAAE,yBAAM;AACnB,UAAMF,EAAE,GAAGb,IAAI,CAACJ,iBAAhB;;AACA,UAAIiB,EAAE,KAAK,CAAX,EAAc;AACZG,QAAAA,aAAa,CAACH,EAAD,CAAb;AACAb,QAAAA,IAAI,CAACJ,iBAAL,GAAyBa,SAAzB;AACD;AACF,KAhEI;AAiELQ,IAAAA,gBAjEK,4BAiEYC,MAjEZ,EAiEoB;AACvB,UAAMC,OAAO,GAAGnB,IAAI,CAACoB,YAArB;AACApB,MAAAA,IAAI,CAACL,UAAL,GAAkBuB,MAAlB;;AACA,UAAIC,OAAJ,EAAa;AACXnB,QAAAA,IAAI,CAACe,aAAL;AACAf,QAAAA,IAAI,CAACW,cAAL;AACD;AACF,KAxEI;AAyELU,IAAAA,OAAO,EAAE,mBAAM;AACbrB,MAAAA,IAAI,CAACe,aAAL;AACAf,MAAAA,IAAI,CAACT,KAAL,GAAa,SAAb;AACAS,MAAAA,IAAI,CAACR,KAAL,GAAaiB,SAAb;AACD;AA7EI,GAAP;AA+ED,CAhGe,EAkGfa,KAlGe,CAkGT,UAAAtB,IAAI;AAAA,SAAK;AACd,QAAIoB,YAAJ,GAAmB;AACjB,aAAOpB,IAAI,CAACJ,iBAAL,GAAyB,CAAhC;AACD,KAHa;;AAId,QAAI2B,OAAJ,GAAc;AACZ,aAAOvB,IAAI,CAACT,KAAL,KAAe,SAAtB;AACD,KANa;;AAOd,QAAIiC,KAAJ,GAAY;AACV,aAAOxB,IAAI,CAACT,KAAL,KAAe,OAAtB;AACD,KATa;;AAUd,QAAIkC,OAAJ,GAAc;AACZ,aAAOzB,IAAI,CAACT,KAAL,KAAe,SAAtB;AACD,KAZa;;AAad,QAAImC,SAAJ,GAAgB;AACd,aAAO1B,IAAI,CAACT,KAAL,KAAe,WAAtB;AACD,KAfa;;AAgBd,QAAIoC,YAAJ,GAAmB;AACjB,aAAO3B,IAAI,CAACR,KAAL,GAAaQ,IAAI,CAACR,KAAL,CAAWoC,OAAX,IAAsB,eAAnC,GAAqD,EAA5D;AACD;;AAlBa,GAAL;AAAA,CAlGK,CAAlB;;;;AAuHA,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAAAC,GAAG;AAAA,SAAIA,GAAG,CAACN,KAAJ,IAAaM,GAAG,CAACJ,SAArB;AAAA,CAAxB;;;;AACA,IAAMK,YAAY,GAAG,SAAfA,YAAe,CAAAD,GAAG;AAAA,SAAI,CAACA,GAAG,CAACN,KAAJ,IAAaM,GAAG,CAACJ,SAAlB,KAAgCI,GAAG,CAACE,KAAxC;AAAA,CAAxB;;;;AACA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAAAH,GAAG;AAAA,SAAI,CAACA,GAAG,CAACN,KAAJ,IAAaM,GAAG,CAACJ,SAAlB,KAAgC,CAACI,GAAG,CAACE,KAAzC;AAAA,CAA3B;;;;AACA,IAAME,cAAc,GAAG,SAAjBA,cAAiB,CAAAJ,GAAG;AAAA,SAAIA,GAAG,CAACL,OAAR;AAAA,CAA1B;;;;AACA,IAAMU,gBAAgB,GAAG,SAAnBA,gBAAmB,CAAAL,GAAG;AAAA,SAAIA,GAAG,CAACJ,SAAR;AAAA,CAA5B;;;;AACA,IAAMU,UAAU,GAAG,SAAbA,UAAa,CAAAN,GAAG;AAAA,SAAIA,GAAG,CAACP,OAAR;AAAA,CAAtB;;;;AACA,IAAMc,YAAY,GAAG,SAAfA,YAAe,CAAAP,GAAG;AAAA,SAAI,CAAC,CAACA,GAAG,CAACtC,KAAV;AAAA,CAAxB","sourcesContent":["/*\n *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\").\n *  You may not use this file except in compliance with the License.\n *  A copy of the License is located at\n *\n *  http://aws.amazon.com/apache2.0\n *\n *  or in the \"license\" file accompanying this file. This file is distributed\n *  on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n *  express or implied. See the License for the specific language governing\n *  permissions and limitations under the License.\n */\n\nimport { types } from 'mobx-state-tree';\nimport { toErr, Err } from './Err';\n\n// A four-state model that has the following states:\n//  +---------+                   +-----------+\n//  | initial |            +----> |   ready   |\n//  +---------+            |      +-----------+\n//                         |\n//      + ^                |         + ^\n//      | |                |         | | success\n// load | | error          |    load | | or error\n//      v +                |         v +\n//                         |\n//  +---------+            |      +-----------+\n//  | loading +------------+      | reloading |\n//  +---------+   success         +-----------+\n//\n// state: <initial|loading|ready|reloading>\n// error: <error object> if there is an error otherwise <undefined>\n// empty: <true> if state is ready or reloading and the content is considered empty\nconst BaseStore = types\n  .model('BaseStore', {\n    state: 'initial',\n    error: types.maybe(Err),\n    tickPeriod: 7 * 1000, // 7 seconds\n    heartbeatInterval: 0,\n  })\n  .actions(() => ({\n    // I had issues using runInAction from mobx\n    // the issue is discussed here https://github.com/mobxjs/mobx-state-tree/issues/915\n    runInAction(fn) {\n      return fn();\n    },\n  }))\n  .actions(self => {\n    let loadingPromise;\n\n    return {\n      load: (...args) => {\n        if (loadingPromise) return loadingPromise;\n\n        // self.error = undefined; we don't want to clear the error here\n        if (self.state === 'ready') self.state = 'reloading';\n        else self.state = 'loading';\n\n        loadingPromise = new Promise((resolve, reject) => {\n          // if ((self.state === 'loading') || (self.state === 'reloading')) return;\n          try {\n            self\n              .doLoad(...args)\n              .then(() => {\n                self.runInAction(() => {\n                  self.state = 'ready';\n                  self.error = undefined;\n                });\n                loadingPromise = undefined;\n                resolve();\n              })\n              .catch(err => {\n                self.runInAction(() => {\n                  self.state = self.state === 'loading' ? 'initial' : 'ready';\n                  self.error = toErr(err);\n                });\n                loadingPromise = undefined;\n                reject(err);\n              });\n          } catch (err) {\n            self.runInAction(() => {\n              self.state = self.state === 'loading' ? 'initial' : 'ready';\n              self.error = toErr(err);\n            });\n            loadingPromise = undefined;\n            reject(err);\n          }\n        });\n\n        return loadingPromise;\n      },\n\n      startHeartbeat: () => {\n        if (self.heartbeatInterval !== 0) return; // there is one running\n        if (!self.shouldHeartbeat()) return;\n        const id = setInterval(async () => {\n          if (!self.shouldHeartbeat()) return;\n          try {\n            await self.load();\n          } catch (err) {\n            /* ignore */\n          }\n        }, self.tickPeriod);\n        self.heartbeatInterval = id;\n      },\n      shouldHeartbeat: () => {\n        return true; // extender can override this method\n      },\n      stopHeartbeat: () => {\n        const id = self.heartbeatInterval;\n        if (id !== 0) {\n          clearInterval(id);\n          self.heartbeatInterval = undefined;\n        }\n      },\n      changeTickPeriod(period) {\n        const beating = self.heartBeating;\n        self.tickPeriod = period;\n        if (beating) {\n          self.stopHeartbeat();\n          self.startHeartbeat();\n        }\n      },\n      cleanup: () => {\n        self.stopHeartbeat();\n        self.state = 'initial';\n        self.error = undefined;\n      },\n    };\n  })\n\n  .views(self => ({\n    get heartBeating() {\n      return self.heartbeatInterval > 0;\n    },\n    get initial() {\n      return self.state === 'initial';\n    },\n    get ready() {\n      return self.state === 'ready';\n    },\n    get loading() {\n      return self.state === 'loading';\n    },\n    get reloading() {\n      return self.state === 'reloading';\n    },\n    get errorMessage() {\n      return self.error ? self.error.message || 'unknown error' : '';\n    },\n  }));\n\nconst isStoreReady = obj => obj.ready || obj.reloading;\nconst isStoreEmpty = obj => (obj.ready || obj.reloading) && obj.empty;\nconst isStoreNotEmpty = obj => (obj.ready || obj.reloading) && !obj.empty;\nconst isStoreLoading = obj => obj.loading;\nconst isStoreReloading = obj => obj.reloading;\nconst isStoreNew = obj => obj.initial;\nconst isStoreError = obj => !!obj.error;\n\nexport {\n  BaseStore,\n  isStoreReady,\n  isStoreEmpty,\n  isStoreNotEmpty,\n  isStoreLoading,\n  isStoreReloading,\n  isStoreNew,\n  isStoreError,\n};\n"],"file":"BaseStore.js"}