{"version":3,"sources":["../../src/models/PluginRegistry.js"],"names":["PluginRegistry","registry","extensionPoint","getPlugins","methodName","plugins","_","filter","plugin","isFunction","args","getPluginsWithMethod","payload","continueOnError","pluginInvokerFn","pluginPayload","method","payloadSoFar","err"],"mappings":";;;;;;;AAgBA;;AACA;;;;;;;;;;;;;;;;;;;;IAEMA,c;AACJ,0BAAYC,QAAZ,EAAsB;AAAA;;AACpB,SAAKA,QAAL,GAAgBA,QAAhB;AACD;;;;+BAEUC,c,EAAgB;AACzB,aAAO,KAAKD,QAAL,CAAcE,UAAd,CAAyBD,cAAzB,CAAP;AACD;;;yCAEoBA,c,EAAgBE,U,EAAY;AAC/C,UAAMH,QAAQ,GAAG,KAAKA,QAAtB;AACA,UAAMI,OAAO,GAAGJ,QAAQ,CAACE,UAAT,CAAoBD,cAApB,CAAhB;AACA,aAAOI,mBAAEC,MAAF,CAASF,OAAT,EAAkB,UAAAG,MAAM;AAAA,eAAIF,mBAAEG,UAAF,CAAaD,MAAM,CAACJ,UAAD,CAAnB,CAAJ;AAAA,OAAxB,CAAP;AACD;;;;iGAEgBF,c,EAAgBE,U;;;;;;;;;;;0CAAeM,I;AAAAA,kBAAAA,I;;;AACxCL,gBAAAA,O,GAAU,KAAKM,oBAAL,CAA0BT,cAA1B,EAA0CE,UAA1C,C,EAEhB;AACA;;iDACO,gCAAoBC,OAApB,EAA6B,UAAAG,MAAM;AAAA,yBAAIA,MAAM,CAACJ,UAAD,CAAN,OAAAI,MAAM,EAAgBE,IAAhB,CAAV;AAAA,iBAAnC,C;;;;;;;;;;;;;;;;AAGT;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;iCAEIR,c,EACAE,U,EAOA;AAAA,qFAFI,EAEJ;AAAA,8BALEQ,OAKF;AAAA,UALEA,OAKF,6BALY,EAKZ;AAAA,sCAJEC,eAIF;AAAA,UAJEA,eAIF,qCAJoB,KAIpB;AAAA,sCAHEC,eAGF;AAAA,UAHEA,eAGF,qCAHoB,UAACC,aAAD,EAAgBP,MAAhB,EAAwBQ,MAAxB;AAAA,2CAAmCN,IAAnC;AAAmCA,UAAAA,IAAnC;AAAA;;AAAA,eAA4CF,MAAM,CAACQ,MAAD,CAAN,OAAAR,MAAM,GAASO,aAAT,SAA2BL,IAA3B,EAAlD;AAAA,OAGpB;;AACA,UAAML,OAAO,GAAG,KAAKM,oBAAL,CAA0BT,cAA1B,EAA0CE,UAA1C,CAAhB;AAEA,UAAIa,YAAY,GAAGL,OAAnB,CAHA,CAIA;;AAJA,yCADGF,IACH;AADGA,QAAAA,IACH;AAAA;;AAAA,iDAKqBL,OALrB;AAAA;;AAAA;AAKA,4DAA8B;AAAA,cAAnBG,MAAmB;;AAC5B,cAAI;AACFS,YAAAA,YAAY,GAAGH,eAAe,MAAf,UAAgBG,YAAhB,EAA8BT,MAA9B,EAAsCJ,UAAtC,SAAqDM,IAArD,EAAf;AACD,WAFD,CAEE,OAAOQ,GAAP,EAAY;AACZ,gBAAI,CAACL,eAAL,EAAsB;AACpB,oBAAMK,GAAN;AACD;AACF;AACF;AAbD;AAAA;AAAA;AAAA;AAAA;;AAcA,aAAOD,YAAP;AACD","sourcesContent":["/*\n *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\").\n *  You may not use this file except in compliance with the License.\n *  A copy of the License is located at\n *\n *  http://aws.amazon.com/apache2.0\n *\n *  or in the \"license\" file accompanying this file. This file is distributed\n *  on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n *  express or implied. See the License for the specific language governing\n *  permissions and limitations under the License.\n */\n\n/* eslint-disable import/prefer-default-export */\nimport _ from 'lodash';\nimport { processSequentially } from '../helpers/utils';\n\nclass PluginRegistry {\n  constructor(registry) {\n    this.registry = registry;\n  }\n\n  getPlugins(extensionPoint) {\n    return this.registry.getPlugins(extensionPoint);\n  }\n\n  getPluginsWithMethod(extensionPoint, methodName) {\n    const registry = this.registry;\n    const plugins = registry.getPlugins(extensionPoint);\n    return _.filter(plugins, plugin => _.isFunction(plugin[methodName]));\n  }\n\n  async runPlugins(extensionPoint, methodName, ...args) {\n    const plugins = this.getPluginsWithMethod(extensionPoint, methodName);\n\n    // Each plugin needs to be executed in order. The plugin method may be return a promise we need to await\n    // it in sequence.\n    return processSequentially(plugins, plugin => plugin[methodName](...args));\n  }\n\n  /**\n   * A method to visit plugins that implement the specified method for the specified extension point.\n   * The method calls each plugin in the same order as registered in the plugin registry.\n   * It invokes the specified method on each plugin and passes a result returned by the previous plugin call.\n   * This gives each plugin a chance to contribute to the payload. Each plugin can inspect the given payload and return\n   * it \"as is\" or return a modified payload. The payload returned by the last plugin is considered the resultant payload\n   * and returned to the caller.\n   *\n   * @param extensionPoint Name of the extension point in the plugin registry mapped to corresponding plugins\n   *\n   * @param methodName Name of the plugin method to call. The plugin method will be invoked with the payload as the\n   * first argument followed by any other arguments specified by the \"args\".\n   *\n   * @param options Various options for this call\n   * @param options.payload Value of the initial payload to pass to the first plugin\n   * @param options.continueOnError Optional flag indicating if the method should continue (i.e., continue calling the\n   * next plugin) when a plugin throws error. Defaults to false.\n   * @param options.pluginInvokerFn An optional plugin invoker function that invokes plugin. Default plugin invoker\n   * calls the plugin method with the following arguments (payloadSoFar, ...args). The \"payloadSoFar\" is the payload\n   * collected so far from previous plugins. The \"...args\" are any other arguments passed to this method. The\n   * \"pluginInvokerFn\" can be used in cases where the plugin method signature does not match the \"(payloadSoFar, ...args)\"\n   * signature. A custom implementation of \"pluginInvokerFn\" can be passed in such cases to customize the way the\n   * plugin is called. The \"pluginInvokerFn\" is called with the following arguments \"(pluginPayload, plugin, method, ...args)\"\n   *\n   * @param args Any other arguments to pass to the plugins\n   *\n   * @returns {*}\n   */\n  visitPlugins(\n    extensionPoint,\n    methodName,\n    {\n      payload = {},\n      continueOnError = false,\n      pluginInvokerFn = (pluginPayload, plugin, method, ...args) => plugin[method](pluginPayload, ...args),\n    } = {},\n    ...args\n  ) {\n    const plugins = this.getPluginsWithMethod(extensionPoint, methodName);\n\n    let payloadSoFar = payload;\n    // eslint-disable-next-line no-restricted-syntax\n    for (const plugin of plugins) {\n      try {\n        payloadSoFar = pluginInvokerFn(payloadSoFar, plugin, methodName, ...args);\n      } catch (err) {\n        if (!continueOnError) {\n          throw err;\n        }\n      }\n    }\n    return payloadSoFar;\n  }\n}\n\nexport { PluginRegistry };\n"],"file":"PluginRegistry.js"}