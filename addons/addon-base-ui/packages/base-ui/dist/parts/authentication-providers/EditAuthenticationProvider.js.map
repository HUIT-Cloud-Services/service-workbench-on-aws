{"version":3,"sources":["../../../src/parts/authentication-providers/EditAuthenticationProvider.js"],"names":["EditAuthenticationProvider","handleCancel","goto","handleSave","configs","authenticationProviderConfigToUpdate","original","getAuthenticationProviderConfig","typeObj","config","type","providerTypeId","getStore","updateAuthenticationProvider","providerConfig","store","load","content","error","renderMain","id","getAuthenticationProviderConfigId","authenticationProviderConfig","renderTitle","renderDetails","title","authenticationProviderConfigId","authenticationProviderConfigEditor","getUpdateAuthenticationProviderConfigEditor","model","configEditor","review","props","authenticationProviderConfigsStore","decodeURIComponent","match","params","Component"],"mappings":"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","sourcesContent":["/*\n *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\").\n *  You may not use this file except in compliance with the License.\n *  A copy of the License is located at\n *\n *  http://aws.amazon.com/apache2.0\n *\n *  or in the \"license\" file accompanying this file. This file is distributed\n *  on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n *  express or implied. See the License for the specific language governing\n *  permissions and limitations under the License.\n */\n\nimport { inject, observer } from 'mobx-react';\nimport React, { Component } from 'react';\nimport { Breadcrumb, Container, Header, Segment } from 'semantic-ui-react';\nimport { displayError, displaySuccess } from '../../helpers/notification';\n\nimport { gotoFn } from '../../helpers/routing';\nimport { swallowError } from '../../helpers/utils';\nimport { fromConfiguration } from '../../models/authentication/AuthenticationProviderConfigsStore';\nimport { isStoreError, isStoreLoading, isStoreReady } from '../../models/BaseStore';\nimport ConfigurationEditor from '../configuration/ConfigurationEditor';\nimport ConfigurationReview from '../configuration/ConfigurationReview';\nimport BasicProgressPlaceholder from '../helpers/BasicProgressPlaceholder';\nimport ErrorBox from '../helpers/ErrorBox';\n\n// expected props\n// - authenticationProviderConfigId (via react router params)\n// - authenticationProviderConfigsStore (via injection)\nclass EditAuthenticationProvider extends Component {\n  componentDidMount() {\n    const store = this.getStore();\n    swallowError(store.load());\n  }\n\n  render() {\n    const store = this.getStore();\n    let content = null;\n\n    if (isStoreError(store)) {\n      content = <ErrorBox error={store.error} />;\n    } else if (isStoreLoading(store)) {\n      content = <BasicProgressPlaceholder segmentCount={3} />;\n    } else if (isStoreReady(store)) {\n      content = this.renderMain();\n    } else {\n      content = null;\n    }\n\n    return (\n      <Container className=\"mt3\">\n        <div className=\"mb4\">{content}</div>\n      </Container>\n    );\n  }\n\n  renderMain() {\n    const id = this.getAuthenticationProviderConfigId();\n    const authenticationProviderConfig = this.getAuthenticationProviderConfig();\n    if (!authenticationProviderConfig) return <ErrorBox error={`The Authentication Provider \"${id}\" does not exist`} />;\n    const goto = gotoFn(this);\n    return (\n      <div>\n        <Breadcrumb>\n          <Breadcrumb.Section link onClick={() => goto('/authentication-providers')}>\n            Authentication Providers\n          </Breadcrumb.Section>\n          <Breadcrumb.Divider icon=\"right angle\" />\n          <Breadcrumb.Section>Authentication Provider</Breadcrumb.Section>\n          <Breadcrumb.Divider icon=\"right angle\" />\n          <Breadcrumb.Section active>{authenticationProviderConfig.id}</Breadcrumb.Section>\n        </Breadcrumb>\n        <Segment>\n          <div className=\"ml2\">\n            {this.renderTitle(authenticationProviderConfig)}\n            {this.renderDetails(authenticationProviderConfig.id)}\n          </div>\n        </Segment>\n      </div>\n    );\n  }\n\n  renderTitle(authenticationProviderConfig) {\n    return (\n      <Header as=\"h1\" color=\"grey\" className=\"ml2 mt3\">\n        {authenticationProviderConfig.config.title}\n      </Header>\n    );\n  }\n\n  renderDetails(authenticationProviderConfigId) {\n    const authenticationProviderConfigEditor = this.getStore().getUpdateAuthenticationProviderConfigEditor(\n      authenticationProviderConfigId,\n    );\n    const model = authenticationProviderConfigEditor.configEditor;\n    const review = model.review;\n    if (review) {\n      return <ConfigurationReview model={model} onCancel={this.handleCancel} onSave={this.handleSave} />;\n    }\n    return <ConfigurationEditor model={model} onCancel={this.handleCancel} />;\n  }\n\n  getStore() {\n    return this.props.authenticationProviderConfigsStore;\n  }\n\n  getAuthenticationProviderConfigId() {\n    return decodeURIComponent((this.props.match.params || {}).authenticationProviderConfigId);\n  }\n\n  getAuthenticationProviderConfig() {\n    const id = this.getAuthenticationProviderConfigId();\n    return this.getStore().getAuthenticationProviderConfig(id);\n  }\n\n  handleCancel = () => {\n    const goto = gotoFn(this);\n    goto('/authentication-providers');\n  };\n\n  handleSave = async configs => {\n    try {\n      const authenticationProviderConfigToUpdate = fromConfiguration(configs);\n      const original = this.getAuthenticationProviderConfig();\n\n      const typeObj = original.config.type;\n      const providerTypeId = typeObj.type;\n\n      await this.getStore().updateAuthenticationProvider({\n        providerTypeId,\n        providerConfig: authenticationProviderConfigToUpdate,\n      });\n      const goto = gotoFn(this);\n      goto('/authentication-providers');\n\n      displaySuccess(`The authentication provider is updated successfully`);\n    } catch (error) {\n      displayError(error);\n    }\n  };\n}\n\nexport default inject('authenticationProviderConfigsStore')(observer(EditAuthenticationProvider));\n"],"file":"EditAuthenticationProvider.js"}