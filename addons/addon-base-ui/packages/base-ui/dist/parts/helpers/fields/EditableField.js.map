{"version":3,"sources":["../../../../src/parts/helpers/fields/EditableField.js"],"names":["EditableField","props","handleEditorOn","editorOn","handleFormSubmission","form","notifyHandler","onSubmit","clear","handleCancel","onCancel","handleFormError","errors","onError","handlerFn","handlerFnToNotify","_","noop","args","isNil","renderEditMode","renderViewMode","renderFieldForEdit","showDimmer","showErrorPanel","renderFormAs","processing","renderFieldForView","onEditorOn","React","Component","observable"],"mappings":";;;;;;;;;AAeA;;AACA;;AACA;;AACA;;AAEA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;IACMA,a;;;;;AACJ,yBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,8BAAMA,KAAN;AADiB,UAkCnBC,cAlCmB,GAkCF,kBAAO,YAAM;AAC5B,YAAKC,QAAL,GAAgB,IAAhB;AACD,KAFgB,CAlCE;AAAA,UAsCnBC,oBAtCmB,GAsCI;AAAA,yEAAO,iBAAMC,IAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAEpB,MAAKC,aAAL,CAAmB,MAAKL,KAAL,CAAWM,QAA9B,EAAwCF,IAAxC,CAFoB;;AAAA;AAG1B,uCAAY,YAAM;AAChB,wBAAKF,QAAL,GAAgB,KAAhB;AACD,iBAFD;AAH0B;AAAA;;AAAA;AAAA;AAAA;AAO1B;AACAE,gBAAAA,IAAI,CAACG,KAAL;AACA,uCAAY,YAAM;AAChB,wBAAKL,QAAL,GAAgB,KAAhB;AACD,iBAFD;;AAT0B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAP;;AAAA;AAAA;AAAA;AAAA,QAtCJ;AAAA,UAqDnBM,YArDmB,GAqDJ,wFAAO;AAAA;AAAA;AAAA;AAAA;AACpB,oBAAKN,QAAL,GAAgB,KAAhB,CADoB,CAGpB;;AAHoB;AAAA,qBAId,MAAKG,aAAL,CAAmB,MAAKL,KAAL,CAAWS,QAA9B,CAJc;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP,GArDI;AAAA,UA4DnBC,eA5DmB,GA4DD;AAAA,0EAAO,kBAAON,IAAP,EAAaO,MAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACjB,MAAKN,aAAL,CAAmB,MAAKL,KAAL,CAAWY,OAA9B,EAAuCR,IAAvC,EAA6CO,MAA7C,CADiB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAP;;AAAA;AAAA;AAAA;AAAA,QA5DC;;AAAA,UAgEnBN,aAhEmB;AAAA,0EAgEH,kBAAOQ,SAAP;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AACRC,gBAAAA,iBADQ,GACYD,SAAS,IAAIE,mBAAEC,IAD3B;;AAAA,2CAAqBC,IAArB;AAAqBA,kBAAAA,IAArB;AAAA;;AAAA;AAAA,uBAERH,iBAAiB,MAAjB,SAAqBG,IAArB,CAFQ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAhEG;;AAAA;AAAA;AAAA;AAAA;;AAEjB,2BAAY,YAAM;AAChB,YAAKf,QAAL,GAAgBa,mBAAEG,KAAF,CAAQlB,KAAK,CAACE,QAAd,IAA0B,KAA1B,GAAkCF,KAAK,CAACE,QAAxD;AACD,KAFD;AAFiB;AAKlB;;;;6BAEQ;AACP,UAAI,KAAKA,QAAT,EAAmB,OAAO,KAAKiB,cAAL,EAAP;AACnB,aAAO,KAAKC,cAAL,EAAP;AACD;;;qCAEgB;AACf,UAAMhB,IAAI,GAAG,KAAKJ,KAAL,CAAWI,IAAxB;AACA,UAAMiB,kBAAkB,GAAG,KAAKrB,KAAL,CAAWqB,kBAAtC;AACA,0BACE,gCAAC,gBAAD;AACE,QAAA,IAAI,EAAEjB,IADR;AAEE,QAAA,MAAM,EAAE,KAAKJ,KAAL,CAAWsB,UAFrB;AAGE,QAAA,cAAc,EAAE,KAAKtB,KAAL,CAAWuB,cAH7B;AAIE,QAAA,YAAY,EAAE,KAAKvB,KAAL,CAAWwB,YAJ3B;AAKE,QAAA,QAAQ,EAAE,KAAKhB,YALjB;AAME,QAAA,SAAS,EAAE,KAAKL,oBANlB;AAOE,QAAA,OAAO,EAAE,KAAKO;AAPhB,SASG;AAAA,YAAGe,UAAH,SAAGA,UAAH;AAAA,YAAenB,QAAf,SAAeA,QAAf;AAAA,YAAyBG,QAAzB,SAAyBA,QAAzB;AAAA,eAAwCY,kBAAkB,CAAC;AAAEI,UAAAA,UAAU,EAAVA,UAAF;AAAcnB,UAAAA,QAAQ,EAARA,QAAd;AAAwBG,UAAAA,QAAQ,EAARA;AAAxB,SAAD,CAA1D;AAAA,OATH,CADF;AAaD;;;qCAEgB;AACf,aAAO,KAAKT,KAAL,CAAW0B,kBAAX,CAA8B;AAAEC,QAAAA,UAAU,EAAE,KAAK1B;AAAnB,OAA9B,CAAP;AACD;;;;EAjCyB2B,kBAAMC,S,GAuElC;;;AACA,oBAAS9B,aAAT,EAAwB;AACtBG,EAAAA,QAAQ,EAAE4B;AADY,CAAxB;;eAIe,yBAAS/B,aAAT,C","sourcesContent":["/*\n *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\").\n *  You may not use this file except in compliance with the License.\n *  A copy of the License is located at\n *\n *  http://aws.amazon.com/apache2.0\n *\n *  or in the \"license\" file accompanying this file. This file is distributed\n *  on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n *  express or implied. See the License for the specific language governing\n *  permissions and limitations under the License.\n */\n\nimport { observer } from 'mobx-react';\nimport React from 'react';\nimport { decorate, action, observable, runInAction } from 'mobx';\nimport _ from 'lodash';\n\nimport { displayError } from '../../../helpers/notification';\nimport Form from './Form';\n\n// expected props\n// - form -- A single field Mobx Form specific to this field.\n// - renderFieldForView -- Called to render the field in \"view\" mode.\n// - renderFieldForEdit -- Called to render the field in \"edit\" mode.\n// - onSubmit - optional -- Called when form specific to this field is submitted\n// - onCancel - optional -- Called when the field is being canceled for edit (i.e., transitioning from edit mode to view mode)\n// - onError - optional -- Called when any error occurs when processing the form (may be validation errors)\n/**\n * A field component that can be used for places where you require single field edits (such as inline edits).\n * The field handles switching between \"view\" mode and \"edit\" mode.\n */\nclass EditableField extends React.Component {\n  constructor(props) {\n    super(props);\n    runInAction(() => {\n      this.editorOn = _.isNil(props.editorOn) ? false : props.editorOn;\n    });\n  }\n\n  render() {\n    if (this.editorOn) return this.renderEditMode();\n    return this.renderViewMode();\n  }\n\n  renderEditMode() {\n    const form = this.props.form;\n    const renderFieldForEdit = this.props.renderFieldForEdit;\n    return (\n      <Form\n        form={form}\n        dimmer={this.props.showDimmer}\n        showErrorPanel={this.props.showErrorPanel}\n        renderFormAs={this.props.renderFormAs}\n        onCancel={this.handleCancel}\n        onSuccess={this.handleFormSubmission}\n        onError={this.handleFormError}\n      >\n        {({ processing, onSubmit, onCancel }) => renderFieldForEdit({ processing, onSubmit, onCancel })}\n      </Form>\n    );\n  }\n\n  renderViewMode() {\n    return this.props.renderFieldForView({ onEditorOn: this.handleEditorOn });\n  }\n\n  handleEditorOn = action(() => {\n    this.editorOn = true;\n  });\n\n  handleFormSubmission = action(async form => {\n    try {\n      await this.notifyHandler(this.props.onSubmit, form);\n      runInAction(() => {\n        this.editorOn = false;\n      });\n    } catch (error) {\n      displayError(error);\n      form.clear();\n      runInAction(() => {\n        this.editorOn = false;\n      });\n    }\n  });\n\n  handleCancel = action(async () => {\n    this.editorOn = false;\n\n    // notify onCancel\n    await this.notifyHandler(this.props.onCancel);\n  });\n\n  handleFormError = action(async (form, errors) => {\n    await this.notifyHandler(this.props.onError, form, errors);\n  });\n\n  notifyHandler = async (handlerFn, ...args) => {\n    const handlerFnToNotify = handlerFn || _.noop;\n    await handlerFnToNotify(...args);\n  };\n}\n\n// see https://medium.com/@mweststrate/mobx-4-better-simpler-faster-smaller-c1fbc08008da\ndecorate(EditableField, {\n  editorOn: observable,\n});\n\nexport default observer(EditableField);\n"],"file":"EditableField.js"}