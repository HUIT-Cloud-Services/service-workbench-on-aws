{"version":3,"sources":["../../../../src/parts/helpers/fields/EditableNameValueRow.js"],"names":["EditableNameValueRow","props","handleEditClick","key","notifyHandler","onEnterEditMode","handleSubmit","form","onExitEditMode","rowKey","onSubmit","name","value","handleCancel","onCancel","handlerFn","handlerFnToNotify","_","noop","args","editorOn","nameField","$","valueField","onDelete","formContent","onClickEdit","onEditorOn","processing","submit","React","Component"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { action, runInAction } from 'mobx';\nimport { Icon, Table } from 'semantic-ui-react';\nimport { observer } from 'mobx-react';\nimport _ from 'lodash';\nimport { getNameValueForm } from '../../../models/forms/NameValueForm';\nimport EditableField from './EditableField';\nimport Input from './Input';\n\n// expected props\n// - rowKey (via props) -- The key to identify this row\n// - name (via props) -- The name in the { name, value } pair\n// - value (via props) -- The value in the { name, value } pair\n// - editorOn (via props) -- Flag indicating if the row should be displayed in\n//                            edit more or view mode (true - edit mode, false - view mode)\n// - onSubmit (via props) -- Function to call when save is clicked on the row\n// - onCancel (via props) -- Function to call when cancel is clicked on the row\n// - onDelete (via props) -- Function to call when delete is clicked on the row\n// - onEnterEditMode -- (optional) function to notify when row enters edit mode.\n//                      The function is passed the \"rowKey\" that is entering the edit mode.\n// - onExitEditMode -- (optional) function to notify when row exists edit mode. (due to clicking cancel or save).\n//                      The function is passed the \"rowKey\" that is entering the edit mode.\nclass EditableNameValueRow extends React.Component {\n  constructor(props) {\n    super(props);\n    runInAction(() => {\n      this.form = getNameValueForm({ name: props.name, value: props.value });\n      if (props.editorOn) {\n        this.handleEditClick();\n      }\n    });\n  }\n\n  render() {\n    const form = this.form;\n    const nameField = form.$('name');\n    const valueField = form.$('value');\n    const onDelete = this.props.onDelete;\n\n    return (\n      <EditableField\n        form={form}\n        showDimmer={false}\n        showErrorPanel={false}\n        renderFormAs={\n          // Do not want the EditableField to render a \"form\" tag so rendering\n          // the content of the form as is without the \"form\".\n          // This is done because the row is rendered inside table.body\n          // rendering form directly in the table body is invalid structure\n          formContent => <>{formContent}</>\n        }\n        editorOn={this.props.editorOn}\n        onSubmit={this.handleSubmit}\n        onCancel={this.handleCancel}\n        renderFieldForView={({ onEditorOn: onClickEdit }) => (\n          <Table.Row>\n            <Table.Cell>{this.props.name}</Table.Cell>\n            <Table.Cell>{this.props.value}</Table.Cell>\n            <Table.Cell>\n              <Icon\n                name=\"pencil\"\n                className=\"ml1 cursor-pointer\"\n                color=\"grey\"\n                onClick={() => {\n                  onClickEdit();\n                  this.handleEditClick(this.props.rowKey);\n                }}\n              />\n              <Icon name=\"trash\" className=\"ml1 cursor-pointer\" color=\"grey\" onClick={onDelete} />\n            </Table.Cell>\n          </Table.Row>\n        )}\n        renderFieldForEdit={({ processing, onSubmit: submit, onCancel }) => (\n          <Table.Row>\n            <Table.Cell>\n              <Input field={nameField} className=\"mb0\" showHeader={false} disabled={processing} />\n            </Table.Cell>\n            <Table.Cell>\n              <Input field={valueField} className=\"mb0\" showHeader={false} disabled={processing} />\n            </Table.Cell>\n            <Table.Cell>\n              <Icon name=\"close\" className=\"ml1 cursor-pointer\" color=\"grey\" onClick={onCancel} />\n              <Icon name=\"check\" className=\"ml1 cursor-pointer\" color=\"grey\" onClick={submit} />\n            </Table.Cell>\n          </Table.Row>\n        )}\n      />\n    );\n  }\n\n  handleEditClick = action(async key => {\n    await this.notifyHandler(this.props.onEnterEditMode, key);\n  });\n\n  handleSubmit = action(async form => {\n    await this.notifyHandler(this.props.onExitEditMode, this.props.rowKey);\n    await this.notifyHandler(this.props.onSubmit, form);\n    runInAction(() => {\n      this.form = getNameValueForm({ name: this.props.name, value: this.props.value });\n    });\n  });\n\n  handleCancel = action(async form => {\n    await this.notifyHandler(this.props.onExitEditMode, this.props.rowKey);\n    await this.notifyHandler(this.props.onCancel, form);\n    runInAction(() => {\n      this.form = getNameValueForm({ name: this.props.name, value: this.props.value });\n    });\n  });\n\n  notifyHandler = async (handlerFn, ...args) => {\n    const handlerFnToNotify = handlerFn || _.noop;\n    await handlerFnToNotify(...args);\n  };\n}\nexport default observer(EditableNameValueRow);\n"],"file":"EditableNameValueRow.js"}