{"version":3,"sources":["../../../../src/parts/helpers/fields/NameValuesEditor.js"],"names":["NameValuesEditor","onEnterEditMode","rowKey","hideShowAddRowButton","props","onExitEditMode","showAddRowButton","handleNameValueChange","rowIdx","nameValueForm","nameField","$","valueField","nameValues","name","value","syncField","handleNameValueDelete","splice","shouldShowAddRowButton","hideCreateRow","shouldShowCreateRow","showCreateRow","JSON","stringify","sync","field","fromKeyValueToNameValue","keyValue","key","keyValues","parse","_","map","nameHeader","isNil","valueHeader","actionHeader","rows","renderNameValueLine","length","push","form","isEmpty","emptyMessage","isFunction","emptyRenderer","React","Component","observable","action"],"mappings":"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","sourcesContent":["import React from 'react';\nimport _ from 'lodash';\nimport { observer } from 'mobx-react';\nimport { action, decorate, observable, runInAction } from 'mobx';\nimport { Button, Icon, Table } from 'semantic-ui-react';\n\nimport EditableNameValueRow from './EditableNameValueRow';\n\n// expected props\n// - field (via props) -- this is the mobx form field object. The field's value is a JSON string representation\n//   of the object in shape [{key,value}]\n// - nameHeader (via props) -- (optional) The label to display for the name column\n// - valueHeader (via props) -- (optional) The label to display for the value column\n// - actionHeader (via props) -- (optional) The label to display for the action column\n// - onEnterEditMode -- (optional) function to notify when row enters edit mode.\n//                      The function is passed the \"rowKey\" that is entering the edit mode.\n// - onExitEditMode -- (optional) function to notify when row exists edit mode. (due to clicking cancel or save).\n//                      The function is passed the \"rowKey\" that is entering the edit mode.\nclass NameValuesEditor extends React.Component {\n  componentDidMount() {\n    runInAction(() => {\n      // The value of this field as string\n      this.value = this.props.field.value || '[]';\n\n      // An array containing {key, value} or { name, value } objects\n      const fromKeyValueToNameValue = keyValue => {\n        const name = keyValue.key || keyValue.name;\n        return { name, value: keyValue.value };\n      };\n\n      // This object's JSON string representation is used as the value for this field.\n      const keyValues = JSON.parse(this.value || '[]') || [];\n      this.nameValues = _.map(keyValues, fromKeyValueToNameValue);\n\n      this.shouldShowAddRowButton = true;\n      this.shouldShowCreateRow = false;\n    });\n  }\n\n  render() {\n    const nameHeader = _.isNil(this.props.nameHeader) ? 'Name' : this.props.nameHeader;\n    const valueHeader = _.isNil(this.props.valueHeader) ? 'Value' : this.props.valueHeader;\n    const actionHeader = _.isNil(this.props.actionHeader) ? 'Action' : this.props.actionHeader;\n\n    const rows = _.map(this.nameValues, ({ name, value }, rowIdx) => this.renderNameValueLine({ rowIdx, name, value }));\n\n    if (this.shouldShowCreateRow) {\n      const rowIdx = this.nameValues.length;\n      rows.push(\n        <EditableNameValueRow\n          key={rowIdx}\n          name=\"\"\n          value=\"\"\n          editorOn\n          onSubmit={form => {\n            this.handleNameValueChange({ rowIdx, nameValueForm: form });\n          }}\n          onDelete={this.hideCreateRow}\n          onEnterEditMode={this.onEnterEditMode}\n          onExitEditMode={this.onExitEditMode}\n        />,\n      );\n    }\n    if (_.isEmpty(rows)) {\n      const emptyMessage = _.isFunction(this.props.emptyRenderer) ? (\n        this.props.emptyRenderer()\n      ) : (\n        <Table.Row key=\"empty-row\">\n          <Table.Cell colSpan={3}>No name/value pairs. Click + to add one.</Table.Cell>\n        </Table.Row>\n      );\n      rows.push(emptyMessage);\n    }\n    return (\n      <Table celled>\n        <Table.Header>\n          <Table.Row>\n            <Table.HeaderCell>{nameHeader}</Table.HeaderCell>\n            <Table.HeaderCell>{valueHeader}</Table.HeaderCell>\n            <Table.HeaderCell width={2}>{actionHeader}</Table.HeaderCell>\n          </Table.Row>\n        </Table.Header>\n        <Table.Body>{rows}</Table.Body>\n        <Table.Footer fullWidth>\n          <Table.Row>\n            {this.shouldShowAddRowButton && (\n              <Table.HeaderCell colSpan=\"3\">\n                <Button icon color=\"blue\" size=\"tiny\" className=\"ml1\" onClick={this.showCreateRow}>\n                  <Icon name=\"plus\" />\n                </Button>\n              </Table.HeaderCell>\n            )}\n            {!this.shouldShowAddRowButton && <Table.HeaderCell colSpan=\"3\" className=\"pb3\" />}\n          </Table.Row>\n        </Table.Footer>\n      </Table>\n    );\n  }\n\n  renderNameValueLine({ rowIdx, name, value }) {\n    return (\n      <EditableNameValueRow\n        key={rowIdx}\n        rowKey={rowIdx}\n        name={name}\n        value={value}\n        onSubmit={form => this.handleNameValueChange({ rowIdx, nameValueForm: form })}\n        onDelete={() => this.handleNameValueDelete({ rowIdx })}\n        onEnterEditMode={this.onEnterEditMode}\n        onExitEditMode={this.onExitEditMode}\n      />\n    );\n  }\n\n  onEnterEditMode = rowKey => {\n    this.hideShowAddRowButton();\n    const onEnterEditMode = this.props.onEnterEditMode;\n    if (onEnterEditMode) {\n      onEnterEditMode(rowKey);\n    }\n  };\n\n  onExitEditMode = rowKey => {\n    this.showAddRowButton();\n    const onExitEditMode = this.props.onExitEditMode;\n    if (onExitEditMode) {\n      onExitEditMode(rowKey);\n    }\n  };\n\n  handleNameValueChange = ({ rowIdx, nameValueForm }) => {\n    const nameField = nameValueForm.$('name');\n    const valueField = nameValueForm.$('value');\n    this.nameValues[rowIdx] = { name: nameField.value, value: valueField.value };\n    this.syncField();\n    this.showAddRowButton();\n  };\n\n  handleNameValueDelete = ({ rowIdx }) => {\n    this.nameValues.splice(rowIdx, 1);\n    this.syncField();\n  };\n\n  hideShowAddRowButton = () => {\n    this.shouldShowAddRowButton = false;\n  };\n\n  showAddRowButton = () => {\n    this.shouldShowAddRowButton = true;\n    this.hideCreateRow();\n  };\n\n  hideCreateRow = () => {\n    this.shouldShowCreateRow = false;\n  };\n\n  showCreateRow = () => {\n    this.shouldShowCreateRow = true;\n    this.hideShowAddRowButton();\n  };\n\n  syncField = () => {\n    // The nameValues is the JavaScript object representation of the specified field\n    // so convert it to value by stringifying it and then sync the given form field value\n    this.value = JSON.stringify(this.nameValues);\n    const sync = this.props.field.sync;\n    sync(this.value);\n  };\n}\n\n// see https://medium.com/@mweststrate/mobx-4-better-simpler-faster-smaller-c1fbc08008da\ndecorate(NameValuesEditor, {\n  nameValues: observable,\n  shouldShowAddRowButton: observable,\n  shouldShowCreateRow: observable,\n\n  hideShowAddRowButton: action,\n  showAddRowButton: action,\n  hideCreateRow: action,\n  showCreateRow: action,\n\n  handleNameValueChange: action,\n  handleNameValueDelete: action,\n});\n\nexport default observer(NameValuesEditor);\n"],"file":"NameValuesEditor.js"}