{"version":3,"sources":["../../src/plugins/initialization-plugin.js"],"names":["AUTHN_EXTENSION_POINT","init","payload","appContext","authentication","authenticationProviderPublicConfigsStore","pluginRegistry","load","getIdTokenInfo","tokenInfo","idToken","decodedIdToken","status","saveIdToken","setSelectedAuthenticationProviderId","iss","runPlugins","postInit","tokenNotExpired","_","get","userStore","isRootUser","user","plugin"],"mappings":";;;;;;;AAeA;;AAEA;;AACA;;;;;;;;;;;;;;AAEA,IAAMA,qBAAqB,GAAG,gBAA9B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;SACeC,I;;;AAoCf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;kEA3CA,iBAAoBC,OAApB,EAA6BC,UAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AACUC,YAAAA,cADV,GACuFD,UADvF,CACUC,cADV,EAC0BC,wCAD1B,GACuFF,UADvF,CAC0BE,wCAD1B,EACoEC,cADpE,GACuFH,UADvF,CACoEG,cADpE;AAAA;AAAA,mBAGQD,wCAAwC,CAACE,IAAzC,EAHR;;AAAA;AAAA;AAAA,mBAK0BH,cAAc,CAACI,cAAf,EAL1B;;AAAA;AAKQC,YAAAA,SALR;AAMEP,YAAAA,OAAO,CAACO,SAAR,qBAAyBP,OAAO,CAACO,SAAjC,MAA+CA,SAA/C;AAEQC,YAAAA,OARV,GAQsCD,SARtC,CAQUC,OARV,EAQmBC,cARnB,GAQsCF,SARtC,CAQmBE,cARnB;;AAAA,kBASMF,SAAS,CAACG,MAAV,KAAqB,YAT3B;AAAA;AAAA;AAAA;;AAUI,iCAAWF,OAAX,EAAoBC,cAApB;AACAP,YAAAA,cAAc,CAACS,WAAf,CAA2BH,OAA3B,EAXJ,CAYI;;AACAN,YAAAA,cAAc,CAACU,mCAAf,CAAmDH,cAAc,CAACI,GAAlE,EAbJ,CAeI;AACA;AACA;AACA;AACA;;AAnBJ;AAAA,mBAoBUT,cAAc,CAACU,UAAf,CAA0BhB,qBAA1B,EAAiD,eAAjD,CApBV;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,mBAgCUM,cAAc,CAACU,UAAf,CAA0BhB,qBAA1B,EAAiD,gBAAjD,CAhCV;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;SA4CeiB,Q;;;;;sEAAf,kBAAwBf,OAAxB,EAAiCC,UAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AACQe,YAAAA,eADR,GAC0BC,mBAAEC,GAAF,CAAMlB,OAAN,EAAe,kBAAf,MAAuC,YADjE;;AAAA,gBAEOgB,eAFP;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAEgC;AAExBG,YAAAA,SAJR,GAIoBlB,UAAU,CAACkB,SAJ/B;AAAA;AAAA,mBAKQA,SAAS,CAACd,IAAV,EALR;;AAAA;AAOQe,YAAAA,UAPR,GAOqBD,SAAS,CAACE,IAAV,CAAeD,UAPpC;;AAQE,gBAAIA,UAAJ,EAAgB;AACd,gDAAe,0EAAf;AACD;;AAVH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAaA,IAAME,MAAM,GAAG;AACbvB,EAAAA,IAAI,EAAJA,IADa;AAEbgB,EAAAA,QAAQ,EAARA;AAFa,CAAf;eAKeO,M","sourcesContent":["/*\n *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\").\n *  You may not use this file except in compliance with the License.\n *  A copy of the License is located at\n *\n *  http://aws.amazon.com/apache2.0\n *\n *  or in the \"license\" file accompanying this file. This file is distributed\n *  on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n *  express or implied. See the License for the specific language governing\n *  permissions and limitations under the License.\n */\n\nimport _ from 'lodash';\n\nimport { setIdToken } from '../helpers/api';\nimport { displayWarning } from '../helpers/notification';\n\nconst AUTHN_EXTENSION_POINT = 'authentication';\n\n/**\n * This is where we run the initialization logic that is common across any type of applications.\n *\n * @param payload A free form object. This function makes a property named 'tokenInfo' available on this payload object.\n * @param appContext An application context object containing various Mobx Stores, Models etc.\n *\n * @returns {Promise<void>}\n */\nasync function init(payload, appContext) {\n  const { authentication, authenticationProviderPublicConfigsStore, pluginRegistry } = appContext;\n\n  await authenticationProviderPublicConfigsStore.load();\n\n  const tokenInfo = await authentication.getIdTokenInfo();\n  payload.tokenInfo = { ...payload.tokenInfo, ...tokenInfo };\n\n  const { idToken, decodedIdToken } = tokenInfo;\n  if (tokenInfo.status === 'notExpired') {\n    setIdToken(idToken, decodedIdToken);\n    authentication.saveIdToken(idToken);\n    // Set selected authentication provider. This is used during logout\n    authentication.setSelectedAuthenticationProviderId(decodedIdToken.iss);\n\n    // Notify each authentication plugins's 'loginDetected' method since we detected that the user is logged in\n    // (i.e., we have active token).\n    // Note that we are not passing \"explicitLogin: true\" or \"explicitLogin: false\"\n    // because we can't determine for sure if this was an explicit login (i.e., the user logged in by clicking login button)\n    // or we have access to the token from memory or local store because the user had logged in the past\n    await pluginRegistry.runPlugins(AUTHN_EXTENSION_POINT, 'loginDetected');\n  } else {\n    // Treat all other cases such as\n    //  - if the token was not found (i.e., tokenInfo.status === 'notFound') or\n    //  - if the token was corrupted (i.e., tokenInfo.status === 'corrupted') or\n    //  - if the token was expired (i.e., tokenInfo.status === 'expired') etc as NOT-logged in.\n    // Currently the application treats \"not logged in detected\" as same as \"logout detected\" so notify all\n    // authentication plugins of 'logoutDetected'\n    // Note that we are not passing \"explicitLogout: true\" or \"explicitLogout: false\"\n    // because we can't determine for sure if this was an explicit logout or implicit (i.e., we could not find active token)\n    // Same way we are not passing 'autoLogout' flag because we can't determine for sure if this was an explicit logout\n    // by user or application code due to as auto-logout (e.g., due to user inactivity)\n    await pluginRegistry.runPlugins(AUTHN_EXTENSION_POINT, 'logoutDetected');\n  }\n}\n\n/**\n * This is where we run the post initialization logic that is common across any type of applications.\n *\n * @param payload A free form object. This function expects a property named 'tokenInfo' to be available on the payload object.\n * @param appContext An application context object containing various Mobx Stores, Models etc.\n *\n * @returns {Promise<void>}\n */\nasync function postInit(payload, appContext) {\n  const tokenNotExpired = _.get(payload, 'tokenInfo.status') === 'notExpired';\n  if (!tokenNotExpired) return; // Continue only if we have a token that is not expired\n\n  const userStore = appContext.userStore;\n  await userStore.load();\n\n  const isRootUser = userStore.user.isRootUser;\n  if (isRootUser) {\n    displayWarning('You have logged in as root user. Logging in as root user is discouraged.');\n  }\n}\n\nconst plugin = {\n  init,\n  postInit,\n};\n\nexport default plugin;\n"],"file":"initialization-plugin.js"}