{"version":3,"sources":["../../../../src/parts/accounts/__tests__/CreateAwsAccount.test.js"],"names":["usersStore","asDropDownOptions","key","value","text","awsAccountsStore","createAwsAccount","jest","fn","dropdownOptions","describe","component","wrapper","beforeEach","instance","it","awsAccount","accountName","accountEmail","masterRoleArn","externalId","description","handleSubmit","expect","toHaveBeenCalledWith","not","toHaveBeenCalled","validationErrors","errors","toBeDefined","fieldsWithError","Object","keys","toEqual","arrayContaining"],"mappings":";;AAeA;;AACA;;AACA;;;;;;;;AAEA,IAAMA,UAAU,GAAG;AACjBC,EAAAA,iBAAiB,EAAE;AAAA,WAAM,CACvB;AACEC,MAAAA,GAAG,EAAE,SADP;AAEEC,MAAAA,KAAK,EAAE,SAFT;AAGEC,MAAAA,IAAI,EAAE;AAHR,KADuB,CAAN;AAAA;AADF,CAAnB;AAUA,IAAMC,gBAAgB,GAAG;AACvBC,EAAAA,gBAAgB,EAAEC,IAAI,CAACC,EAAL,EADK;AAEvBC,EAAAA,eAAe,EAAE,CACf;AACEP,IAAAA,GAAG,EAAE,GADP;AAEEC,IAAAA,KAAK,EAAE,KAFT;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADe;AAFM,CAAzB;AAWAM,QAAQ,CAAC,kBAAD,EAAqB,YAAM;AACjC,MAAIC,SAAS,GAAG,IAAhB;AACA,MAAIC,OAAO,GAAG,IAAd;AAEAC,EAAAA,UAAU,CAAC,YAAM;AACf;AACAD,IAAAA,OAAO,GAAG,mCACR,gCAAC,4BAAD,CAAkB,gBAAlB;AAAmC,MAAA,UAAU,EAAEZ,UAA/C;AAA2D,MAAA,gBAAgB,EAAEK;AAA7E,MADQ,CAAV,CAFe,CAMf;;AACAM,IAAAA,SAAS,GAAGC,OAAO,CAACE,QAAR,EAAZ,CAPe,CASf;;AACAH,IAAAA,SAAS,QAAT,GAAiBJ,IAAI,CAACC,EAAL,EAAjB;AACAH,IAAAA,gBAAgB,CAACC,gBAAjB,GAAoCC,IAAI,CAACC,EAAL,EAApC;AACD,GAZS,CAAV;AAcAO,EAAAA,EAAE,CAAC,6DAAD,uEAAgE;AAAA;AAAA;AAAA;AAAA;AAChE;AACAJ,YAAAA,SAAS,CAACK,UAAV,GAAuB;AACrBC,cAAAA,WAAW,EAAE,0BADQ;AAErBC,cAAAA,YAAY,EAAE,kBAFO;AAGrBC,cAAAA,aAAa,EAAE,uCAHM;AAIrBC,cAAAA,UAAU,EAAE,KAJS;AAKrBC,cAAAA,WAAW,EAAE;AALQ,aAAvB,CAFgE,CAUhE;;AAVgE;AAAA,mBAW1DV,SAAS,CAACW,YAAV,EAX0D;;AAAA;AAahE;AACAC,YAAAA,MAAM,CAAClB,gBAAgB,CAACC,gBAAlB,CAAN,CAA0CkB,oBAA1C,CAA+Db,SAAS,CAACK,UAAzE,EAdgE,CAehE;;AACAO,YAAAA,MAAM,CAACZ,SAAS,QAAV,CAAN,CAAuBa,oBAAvB,CAA4C,WAA5C;;AAhBgE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAhE,GAAF;AAmBAT,EAAAA,EAAE,CAAC,kEAAD,uEAAqE;AAAA;AAAA;AAAA;AAAA;AAAA;AACrE;AACAJ,YAAAA,SAAS,CAACK,UAAV,GAAuB,EAAvB,CAFqE,CAIrE;;AAJqE;AAAA,mBAK/DL,SAAS,CAACW,YAAV,EAL+D;;AAAA;AAOrE;AACAC,YAAAA,MAAM,CAAClB,gBAAgB,CAACC,gBAAlB,CAAN,CAA0CmB,GAA1C,CAA8CC,gBAA9C,GARqE,CAUrE;;AACAH,YAAAA,MAAM,CAACZ,SAAS,CAACgB,gBAAV,CAA2BC,MAA5B,CAAN,CAA0CC,WAA1C;AACMC,YAAAA,eAZ+D,GAY7CC,MAAM,CAACC,IAAP,CAAYrB,SAAS,CAACgB,gBAAV,CAA2BC,MAAvC,CAZ6C;AAarEL,YAAAA,MAAM,CAACO,eAAD,CAAN,CAAwBG,OAAxB,CACEV,MAAM,CAACW,eAAP,CAAuB,CAAC,aAAD,EAAgB,cAAhB,EAAgC,eAAhC,EAAiD,YAAjD,EAA+D,aAA/D,CAAvB,CADF;;AAbqE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAArE,GAAF;AAiBD,CAtDO,CAAR","sourcesContent":["/*\n *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\").\n *  You may not use this file except in compliance with the License.\n *  A copy of the License is located at\n *\n *  http://aws.amazon.com/apache2.0\n *\n *  or in the \"license\" file accompanying this file. This file is distributed\n *  on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n *  express or implied. See the License for the specific language governing\n *  permissions and limitations under the License.\n */\n\nimport React from 'react';\nimport { shallow } from 'enzyme';\nimport CreateAwsAccount from '../CreateAwsAccount';\n\nconst usersStore = {\n  asDropDownOptions: () => [\n    {\n      key: 'userABC',\n      value: 'userABC',\n      text: 'Dr. John Doe',\n    },\n  ],\n};\n\nconst awsAccountsStore = {\n  createAwsAccount: jest.fn(),\n  dropdownOptions: [\n    {\n      key: '1',\n      value: '123',\n      text: 'Index 123',\n    },\n  ],\n};\n\ndescribe('CreateAwsAccount', () => {\n  let component = null;\n  let wrapper = null;\n\n  beforeEach(() => {\n    // Render CreateAwsAccount component\n    wrapper = shallow(\n      <CreateAwsAccount.WrappedComponent usersStore={usersStore} awsAccountsStore={awsAccountsStore} />,\n    );\n\n    // Get instance of the component\n    component = wrapper.instance();\n\n    // Mock goto function\n    component.goto = jest.fn();\n    awsAccountsStore.createAwsAccount = jest.fn();\n  });\n\n  it('should create an AWS account if all information is provided', async () => {\n    // Set all fields to valid values\n    component.awsAccount = {\n      accountName: 'MyResearchProjectAccount',\n      accountEmail: 'user@example.com',\n      masterRoleArn: 'arn:aws:iam::111111111111:role/MyRole',\n      externalId: '123',\n      description: 'This is my research project account',\n    };\n\n    // Submit form\n    await component.handleSubmit();\n\n    // Verify account gets created\n    expect(awsAccountsStore.createAwsAccount).toHaveBeenCalledWith(component.awsAccount);\n    // And user gets redirected to the accounts page\n    expect(component.goto).toHaveBeenCalledWith('/accounts');\n  });\n\n  it('should not create an account if required fields are not provided', async () => {\n    // Set invalid values (i.e. user leaves the form empty)\n    component.awsAccount = {};\n\n    // Submit form\n    await component.handleSubmit();\n\n    // Should not create account and errors should be displayed\n    expect(awsAccountsStore.createAwsAccount).not.toHaveBeenCalled();\n\n    // Verify errors are set\n    expect(component.validationErrors.errors).toBeDefined();\n    const fieldsWithError = Object.keys(component.validationErrors.errors);\n    expect(fieldsWithError).toEqual(\n      expect.arrayContaining(['accountName', 'accountEmail', 'masterRoleArn', 'externalId', 'description']),\n    );\n  });\n});\n"],"file":"CreateAwsAccount.test.js"}