{"version":3,"sources":["../../../../src/parts/accounts/__tests__/AddIndex.test.js"],"names":["usersStore","asDropDownOptions","key","value","text","awsAccountsStore","dropdownOptions","indexesStore","addIndex","jest","fn","describe","component","wrapper","beforeEach","instance","it","index","id","description","handleSubmit","errors","validationErrors","expect","awsAccountId","toBeDefined","toContain","setState","not","toHaveBeenCalled","toHaveBeenCalledWith"],"mappings":";;AAeA;;AACA;;AACA;;;;;;;;AAEA,IAAMA,UAAU,GAAG;AACjBC,EAAAA,iBAAiB,EAAE;AAAA,WAAM,CACvB;AACEC,MAAAA,GAAG,EAAE,SADP;AAEEC,MAAAA,KAAK,EAAE,SAFT;AAGEC,MAAAA,IAAI,EAAE;AAHR,KADuB,CAAN;AAAA;AADF,CAAnB;AAUA,IAAMC,gBAAgB,GAAG;AACvBC,EAAAA,eAAe,EAAE,CACf;AACEJ,IAAAA,GAAG,EAAE,GADP;AAEEC,IAAAA,KAAK,EAAE,KAFT;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADe;AADM,CAAzB;AAUA,IAAMG,YAAY,GAAG;AACnBC,EAAAA,QAAQ,EAAEC,IAAI,CAACC,EAAL;AADS,CAArB;AAIAC,QAAQ,CAAC,UAAD,EAAa,YAAM;AACzB,MAAIC,SAAS,GAAG,IAAhB;AACA,MAAIC,OAAO,GAAG,IAAd;AACAC,EAAAA,UAAU,CAAC,YAAM;AACf;AACAD,IAAAA,OAAO,GAAG,mCACR,gCAAC,oBAAD,CAAU,gBAAV;AACE,MAAA,YAAY,EAAEN,YADhB;AAEE,MAAA,UAAU,EAAEP,UAFd;AAGE,MAAA,gBAAgB,EAAEK;AAHpB,MADQ,CAAV,CAFe,CAUf;;AACAO,IAAAA,SAAS,GAAGC,OAAO,CAACE,QAAR,EAAZ,CAXe,CAaf;;AACAH,IAAAA,SAAS,QAAT,GAAiBH,IAAI,CAACC,EAAL,EAAjB;AACD,GAfS,CAAV;AAiBAM,EAAAA,EAAE,CAAC,kDAAD,uEAAqD;AAAA;AAAA;AAAA;AAAA;AAAA;AACrD;AACAJ,YAAAA,SAAS,CAACK,KAAV,CAAgBC,EAAhB,GAAqB,WAArB;AACAN,YAAAA,SAAS,CAACK,KAAV,CAAgBE,WAAhB,GAA8B,2BAA9B,CAHqD,CAKrD;;AALqD;AAAA,mBAM/CP,SAAS,CAACQ,YAAV,EAN+C;;AAAA;AAQrD;AACMC,YAAAA,MAT+C,GAStCT,SAAS,CAACU,gBAAV,CAA2BD,MATW;AAUrDE,YAAAA,MAAM,CAACF,MAAM,CAACG,YAAR,CAAN,CAA4BC,WAA5B;AACAF,YAAAA,MAAM,CAACF,MAAM,CAACG,YAAR,CAAN,CAA4BE,SAA5B,CAAsC,qCAAtC;;AAXqD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAArD,GAAF;AAcAV,EAAAA,EAAE,CAAC,mDAAD,uEAAsD;AAAA;AAAA;AAAA;AAAA;AACtD;AACAJ,YAAAA,SAAS,CAACK,KAAV,CAAgBC,EAAhB,GAAqB,WAArB;AACAN,YAAAA,SAAS,CAACK,KAAV,CAAgBE,WAAhB,GAA8B,2BAA9B,CAHsD,CAKtD;;AACAN,YAAAA,OAAO,CAACc,QAAR,CAAiB;AAAEH,cAAAA,YAAY,EAAE;AAAhB,aAAjB,EANsD,CAQtD;;AARsD;AAAA,mBAShDZ,SAAS,CAACQ,YAAV,EATgD;;AAAA;AAWtD;AACAG,YAAAA,MAAM,CAACX,SAAS,CAACU,gBAAV,CAA2BD,MAA5B,CAAN,CAA0CO,GAA1C,CAA8CH,WAA9C;AACAF,YAAAA,MAAM,CAAChB,YAAY,CAACC,QAAd,CAAN,CAA8BqB,gBAA9B;AACAN,YAAAA,MAAM,CAACX,SAAS,QAAV,CAAN,CAAuBkB,oBAAvB,CAA4C,WAA5C;;AAdsD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAtD,GAAF;AAgBD,CAlDO,CAAR","sourcesContent":["/*\n *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\").\n *  You may not use this file except in compliance with the License.\n *  A copy of the License is located at\n *\n *  http://aws.amazon.com/apache2.0\n *\n *  or in the \"license\" file accompanying this file. This file is distributed\n *  on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n *  express or implied. See the License for the specific language governing\n *  permissions and limitations under the License.\n */\n\nimport React from 'react';\nimport { shallow } from 'enzyme';\nimport AddIndex from '../AddIndex';\n\nconst usersStore = {\n  asDropDownOptions: () => [\n    {\n      key: 'userABC',\n      value: 'userABC',\n      text: 'Dr. John Doe',\n    },\n  ],\n};\n\nconst awsAccountsStore = {\n  dropdownOptions: [\n    {\n      key: '1',\n      value: '123',\n      text: 'Index 123',\n    },\n  ],\n};\n\nconst indexesStore = {\n  addIndex: jest.fn(),\n};\n\ndescribe('AddIndex', () => {\n  let component = null;\n  let wrapper = null;\n  beforeEach(() => {\n    // Render AddIndex component\n    wrapper = shallow(\n      <AddIndex.WrappedComponent\n        indexesStore={indexesStore}\n        usersStore={usersStore}\n        awsAccountsStore={awsAccountsStore}\n      />,\n    );\n\n    // Get instance of the component\n    component = wrapper.instance();\n\n    // Mock goto function\n    component.goto = jest.fn();\n  });\n\n  it('should give an error if accountId is not present', async () => {\n    // Set index attributes, except awsAccountId\n    component.index.id = 'index-123';\n    component.index.description = 'Some relevant description';\n\n    // Submit form\n    await component.handleSubmit();\n\n    // Verify an error is displayed\n    const errors = component.validationErrors.errors;\n    expect(errors.awsAccountId).toBeDefined();\n    expect(errors.awsAccountId).toContain('The awsAccountId field is required.');\n  });\n\n  it('should not give an error if accountId is provided', async () => {\n    // Set index attributes\n    component.index.id = 'index-123';\n    component.index.description = 'Some relevant description';\n\n    // Also set indexId, which is in the component state for some reason\n    wrapper.setState({ awsAccountId: 'abc' });\n\n    // Submit form\n    await component.handleSubmit();\n\n    // Verify addIndex gets invoked\n    expect(component.validationErrors.errors).not.toBeDefined();\n    expect(indexesStore.addIndex).toHaveBeenCalled();\n    expect(component.goto).toHaveBeenCalledWith('/accounts');\n  });\n});\n"],"file":"AddIndex.test.js"}