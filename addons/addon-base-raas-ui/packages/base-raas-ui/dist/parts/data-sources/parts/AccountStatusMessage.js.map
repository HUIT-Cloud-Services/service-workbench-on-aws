{"version":3,"sources":["../../../../src/parts/data-sources/parts/AccountStatusMessage.js"],"names":["AccountStatusMessage","props","handleExpand","expanded","handleCancel","_","isFunction","onCancel","renderAvailable","renderPending","renderError","account","reachableState","expandText","msg","statusMessageInfo","message","hasMsg","isEmpty","id","pendingState","renderTips","errorState","mainRegion","React","Component","computed","observable","action"],"mappings":"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","sourcesContent":["/*\n *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\").\n *  You may not use this file except in compliance with the License.\n *  A copy of the License is located at\n *\n *  http://aws.amazon.com/apache2.0\n *\n *  or in the \"license\" file accompanying this file. This file is distributed\n *  on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n *  express or implied. See the License for the specific language governing\n *  permissions and limitations under the License.\n */\n\nimport _ from 'lodash';\nimport React from 'react';\nimport { decorate, computed, runInAction, observable, action } from 'mobx';\nimport { observer, inject } from 'mobx-react';\nimport { withRouter } from 'react-router-dom';\nimport { Message } from 'semantic-ui-react';\n\n// expected props\n// - account (via props)\n// - onCancel (via props) a call back function when the user clicks on Done\nclass AccountStatusMessage extends React.Component {\n  constructor(props) {\n    super(props);\n    runInAction(() => {\n      this.expanded = false;\n    });\n  }\n\n  get account() {\n    return this.props.account;\n  }\n\n  handleExpand = () => {\n    this.expanded = !this.expanded;\n  };\n\n  handleCancel = () => {\n    if (!_.isFunction(this.props.onCancel)) return;\n    this.props.onCancel();\n  };\n\n  render() {\n    return (\n      <div className=\"mt2 mb2 animated fadeIn\">\n        {this.renderAvailable()}\n        {this.renderPending()}\n        {this.renderError()}\n      </div>\n    );\n  }\n\n  renderAvailable() {\n    const account = this.account;\n\n    if (!account.reachableState) return null;\n    const expanded = this.expanded;\n    const expandText = expanded ? 'less' : 'more';\n    const msg = account.statusMessageInfo.message;\n    const hasMsg = !_.isEmpty(msg);\n\n    if (!hasMsg) {\n      return (\n        <Message positive onDismiss={this.handleCancel}>\n          <Message.Header>Available</Message.Header>\n          <p>The account is reachable and available for use.</p>\n        </Message>\n      );\n    }\n\n    return (\n      <Message warning>\n        <Message.Header>Available</Message.Header>\n        <p>\n          The account is reachable but only partially configured. Some studies might be inaccessible.\n          <span className=\"underline ml1 cursor-pointer\" onClick={this.handleExpand}>\n            {expandText}\n          </span>\n        </p>\n        {expanded && (\n          <>\n            <p>\n              This is usually an indication that the CloudFormation stack that is deployed to AWS account #{account.id}{' '}\n              is out of sync with the CloudFormation template generated by the SWB application.\n            </p>\n            <p>{msg}</p>\n          </>\n        )}\n      </Message>\n    );\n  }\n\n  renderPending() {\n    const account = this.account;\n    const expanded = this.expanded;\n    const expandText = expanded ? 'less' : 'more';\n    const msg = account.statusMessageInfo.message;\n\n    if (!account.pendingState) return null;\n\n    return (\n      <Message warning>\n        <Message.Header>Not available yet</Message.Header>\n        <p>\n          The account is in the process of being connected with the application. It is unreachable until the\n          CloudFormation stack is successfully deploy.\n          <span className=\"underline ml1 cursor-pointer\" onClick={this.handleExpand}>\n            {expandText}\n          </span>\n        </p>\n        {expanded && (\n          <div className=\"mt2 animated fadeIn\">\n            <Message.Header>CloudFormation stack already deployed?</Message.Header>\n            {this.renderTips()}\n          </div>\n        )}\n        {expanded && !_.isEmpty(msg) && (\n          <div className=\"mt2\">\n            <Message.Header>Message received from the server</Message.Header>\n            <p>{msg}</p>\n          </div>\n        )}\n      </Message>\n    );\n  }\n\n  renderError() {\n    const account = this.account;\n    const expanded = this.expanded;\n    const expandText = expanded ? 'less' : 'more';\n    const msg = account.statusMessageInfo.message;\n\n    if (!account.errorState) return null;\n\n    return (\n      <Message negative>\n        <Message.Header>Not available</Message.Header>\n        <p>\n          The account is unreachable. This is usually an indication of a problem during the CloudFormation stack\n          deployment.\n          <span className=\"underline ml1 cursor-pointer\" onClick={this.handleExpand}>\n            {expandText}\n          </span>\n        </p>\n        {expanded && this.renderTips()}\n        {expanded && !_.isEmpty(msg) && (\n          <div className=\"mt2\">\n            <Message.Header>Message received from the server</Message.Header>\n            <p>{msg}</p>\n          </div>\n        )}\n      </Message>\n    );\n  }\n\n  renderTips() {\n    const account = this.account;\n    return (\n      <Message.List>\n        <Message.Item>\n          Check if the CloudFormation stack is deployed in the correct AWS account #{account.id}\n        </Message.Item>\n        <Message.Item>\n          Check if the CloudFormation stack is deployed in the correct AWS region &apos;{account.mainRegion}&apos;\n        </Message.Item>\n        <Message.Item>Try the connection check test again</Message.Item>\n      </Message.List>\n    );\n  }\n}\n\n// see https://medium.com/@mweststrate/mobx-4-better-simpler-faster-smaller-c1fbc08008da\ndecorate(AccountStatusMessage, {\n  account: computed,\n  expanded: observable,\n  handleExpand: action,\n  handleCancel: action,\n});\n\nexport default inject()(withRouter(observer(AccountStatusMessage)));\n"],"file":"AccountStatusMessage.js"}