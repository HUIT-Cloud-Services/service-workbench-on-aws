{"version":3,"sources":["../../../src/parts/data-sources/DataSourceAccountsList.js"],"names":["DataSourceAccountsList","handleRegisterStudies","event","preventDefault","stopPropagation","goto","window","scrollTo","store","accountsStore","load","startHeartbeat","envsStore","content","error","renderEmpty","renderMain","renderTitle","list","_","map","item","id","renderTotal","total","props","dataSourceAccountsStore","React","Component","computed","action"],"mappings":"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","sourcesContent":["import React from 'react';\nimport _ from 'lodash';\nimport { decorate, computed, action } from 'mobx';\nimport { observer, inject } from 'mobx-react';\nimport { withRouter } from 'react-router-dom';\nimport { Container, Segment, Header, Icon, Button, Label } from 'semantic-ui-react';\n\nimport { gotoFn } from '@aws-ee/base-ui/dist/helpers/routing';\nimport { swallowError } from '@aws-ee/base-ui/dist/helpers/utils';\nimport {\n  isStoreReady,\n  isStoreLoading,\n  isStoreEmpty,\n  isStoreNotEmpty,\n  isStoreError,\n  stopHeartbeat,\n} from '@aws-ee/base-ui/dist/models/BaseStore';\nimport ErrorBox from '@aws-ee/base-ui/dist/parts/helpers/ErrorBox';\nimport ProgressPlaceHolder from '@aws-ee/base-ui/dist/parts/helpers/BasicProgressPlaceholder';\n\nimport DataSourceAccountCard from './DataSourceAccountCard';\n\n// expected props\n// - dataSourceAccountsStore (via injection)\nclass DataSourceAccountsList extends React.Component {\n  componentDidMount() {\n    window.scrollTo(0, 0);\n    const store = this.accountsStore;\n    if (!isStoreReady(store)) {\n      swallowError(store.load());\n    }\n    store.startHeartbeat();\n  }\n\n  componentWillUnmount() {\n    const store = this.envsStore;\n    stopHeartbeat(store);\n  }\n\n  get accountsStore() {\n    return this.props.dataSourceAccountsStore;\n  }\n\n  handleRegisterStudies = event => {\n    event.preventDefault();\n    event.stopPropagation();\n\n    const goto = gotoFn(this);\n    goto(`/data-sources/register`);\n  };\n\n  render() {\n    const store = this.accountsStore;\n    let content = null;\n\n    if (isStoreError(store)) {\n      content = <ErrorBox error={store.error} className=\"p0\" />;\n    } else if (isStoreLoading(store)) {\n      content = <ProgressPlaceHolder segmentCount={2} />;\n    } else if (isStoreEmpty(store)) {\n      content = this.renderEmpty();\n    } else if (isStoreNotEmpty(store)) {\n      content = this.renderMain();\n    } else {\n      content = null;\n    }\n\n    return (\n      <Container className=\"mt3 animated fadeIn\">\n        {this.renderTitle()}\n        {content}\n      </Container>\n    );\n  }\n\n  renderMain() {\n    const store = this.accountsStore;\n    const list = store.list;\n\n    return (\n      <>\n        {_.map(list, item => (\n          <Segment className=\"pr3 pl3 pb3 pt1 mb3\" clearing key={item.id}>\n            <DataSourceAccountCard account={item} />\n          </Segment>\n        ))}\n      </>\n    );\n  }\n\n  renderEmpty() {\n    return (\n      <Segment data-testid=\"data-sources-accounts\" placeholder>\n        <Header icon className=\"color-grey\">\n          <Icon name=\"database\" />\n          No data sources\n          <Header.Subheader>To create a data source, click Register Studies.</Header.Subheader>\n        </Header>\n      </Segment>\n    );\n  }\n\n  renderTitle() {\n    return (\n      <div className=\"mb3 flex\">\n        <Header as=\"h3\" className=\"color-grey mt1 mb0 flex-auto\">\n          <Icon name=\"database\" className=\"align-top\" />\n          <Header.Content className=\"left-align\">Data Sources {this.renderTotal()}</Header.Content>\n        </Header>\n        <div>\n          <Button data-testid=\"register-data-studies\" color=\"blue\" size=\"medium\" onClick={this.handleRegisterStudies}>\n            Register Studies\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  renderTotal() {\n    const store = this.accountsStore;\n    if (isStoreError(store) || isStoreLoading(store)) return null;\n\n    return <Label circular>{store.total}</Label>;\n  }\n}\n\n// see https://medium.com/@mweststrate/mobx-4-better-simpler-faster-smaller-c1fbc08008da\ndecorate(DataSourceAccountsList, {\n  accountsStore: computed,\n  handleRegisterStudies: action,\n});\n\nexport default inject('dataSourceAccountsStore')(withRouter(observer(DataSourceAccountsList)));\n"],"file":"DataSourceAccountsList.js"}