{"version":3,"sources":["../../../src/parts/studies/UploadStudyFiles.js"],"names":["UploadStudyFiles","props","modalOpen","fileUploadHandler","bind","fileUpload","file","getFile","Error","studyId","name","presignResult","uploadRequest","errMessage","console","error","uploadHandle","url","fields","setCancel","cancel","onProgress","updateProgress","done","renderTrigger","React","Component","observable"],"mappings":";;;;;;;;;AAeA;;AACA;;AACA;;AACA;;AAEA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;AACA;IACMA,gB;;;;;AACJ,4BAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,8BAAMA,KAAN;AACA,2BAAY,YAAM;AAChB,YAAKC,SAAL,GAAiB,KAAjB;AACD,KAFD;AAGA,UAAKC,iBAAL,GAAyB,MAAKA,iBAAL,CAAuBC,IAAvB,+BAAzB;AALiB;AAMlB;;;;;wGAEuBC,U;;;;;;;AAChBC,gBAAAA,I,GAAOD,UAAU,CAACE,OAAX,E;;oBACRD,I;;;;;sBACG,IAAIE,KAAJ,CAAU,SAAV,C;;;;;uBAMsB,0CAAgC,KAAKP,KAAL,CAAWQ,OAA3C,EAAoDJ,UAAU,CAACK,IAA/D,C;;;AAAtBC,gBAAAA,a;AACNC,gBAAAA,aAAa,GAAGD,aAAa,CAACN,UAAU,CAACK,IAAZ,CAA7B;;;;;;;AAEMG,gBAAAA,U,GAAa,4C;AACnBC,gBAAAA,OAAO,CAACC,KAAR,WAAiBF,UAAjB;sBACM,IAAIL,KAAJ,CAAUK,UAAV,C;;;oBAGHD,a;;;;;sBACG,IAAIJ,KAAJ,CAAU,oCAAV,C;;;AAGR;AACMQ,gBAAAA,Y,GAAe,2BAAOV,IAAP,EAAaM,aAAa,CAACK,GAA3B,EAAgCL,aAAa,CAACM,MAA9C,C;AACrBb,gBAAAA,UAAU,CAACc,SAAX,CAAqBH,YAAY,CAACI,MAAlC;AACAJ,gBAAAA,YAAY,CAACK,UAAb,CAAwBhB,UAAU,CAACiB,cAAnC;;;uBAGQN,YAAY,CAACO,I;;;;;;;;;AAEbV,gBAAAA,W,GAAa,wC;AACnBC,gBAAAA,OAAO,CAACC,KAAR,WAAiBF,WAAjB;sBACM,IAAIL,KAAJ,CAAUK,WAAV,C;;;;;;;;;;;;;;;;;;6BAID;AAAA;;AACP,0BACE,gCAAC,sBAAD;AACE,QAAA,SAAS,MADX;AAEE,QAAA,OAAO,EAAE,KAAKW,aAAL,EAFX;AAGE,QAAA,IAAI,EAAE,KAAKtB,SAHb;AAIE,QAAA,OAAO,EAAE,kBAAO,YAAM;AACpB,UAAA,MAAI,CAACA,SAAL,GAAiB,KAAjB;AACD,SAFQ;AAJX,sBAQE;AAAK,QAAA,SAAS,EAAC;AAAf,sBACE,gCAAC,uBAAD;AAAQ,QAAA,EAAE,EAAC,IAAX;AAAgB,QAAA,IAAI,MAApB;AAAqB,QAAA,SAAS,EAAC,QAA/B;AAAwC,QAAA,SAAS,EAAC,KAAlD;AAAwD,QAAA,KAAK,EAAC;AAA9D,8BADF,eAIE;AAAK,QAAA,SAAS,EAAC;AAAf,sBACE,gCAAC,sBAAD;AAAY,QAAA,UAAU,EAAE,KAAKD,KAAL,CAAWQ,OAAnC;AAA4C,QAAA,iBAAiB,EAAE,KAAKN;AAApE,QADF,CAJF,CARF,CADF;AAmBD;;;oCAEe;AAAA;;AACd,0BACE,gCAAC,uBAAD;AACE,QAAA,OAAO,EAAC,OADV;AAEE,QAAA,KAAK,EAAC,MAFR;AAGE,QAAA,KAAK,MAHP;AAIE,QAAA,OAAO,EAAE,kBAAO,YAAM;AACpB,UAAA,MAAI,CAACD,SAAL,GAAiB,IAAjB;AACD,SAFQ;AAJX,wBADF;AAYD;;;;EA/E4BuB,kBAAMC,S;;AAkFrC,oBAAS1B,gBAAT,EAA2B;AACzBE,EAAAA,SAAS,EAAEyB;AADc,CAA3B;;eAIe,yBAAS3B,gBAAT,C","sourcesContent":["/*\n *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\").\n *  You may not use this file except in compliance with the License.\n *  A copy of the License is located at\n *\n *  http://aws.amazon.com/apache2.0\n *\n *  or in the \"license\" file accompanying this file. This file is distributed\n *  on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n *  express or implied. See the License for the specific language governing\n *  permissions and limitations under the License.\n */\n\nimport React from 'react';\nimport { observer } from 'mobx-react';\nimport { action, decorate, observable, runInAction } from 'mobx';\nimport { Button, Header, Modal } from 'semantic-ui-react';\n\nimport FileUpload from '../files/FileUpload';\nimport { getPresignedStudyUploadRequests } from '../../helpers/api';\nimport upload from '../../helpers/xhr-upload';\n\n// expected props\n// - studyId\nclass UploadStudyFiles extends React.Component {\n  constructor(props) {\n    super(props);\n    runInAction(() => {\n      this.modalOpen = false;\n    });\n    this.fileUploadHandler = this.fileUploadHandler.bind(this);\n  }\n\n  async fileUploadHandler(fileUpload) {\n    const file = fileUpload.getFile();\n    if (!file) {\n      throw new Error('No file');\n    }\n\n    // Get presigned POST request\n    let uploadRequest;\n    try {\n      const presignResult = await getPresignedStudyUploadRequests(this.props.studyId, fileUpload.name);\n      uploadRequest = presignResult[fileUpload.name];\n    } catch (error) {\n      const errMessage = 'Error occurred obtaining presigned request';\n      console.error(`${errMessage}:`, error);\n      throw new Error(errMessage);\n    }\n\n    if (!uploadRequest) {\n      throw new Error('Failed to obtain presigned request');\n    }\n\n    // Upload file\n    const uploadHandle = upload(file, uploadRequest.url, uploadRequest.fields);\n    fileUpload.setCancel(uploadHandle.cancel);\n    uploadHandle.onProgress(fileUpload.updateProgress);\n\n    try {\n      await uploadHandle.done;\n    } catch (error) {\n      const errMessage = 'Error encountered while uploading file';\n      console.error(`${errMessage}:`, error);\n      throw new Error(errMessage);\n    }\n  }\n\n  render() {\n    return (\n      <Modal\n        closeIcon\n        trigger={this.renderTrigger()}\n        open={this.modalOpen}\n        onClose={action(() => {\n          this.modalOpen = false;\n        })}\n      >\n        <div className=\"mt2 animated fadeIn\">\n          <Header as=\"h3\" icon textAlign=\"center\" className=\"mt3\" color=\"grey\">\n            Upload Study Files\n          </Header>\n          <div className=\"mx3 animated fadeIn\">\n            <FileUpload resourceId={this.props.studyId} fileUploadHandler={this.fileUploadHandler} />\n          </div>\n        </div>\n      </Modal>\n    );\n  }\n\n  renderTrigger() {\n    return (\n      <Button\n        floated=\"right\"\n        color=\"blue\"\n        basic\n        onClick={action(() => {\n          this.modalOpen = true;\n        })}\n      >\n        Upload Files\n      </Button>\n    );\n  }\n}\n\ndecorate(UploadStudyFiles, {\n  modalOpen: observable,\n});\n\nexport default observer(UploadStudyFiles);\n"],"file":"UploadStudyFiles.js"}