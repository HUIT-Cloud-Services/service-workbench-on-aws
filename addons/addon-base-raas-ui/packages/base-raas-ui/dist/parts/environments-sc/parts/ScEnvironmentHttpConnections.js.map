{"version":3,"sources":["../../../../src/parts/environments-sc/parts/ScEnvironmentHttpConnections.js"],"names":["openWindow","url","windowFeatures","window","open","ScEnvironmentHttpConnections","props","handleConnect","id","store","getConnectionStore","connections","environment","connectInfo","_","find","processingId","newTab","createConnectionUrl","location","envsStore","getScEnvConnectionStore","env","state","canConnect","isDisabled","isEmpty","isLoading","map","item","name","scEnvironment","scEnvironmentsStore","isHttp","scheme","getConnections","React","Component","computed","observable"],"mappings":"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","sourcesContent":["import _ from 'lodash';\nimport React from 'react';\nimport { decorate, computed, action, runInAction, observable } from 'mobx';\nimport { observer, inject } from 'mobx-react';\nimport { withRouter } from 'react-router-dom';\nimport { Segment, Icon, Button, Header, Table } from 'semantic-ui-react';\n\nimport { displayError } from '@aws-ee/base-ui/dist/helpers/notification';\n\nconst openWindow = (url, windowFeatures) => {\n  return window.open(url, '_blank', windowFeatures);\n};\n\n// expected props\n// - environment (via prop)\n// - scEnvironmentsStore (via injection)\nclass ScEnvironmentHttpConnections extends React.Component {\n  constructor(props) {\n    super(props);\n    runInAction(() => {\n      // The id of the connection that is being processed\n      this.processingId = '';\n    });\n  }\n\n  get environment() {\n    return this.props.scEnvironment;\n  }\n\n  get envsStore() {\n    return this.props.scEnvironmentsStore;\n  }\n\n  getConnectionStore() {\n    return this.envsStore.getScEnvConnectionStore(this.environment.id);\n  }\n\n  // Returns only the connections that either have a scheme = 'http' or 'https' or no scheme\n  // [ {id, name: <string>(optional), url: <string>(optional)}, ... ]\n  get connections() {\n    const isHttp = scheme => scheme === 'http' || scheme === 'https' || _.isEmpty(scheme);\n    const connections = this.environment.getConnections(item => isHttp(item.scheme));\n\n    return connections;\n  }\n\n  handleConnect = id =>\n    action(async () => {\n      const store = this.getConnectionStore();\n      const connections = this.environment.connections;\n      const connectInfo = _.find(connections, ['id', id]) || {};\n      let url = connectInfo.url;\n\n      this.processingId = id;\n      try {\n        if (url) {\n          // We use noopener and noreferrer for good practices https://developer.mozilla.org/en-US/docs/Web/API/Window/open#noopener\n          openWindow(url, 'noopener,noreferrer');\n        } else {\n          const newTab = openWindow('about:blank');\n          url = await store.createConnectionUrl(id);\n          newTab.location = url;\n        }\n      } catch (error) {\n        displayError(error);\n      } finally {\n        runInAction(() => {\n          this.processingId = '';\n        });\n      }\n    });\n\n  render() {\n    const env = this.environment;\n    const state = env.state;\n    const canConnect = state.canConnect;\n    const connections = this.connections;\n    const processingId = this.processingId;\n    const isDisabled = id => processingId !== id && !_.isEmpty(processingId);\n    const isLoading = id => processingId === id;\n    if (!canConnect) return null;\n\n    return (\n      <div className=\"mt2 mb2\">\n        <Table celled>\n          <Table.Header>\n            <Table.Row>\n              <Table.HeaderCell colSpan=\"1\">HTTP Connections</Table.HeaderCell>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n            {_.map(connections, item => (\n              <Table.Row key={item.id}>\n                <Table.Cell className=\"clearfix\">\n                  <Button\n                    floated=\"right\"\n                    size=\"mini\"\n                    primary\n                    disabled={isDisabled(item.id)}\n                    loading={isLoading(item.id)}\n                    onClick={this.handleConnect(item.id)}\n                  >\n                    Connect\n                  </Button>\n\n                  <div className=\"mt1\">{item.name || 'Connect'}</div>\n                </Table.Cell>\n              </Table.Row>\n            ))}\n          </Table.Body>\n        </Table>\n      </div>\n    );\n  }\n\n  renderEmpty() {\n    return (\n      <Segment placeholder className=\"mt2 mb2\">\n        <Header icon className=\"color-grey\">\n          <Icon name=\"linkify\" />\n          No HTTP Connections\n          <Header.Subheader>This workspace does not have any defined HTTP connections.</Header.Subheader>\n        </Header>\n      </Segment>\n    );\n  }\n}\n\n// see https://medium.com/@mweststrate/mobx-4-better-simpler-faster-smaller-c1fbc08008da\ndecorate(ScEnvironmentHttpConnections, {\n  envsStore: computed,\n  environment: computed,\n  connections: computed,\n  processingId: observable,\n});\n\nexport default inject('scEnvironmentsStore')(withRouter(observer(ScEnvironmentHttpConnections)));\n"],"file":"ScEnvironmentHttpConnections.js"}