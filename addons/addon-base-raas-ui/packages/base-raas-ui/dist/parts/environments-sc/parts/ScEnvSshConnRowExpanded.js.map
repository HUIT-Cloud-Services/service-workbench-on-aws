{"version":3,"sources":["../../../../src/parts/environments-sc/parts/ScEnvSshConnRowExpanded.js"],"names":["ScEnvSshConnRowExpanded","props","startCountDown","_","isUndefined","intervalId","countDown","setInterval","clearInterval","expired","undefined","connectionId","keyName","interfaces","networkInterfaces","example","get","first","renderInfo","renderCountDown","moreThanOne","size","map","network","value","renderHostLabel","info","entries","isEmpty","result","forEach","item","publicDnsName","push","type","scope","privateIp","React","Component","computed","observable","action"],"mappings":"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","sourcesContent":["import _ from 'lodash';\nimport React from 'react';\nimport { decorate, action, runInAction, observable, computed } from 'mobx';\nimport { observer, inject } from 'mobx-react';\nimport { withRouter } from 'react-router-dom';\nimport { Table, List, Segment, Label, Grid } from 'semantic-ui-react';\n\nimport CopyToClipboard from '../../helpers/CopyToClipboard';\n\n// expected props\n// networkInterfaces (via props)\n// keyName (via props)\n// connectionId (via props)\nclass ScEnvSshConnRowExpanded extends React.Component {\n  constructor(props) {\n    super(props);\n    runInAction(() => {\n      // The count down value\n      this.countDown = undefined;\n      this.intervalId = undefined;\n      this.expired = false;\n    });\n  }\n\n  get networkInterfaces() {\n    const entries = this.props.networkInterfaces;\n    if (_.isEmpty(entries)) return [];\n\n    const result = [];\n    _.forEach(entries, item => {\n      if (item.publicDnsName) result.push({ value: item.publicDnsName, type: 'dns', scope: 'public', info: 'Public' });\n      if (item.privateIp) result.push({ value: item.privateIp, type: 'ip', scope: 'private', info: 'Private' });\n    });\n\n    return result;\n  }\n\n  get keyName() {\n    return this.props.keyName;\n  }\n\n  get connectionId() {\n    return this.props.connectionId;\n  }\n\n  componentDidMount() {\n    this.startCountDown();\n  }\n\n  componentWillUnmount() {\n    this.clearInterval();\n  }\n\n  clearInterval() {\n    if (!_.isUndefined(this.intervalId)) {\n      clearInterval(this.intervalId);\n      this.intervalId = undefined;\n    }\n    this.countDown = undefined;\n    this.expired = false;\n  }\n\n  startCountDown = () => {\n    if (!_.isUndefined(this.intervalId)) return;\n    this.countDown = 60;\n\n    this.intervalId = setInterval(async () => {\n      // eslint-disable-next-line consistent-return\n      runInAction(() => {\n        if (this.countDown <= 0) {\n          this.clearInterval();\n          this.expired = true;\n          return;\n        }\n        this.countDown -= 1;\n      });\n    }, 1000);\n  };\n\n  render() {\n    const connectionId = this.connectionId;\n    const keyName = this.keyName;\n    const interfaces = this.networkInterfaces;\n    const example = `ssh -i '${keyName}.pem' ec2-user@${_.get(_.first(interfaces), 'value')}`;\n\n    return (\n      <Table.Row key={connectionId} className=\"fadeIn animated\">\n        <Table.Cell colSpan=\"3\" className=\"p3\">\n          <Grid columns={2} stackable>\n            <Grid.Row stretched>\n              <Grid.Column width={12}>{this.renderInfo()}</Grid.Column>\n              <Grid.Column width={4}>\n                <Segment className=\"flex items-center\">\n                  <div className=\"w-100 overflow-hidden\">{this.renderCountDown()}</div>\n                </Segment>\n              </Grid.Column>\n            </Grid.Row>\n          </Grid>\n          <div className=\"mt3\">\n            Example:\n            <Segment className=\"mt2\">\n              {example} <CopyToClipboard text={example} className=\"ml2 mt0\" />\n            </Segment>\n          </div>\n        </Table.Cell>\n      </Table.Row>\n    );\n  }\n\n  renderInfo() {\n    const interfaces = this.networkInterfaces;\n    const moreThanOne = _.size(interfaces) > 1;\n\n    return (\n      <div>\n        <b>You&apos;ll need two pieces of information to connect to this research workspace.</b>\n        <List bulleted>\n          <List.Item>\n            The IP Address or DNS of the instance.{' '}\n            {moreThanOne ? 'Ask your administrator if you are not sure which one to use:' : ''}\n            <List>\n              {_.map(interfaces, network => (\n                <List.Item key={network.value} className=\"flex\">\n                  {this.renderHostLabel(network)}\n                  <CopyToClipboard text={network.value} />\n                </List.Item>\n              ))}\n            </List>\n          </List.Item>\n          <List.Item>The SSH private key. You downloaded the private key when you created the SSH key.</List.Item>\n        </List>\n        <div className=\"mt3\">\n          Connecting to your research workspace depends on the operating system you are connecting from.\n        </div>\n        <List bulleted>\n          <List.Item\n            href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/AccessingInstancesLinux.html\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Connecting from MacOS or Linux via SSH\n          </List.Item>\n          <List.Item\n            href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/putty.html\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Connecting from Windows via Putty\n          </List.Item>\n        </List>\n      </div>\n    );\n  }\n\n  renderCountDown() {\n    const expired = this.expired;\n    const countDown = this.countDown;\n    if (expired) {\n      return (\n        <div className=\"center color-red\">\n          The time window to connect has expired. To reset it, click on the <b className=\"fs-9\">Use this SSH Key</b>{' '}\n          button again.\n        </div>\n      );\n    }\n\n    return (\n      <div className=\"center\">\n        <div className=\"mb1\">\n          You have <br /> <b>{countDown}</b> <br /> seconds to connect\n        </div>\n      </div>\n    );\n  }\n\n  renderHostLabel(network) {\n    return (\n      <Label>\n        Host\n        <Label.Detail>\n          {network.value} <span className=\"fs-7 pl1\">({network.info})</span>\n        </Label.Detail>\n      </Label>\n    );\n  }\n}\n\n// see https://medium.com/@mweststrate/mobx-4-better-simpler-faster-smaller-c1fbc08008da\ndecorate(ScEnvSshConnRowExpanded, {\n  networkInterfaces: computed,\n  keyName: computed,\n  connectionId: computed,\n  intervalId: observable,\n  countDown: observable,\n  expired: observable,\n  startCountDown: action,\n  clearInterval: action,\n});\n\nexport default inject()(withRouter(observer(ScEnvSshConnRowExpanded)));\n"],"file":"ScEnvSshConnRowExpanded.js"}