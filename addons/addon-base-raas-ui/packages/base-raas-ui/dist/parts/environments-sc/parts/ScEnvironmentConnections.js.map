{"version":3,"sources":["../../../../src/parts/environments-sc/parts/ScEnvironmentConnections.js"],"names":["ScEnvironmentConnections","store","getConnectionStore","load","envsStore","getScEnvConnectionStore","environment","id","env","state","canConnect","content","error","renderEmpty","renderConnections","isHttp","scheme","_","isEmpty","isSsh","isRdp","hasHttp","getConnections","item","hasSsh","hasRdp","props","scEnvironment","scEnvironmentsStore","React","Component","computed"],"mappings":"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","sourcesContent":["import _ from 'lodash';\nimport React from 'react';\nimport { decorate, computed } from 'mobx';\nimport { observer, inject } from 'mobx-react';\nimport { withRouter } from 'react-router-dom';\nimport { Segment, Icon, Header } from 'semantic-ui-react';\n\nimport { swallowError } from '@aws-ee/base-ui/dist/helpers/utils';\nimport {\n  isStoreLoading,\n  isStoreEmpty,\n  isStoreNotEmpty,\n  isStoreError,\n  isStoreReady,\n} from '@aws-ee/base-ui/dist/models/BaseStore';\nimport ErrorBox from '@aws-ee/base-ui/dist/parts/helpers/ErrorBox';\nimport ProgressPlaceHolder from '@aws-ee/base-ui/dist/parts/helpers/BasicProgressPlaceholder';\n\nimport ScEnvironmentHttpConnections from './ScEnvironmentHttpConnections';\nimport ScEnvironmentSshConnections from './ScEnvironmentSshConnections';\nimport ScEnvironmentRdpConnections from './ScEnvironmentRdpConnections';\n\n// expected props\n// - scEnvironment (via prop)\n// - scEnvironmentsStore (via injection)\nclass ScEnvironmentConnections extends React.Component {\n  componentDidMount() {\n    const store = this.getConnectionStore();\n    if (!isStoreReady(store)) {\n      swallowError(store.load());\n    }\n  }\n\n  get environment() {\n    return this.props.scEnvironment;\n  }\n\n  get envsStore() {\n    return this.props.scEnvironmentsStore;\n  }\n\n  getConnectionStore() {\n    return this.envsStore.getScEnvConnectionStore(this.environment.id);\n  }\n\n  render() {\n    const store = this.getConnectionStore();\n    const env = this.environment;\n    const state = env.state;\n    const canConnect = state.canConnect;\n\n    if (!canConnect) return null;\n    let content = null;\n\n    if (isStoreError(store)) {\n      content = <ErrorBox error={store.error} className=\"pt2 mb2\" />;\n    } else if (isStoreLoading(store)) {\n      content = <ProgressPlaceHolder segmentCount={1} className=\"mt2 mb2\" />;\n    } else if (isStoreEmpty(store)) {\n      content = this.renderEmpty();\n    } else if (isStoreNotEmpty(store)) {\n      content = this.renderConnections();\n    } else {\n      content = null;\n    }\n    return <div className=\"fadeIn animated\">{content}</div>;\n  }\n\n  renderConnections() {\n    const env = this.environment;\n    const isHttp = scheme => scheme === 'http' || scheme === 'https' || _.isEmpty(scheme);\n    const isSsh = scheme => scheme === 'ssh';\n    const isRdp = scheme => scheme === 'rdp';\n    const hasHttp = !_.isEmpty(env.getConnections(item => isHttp(item.scheme)));\n    const hasSsh = !_.isEmpty(env.getConnections(item => isSsh(item.scheme)));\n    const hasRdp = !_.isEmpty(env.getConnections(item => isRdp(item.scheme)));\n\n    return (\n      // Keep the order the way it is, otherwise the drop down menus in the ssh connections\n      // will be cropped due to the 'fadeIn animated' changing the z index\n      <>\n        {hasHttp && <ScEnvironmentHttpConnections scEnvironment={env} />}\n        {hasRdp && <ScEnvironmentRdpConnections scEnvironment={env} />}\n        {hasSsh && <ScEnvironmentSshConnections scEnvironment={env} />}\n      </>\n    );\n  }\n\n  renderEmpty() {\n    return (\n      <Segment placeholder className=\"mt2 mb2\">\n        <Header icon className=\"color-grey\">\n          <Icon name=\"linkify\" />\n          No Connections\n          <Header.Subheader>This workspace does not have any defined connections.</Header.Subheader>\n        </Header>\n      </Segment>\n    );\n  }\n}\n\n// see https://medium.com/@mweststrate/mobx-4-better-simpler-faster-smaller-c1fbc08008da\ndecorate(ScEnvironmentConnections, {\n  envsStore: computed,\n  environment: computed,\n});\n\nexport default inject('scEnvironmentsStore')(withRouter(observer(ScEnvironmentConnections)));\n"],"file":"ScEnvironmentConnections.js"}