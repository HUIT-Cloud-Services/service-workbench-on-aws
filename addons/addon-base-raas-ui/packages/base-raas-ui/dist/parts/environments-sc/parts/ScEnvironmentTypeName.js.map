{"version":3,"sources":["../../../../src/parts/environments-sc/parts/ScEnvironmentTypeName.js"],"names":["ScEnvironmentTypeName","store","getEnvTypeStore","load","envTypesStore","envTypeId","content","renderError","error","envType","name","defaultMessage","rawMessage","message","_","isString","get","props","React","Component","computed"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAEA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;AAEA;AACA;AACA;AAEA;AACA;AACA;IACMA,qB;;;;;;;;;;;;;wCACgB;AAClB,UAAMC,KAAK,GAAG,KAAKC,eAAL,EAAd;;AACA,UAAID,KAAK,IAAI,CAAC,6BAAaA,KAAb,CAAd,EAAmC;AACjC,iCAAaA,KAAK,CAACE,IAAN,EAAb;AACD;AACF;;;sCAUiB;AAChB,UAAMC,aAAa,GAAG,KAAKA,aAA3B;AACA,UAAMC,SAAS,GAAG,KAAKA,SAAvB;AACA,aAAOD,aAAa,CAACF,eAAd,CAA8BG,SAA9B,CAAP;AACD;;;6BAEQ;AACP,UAAMJ,KAAK,GAAG,KAAKC,eAAL,EAAd;AACA,UAAII,OAAO,GAAG,IAAd;;AAEA,UAAI,6BAAaL,KAAb,CAAJ,EAAyB;AACvBK,QAAAA,OAAO,GAAG,KAAKC,WAAL,CAAiBN,KAAK,CAACO,KAAvB,CAAV;AACD,OAFD,MAEO,IAAI,+BAAeP,KAAf,CAAJ,EAA2B;AAChCK,QAAAA,OAAO,gBACL,gCAAC,4BAAD,qBACE,gCAAC,4BAAD,CAAa,IAAb,OADF,CADF;AAKD,OANM,MAMA,IAAI,6BAAaL,KAAb,CAAJ,EAAyB;AAC9BK,QAAAA,OAAO,GAAGL,KAAK,CAACQ,OAAN,CAAcC,IAAd,IAAsB,cAAhC;AACD,OAFM,MAEA;AACLJ,QAAAA,OAAO,GAAG,IAAV;AACD;;AAED,aAAOA,OAAP;AACD;;;gCAEWE,K,EAAO;AACjB,UAAMG,cAAc,GAAG,6BAAvB;AACA,UAAMC,UAAU,GAAGJ,KAAK,IAAIG,cAA5B;AACA,UAAME,OAAO,GAAGC,mBAAEC,QAAF,CAAWH,UAAX,IAAyBA,UAAzB,GAAsCE,mBAAEE,GAAF,CAAMJ,UAAN,EAAkB,SAAlB,EAA6BD,cAA7B,CAAtD;AAEA,0BACE,gCAAC,sBAAD;AACE,QAAA,OAAO,eACL,gCAAC,sBAAD;AAAO,UAAA,IAAI,EAAC,MAAZ;AAAmB,UAAA,KAAK,MAAxB;AAAyB,UAAA,KAAK,EAAC;AAA/B,wBAFJ;AAME,QAAA,KAAK;AANP,sBAQE;AAAK,QAAA,SAAS,EAAC;AAAf,sBACE,gHADF,eAEE,qFAFF,eAGE,2CAAIE,OAAJ,CAHF,CARF,CADF;AAgBD;;;wBAxDe;AACd,aAAO,KAAKI,KAAL,CAAWZ,SAAlB;AACD;;;wBAEmB;AAClB,aAAO,KAAKY,KAAL,CAAWb,aAAlB;AACD;;;;EAdiCc,kBAAMC,S,GAmE1C;;;AACA,oBAASnB,qBAAT,EAAgC;AAC9BK,EAAAA,SAAS,EAAEe,cADmB;AAE9BhB,EAAAA,aAAa,EAAEgB;AAFe,CAAhC;;eAKe,uBAAO,eAAP,EAAwB,gCAAW,yBAASpB,qBAAT,CAAX,CAAxB,C","sourcesContent":["import _ from 'lodash';\nimport React from 'react';\nimport { decorate, computed } from 'mobx';\nimport { observer, inject } from 'mobx-react';\nimport { withRouter } from 'react-router-dom';\nimport { Label, Popup, Placeholder } from 'semantic-ui-react';\n\nimport { isStoreLoading, isStoreError, isStoreReady } from '@aws-ee/base-ui/dist/models/BaseStore';\nimport { swallowError } from '@aws-ee/base-ui/dist/helpers/utils';\n\n// This component displays the name of the env type. The envTypeId is expected to be passed\n// as a prop to this component. This component displays a progress place holder or an error with a popup\n// message if the env type name can't be determined.\n\n// expected props\n// - envTypeId  (via prop)\n// - envTypesStore (via injection)\nclass ScEnvironmentTypeName extends React.Component {\n  componentDidMount() {\n    const store = this.getEnvTypeStore();\n    if (store && !isStoreReady(store)) {\n      swallowError(store.load());\n    }\n  }\n\n  get envTypeId() {\n    return this.props.envTypeId;\n  }\n\n  get envTypesStore() {\n    return this.props.envTypesStore;\n  }\n\n  getEnvTypeStore() {\n    const envTypesStore = this.envTypesStore;\n    const envTypeId = this.envTypeId;\n    return envTypesStore.getEnvTypeStore(envTypeId);\n  }\n\n  render() {\n    const store = this.getEnvTypeStore();\n    let content = null;\n\n    if (isStoreError(store)) {\n      content = this.renderError(store.error);\n    } else if (isStoreLoading(store)) {\n      content = (\n        <Placeholder>\n          <Placeholder.Line />\n        </Placeholder>\n      );\n    } else if (isStoreReady(store)) {\n      content = store.envType.name || 'Not provided';\n    } else {\n      content = null;\n    }\n\n    return content;\n  }\n\n  renderError(error) {\n    const defaultMessage = 'Hmm... something went wrong';\n    const rawMessage = error || defaultMessage;\n    const message = _.isString(rawMessage) ? rawMessage : _.get(rawMessage, 'message', defaultMessage);\n\n    return (\n      <Popup\n        trigger={\n          <Label size=\"mini\" basic color=\"red\">\n            Show Error\n          </Label>\n        }\n        basic\n      >\n        <div className=\"color-red\">\n          <p>An error occurred while retrieving the workspace type information.</p>\n          <p>The system returned this error message:</p>\n          <p>{message}</p>\n        </div>\n      </Popup>\n    );\n  }\n}\n\n// see https://medium.com/@mweststrate/mobx-4-better-simpler-faster-smaller-c1fbc08008da\ndecorate(ScEnvironmentTypeName, {\n  envTypeId: computed,\n  envTypesStore: computed,\n});\n\nexport default inject('envTypesStore')(withRouter(observer(ScEnvironmentTypeName)));\n"],"file":"ScEnvironmentTypeName.js"}