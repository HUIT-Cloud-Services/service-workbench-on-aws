{"version":3,"sources":["../../../../src/parts/environments-sc/parts/ScEnvironmentSshConnections.js"],"names":["ScEnvironmentSshConnections","props","toggleCreateKey","showCreateKey","store","keyPairsStore","load","env","environment","state","canConnect","empty","_","isEmpty","connections","content","error","renderEmpty","renderConnections","renderCreateKeyForm","map","item","id","scEnvironment","getConnections","scheme","React","Component","computed","observable","action"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAEA;;AACA;;AACA;;AACA;;AACA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;AAEA;AACA;AACA;IACMA,2B;;;;;AACJ,uCAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,8BAAMA,KAAN;;AADiB,UA+BnBC,eA/BmB,GA+BD,YAAM;AACtB,YAAKC,aAAL,GAAqB,CAAC,MAAKA,aAA3B;AACD,KAjCkB;;AAEjB,2BAAY,YAAM;AAChB;AACA,YAAKA,aAAL,GAAqB,KAArB;AACD,KAHD;AAFiB;AAMlB;;;;wCAEmB;AAClB,UAAMC,KAAK,GAAG,KAAKC,aAAnB;;AACA,UAAI,CAAC,6BAAaD,KAAb,CAAL,EAA0B;AACxB,iCAAaA,KAAK,CAACE,IAAN,EAAb;AACD;AACF;;;6BAsBQ;AACP,UAAMF,KAAK,GAAG,KAAKC,aAAnB;AACA,UAAME,GAAG,GAAG,KAAKC,WAAjB;AACA,UAAMC,KAAK,GAAGF,GAAG,CAACE,KAAlB;AACA,UAAMC,UAAU,GAAGD,KAAK,CAACC,UAAzB;;AACA,UAAMC,KAAK,GAAGC,mBAAEC,OAAF,CAAU,KAAKC,WAAf,CAAd;;AAEA,UAAI,CAACJ,UAAL,EAAiB,OAAO,IAAP;AACjB,UAAIK,OAAO,GAAG,IAAd;;AAEA,UAAI,6BAAaX,KAAb,CAAJ,EAAyB;AACvBW,QAAAA,OAAO,gBAAG,gCAAC,oBAAD;AAAU,UAAA,KAAK,EAAEX,KAAK,CAACY,KAAvB;AAA8B,UAAA,SAAS,EAAC;AAAxC,UAAV;AACD,OAFD,MAEO,IAAI,+BAAeZ,KAAf,CAAJ,EAA2B;AAChCW,QAAAA,OAAO,gBAAG,gCAAC,oCAAD;AAAqB,UAAA,YAAY,EAAE,CAAnC;AAAsC,UAAA,SAAS,EAAC;AAAhD,UAAV;AACD,OAFM,MAEA,IAAIJ,KAAJ,EAAW;AAChBI,QAAAA,OAAO,GAAG,KAAKE,WAAL,EAAV;AACD,OAFM,MAEA;AACLF,QAAAA,OAAO,GAAG,KAAKG,iBAAL,EAAV;AACD;;AAED,0BAAO;AAAK,QAAA,SAAS,EAAC;AAAf,SAAkCH,OAAlC,CAAP;AACD;;;wCAEmB;AAClB,UAAMR,GAAG,GAAG,KAAKC,WAAjB;AACA,UAAML,aAAa,GAAG,KAAKA,aAA3B;AACA,UAAMW,WAAW,GAAG,KAAKA,WAAzB;AACA,UAAMV,KAAK,GAAG,KAAKC,aAAnB;AACA,UAAMM,KAAK,GAAGP,KAAK,CAACO,KAApB;AAEA,UAAIR,aAAJ,EAAmB,OAAO,KAAKgB,mBAAL,EAAP;AAEnB,0BACE;AAAK,QAAA,SAAS,EAAC;AAAf,SACGR,KAAK,iBACJ,gCAAC,wBAAD;AAAS,QAAA,OAAO;AAAhB,sBACE,gCAAC,wBAAD,CAAS,MAAT,qBADF,eAEE,gCAAC,wBAAD,CAAS,IAAT,qBACE,gCAAC,wBAAD,CAAS,IAAT,wGADF,eAIE,gCAAC,wBAAD,CAAS,IAAT,sFAJF,CAFF,CAFJ,eAcE,gCAAC,sBAAD;AAAO,QAAA,MAAM;AAAb,sBACE,gCAAC,sBAAD,CAAO,MAAP,qBACE,gCAAC,sBAAD,CAAO,GAAP,qBACE,gCAAC,sBAAD,CAAO,UAAP;AAAkB,QAAA,OAAO,EAAC,GAA1B;AAA8B,QAAA,SAAS,EAAC;AAAxC,sBACE,0DACE,gCAAC,uBAAD;AAAQ,QAAA,OAAO,EAAC,OAAhB;AAAwB,QAAA,KAAK,EAAC,MAA9B;AAAqC,QAAA,IAAI,EAAC,MAA1C;AAAiD,QAAA,KAAK,MAAtD;AAAuD,QAAA,OAAO,EAAE,KAAKT;AAArE,sBADF,CADF,eAME;AAAK,QAAA,SAAS,EAAC;AAAf,2BANF,CADF,CADF,CADF,eAaE,gCAAC,sBAAD,CAAO,IAAP,QACGU,mBAAEQ,GAAF,CAAMN,WAAN,EAAmB,UAAAO,IAAI;AAAA,4BACtB,gCAAC,yCAAD;AAA+B,UAAA,GAAG,EAAEA,IAAI,CAACC,EAAzC;AAA6C,UAAA,aAAa,EAAEf,GAA5D;AAAiE,UAAA,YAAY,EAAEc,IAAI,CAACC;AAApF,UADsB;AAAA,OAAvB,CADH,CAbF,CAdF,CADF;AAoCD;;;0CAEqB;AACpB,0BACE,gCAAC,wBAAD;AAAS,QAAA,SAAS,EAAC;AAAnB,sBACE,gCAAC,6BAAD;AAAmB,QAAA,QAAQ,EAAE,KAAKpB;AAAlC,QADF,CADF;AAKD;;;kCAEa;AACZ,0BACE,gCAAC,wBAAD;AAAS,QAAA,WAAW,MAApB;AAAqB,QAAA,SAAS,EAAC;AAA/B,sBACE,gCAAC,uBAAD;AAAQ,QAAA,IAAI,MAAZ;AAAa,QAAA,SAAS,EAAC;AAAvB,sBACE,gCAAC,qBAAD;AAAM,QAAA,IAAI,EAAC;AAAX,QADF,qCAGE,gCAAC,uBAAD,CAAQ,SAAR,oEAHF,CADF,CADF;AASD;;;wBA5GiB;AAChB,aAAO,KAAKD,KAAL,CAAWsB,aAAlB;AACD;;;wBAEmB;AAClB,aAAO,KAAKtB,KAAL,CAAWI,aAAlB;AACD,K,CAED;AACA;;;;wBACkB;AAChB,UAAMS,WAAW,GAAG,KAAKN,WAAL,CAAiBgB,cAAjB,CAAgC,UAAAH,IAAI;AAAA,eAAIA,IAAI,CAACI,MAAL,KAAgB,KAApB;AAAA,OAApC,CAApB;AAEA,aAAOX,WAAP;AACD;;;;EA9BuCY,kBAAMC,S,GA+HhD;;;AACA,oBAAS3B,2BAAT,EAAsC;AACpCQ,EAAAA,WAAW,EAAEoB,cADuB;AAEpCvB,EAAAA,aAAa,EAAEuB,cAFqB;AAGpCd,EAAAA,WAAW,EAAEc,cAHuB;AAIpCzB,EAAAA,aAAa,EAAE0B,gBAJqB;AAKpC3B,EAAAA,eAAe,EAAE4B;AALmB,CAAtC;;eAQe,uBAAO,eAAP,EAAwB,gCAAW,yBAAS9B,2BAAT,CAAX,CAAxB,C","sourcesContent":["import _ from 'lodash';\nimport React from 'react';\nimport { decorate, computed, action, runInAction, observable } from 'mobx';\nimport { observer, inject } from 'mobx-react';\nimport { withRouter } from 'react-router-dom';\nimport { Segment, Icon, Button, Header, Table, Message } from 'semantic-ui-react';\n\nimport { swallowError } from '@aws-ee/base-ui/dist/helpers/utils';\nimport { isStoreLoading, isStoreError, isStoreReady } from '@aws-ee/base-ui/dist/models/BaseStore';\nimport ErrorBox from '@aws-ee/base-ui/dist/parts/helpers/ErrorBox';\nimport ProgressPlaceHolder from '@aws-ee/base-ui/dist/parts/helpers/BasicProgressPlaceholder';\nimport KeyPairCreateForm from '@aws-ee/key-pair-mgmt-ui/dist/parts/key-pairs/parts/KeyPairCreateForm';\n\nimport ScEnvironmentSshConnectionRow from './ScEnvironmentSshConnectionRow';\n\n// expected props\n// - environment (via prop)\n// - keyPairsStore  (vai injection)\nclass ScEnvironmentSshConnections extends React.Component {\n  constructor(props) {\n    super(props);\n    runInAction(() => {\n      // A flag to indicate if we need to show the create key form\n      this.showCreateKey = false;\n    });\n  }\n\n  componentDidMount() {\n    const store = this.keyPairsStore;\n    if (!isStoreReady(store)) {\n      swallowError(store.load());\n    }\n  }\n\n  get environment() {\n    return this.props.scEnvironment;\n  }\n\n  get keyPairsStore() {\n    return this.props.keyPairsStore;\n  }\n\n  // Returns only the connections that scheme = 'ssh'\n  // [ {id, name: <string>(optional), instanceId: <string>, scheme: 'ssh'}, ... ]\n  get connections() {\n    const connections = this.environment.getConnections(item => item.scheme === 'ssh');\n\n    return connections;\n  }\n\n  toggleCreateKey = () => {\n    this.showCreateKey = !this.showCreateKey;\n  };\n\n  render() {\n    const store = this.keyPairsStore;\n    const env = this.environment;\n    const state = env.state;\n    const canConnect = state.canConnect;\n    const empty = _.isEmpty(this.connections);\n\n    if (!canConnect) return null;\n    let content = null;\n\n    if (isStoreError(store)) {\n      content = <ErrorBox error={store.error} className=\"pt2 mb2\" />;\n    } else if (isStoreLoading(store)) {\n      content = <ProgressPlaceHolder segmentCount={1} className=\"mt2 mb2\" />;\n    } else if (empty) {\n      content = this.renderEmpty();\n    } else {\n      content = this.renderConnections();\n    }\n\n    return <div className=\"fadeIn animated\">{content}</div>;\n  }\n\n  renderConnections() {\n    const env = this.environment;\n    const showCreateKey = this.showCreateKey;\n    const connections = this.connections;\n    const store = this.keyPairsStore;\n    const empty = store.empty;\n\n    if (showCreateKey) return this.renderCreateKeyForm();\n\n    return (\n      <div className=\"mt2 mb2 fadeIn animated\">\n        {empty && (\n          <Message warning>\n            <Message.Header>Attention!</Message.Header>\n            <Message.List>\n              <Message.Item>\n                You do not have any key pairs. A key pair is needed to connect via SSH to the target machine.\n              </Message.Item>\n              <Message.Item>\n                You can create a key pair now by clicking on the &apos;Create Key&apos; button below.\n              </Message.Item>\n            </Message.List>\n          </Message>\n        )}\n        <Table celled>\n          <Table.Header>\n            <Table.Row>\n              <Table.HeaderCell colSpan=\"3\" className=\"clearfix\">\n                <div>\n                  <Button floated=\"right\" color=\"blue\" size=\"mini\" basic onClick={this.toggleCreateKey}>\n                    Create Key\n                  </Button>\n                </div>\n                <div className=\"mt1\">SSH Connections</div>\n              </Table.HeaderCell>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n            {_.map(connections, item => (\n              <ScEnvironmentSshConnectionRow key={item.id} scEnvironment={env} connectionId={item.id} />\n            ))}\n          </Table.Body>\n        </Table>\n      </div>\n    );\n  }\n\n  renderCreateKeyForm() {\n    return (\n      <Segment className=\"clearfix mt2 mb2 p2 fadeIn animated\">\n        <KeyPairCreateForm onCancel={this.toggleCreateKey} />\n      </Segment>\n    );\n  }\n\n  renderEmpty() {\n    return (\n      <Segment placeholder className=\"mt2 mb2\">\n        <Header icon className=\"color-grey\">\n          <Icon name=\"linkify\" />\n          No SSH Connections\n          <Header.Subheader>This workspace does not have any defined SSH connections.</Header.Subheader>\n        </Header>\n      </Segment>\n    );\n  }\n}\n\n// see https://medium.com/@mweststrate/mobx-4-better-simpler-faster-smaller-c1fbc08008da\ndecorate(ScEnvironmentSshConnections, {\n  environment: computed,\n  keyPairsStore: computed,\n  connections: computed,\n  showCreateKey: observable,\n  toggleCreateKey: action,\n});\n\nexport default inject('keyPairsStore')(withRouter(observer(ScEnvironmentSshConnections)));\n"],"file":"ScEnvironmentSshConnections.js"}