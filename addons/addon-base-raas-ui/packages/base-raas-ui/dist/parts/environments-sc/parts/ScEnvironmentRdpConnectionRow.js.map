{"version":3,"sources":["../../../../src/parts/environments-sc/parts/ScEnvironmentRdpConnectionRow.js"],"names":["ScEnvironmentRdpConnectionRow","props","handleGetInfo","store","getConnectionStore","connectionId","windowsRdpInfo","undefined","showPassword","processingGetInfo","getWindowsRdpInfo","result","toggleShowPassword","envsStore","getScEnvConnectionStore","environment","id","item","connection","processing","rows","name","push","renderExpanded","interfaces","networkInterfaces","username","password","moreThanOne","_","size","map","network","value","renderHostLabel","renderUsernameLabel","renderPasswordLabel","info","scEnvironment","scEnvironmentsStore","connections","getConnections","scheme","find","entries","get","isEmpty","forEach","publicDnsName","type","scope","privateIp","React","Component","computed","observable","action"],"mappings":"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","sourcesContent":["import _ from 'lodash';\nimport React from 'react';\nimport { decorate, computed, action, runInAction, observable } from 'mobx';\nimport { observer, inject } from 'mobx-react';\nimport { withRouter } from 'react-router-dom';\nimport { Button, Table, List, Label } from 'semantic-ui-react';\n\nimport { displayError } from '@aws-ee/base-ui/dist/helpers/notification';\n\nimport CopyToClipboard from '../../helpers/CopyToClipboard';\n\n// expected props\n// - scEnvironment (via prop)\n// - connectionId (via prop)\n// - scEnvironmentsStore (via injection)\nclass ScEnvironmentRdpConnectionRow extends React.Component {\n  constructor(props) {\n    super(props);\n    runInAction(() => {\n      // The windowsRdpInfo we get once we ask for the windows rdp info\n      // This is an object { password: <string>, networkInterfaces: [ ... ] }\n      this.windowsRdpInfo = undefined;\n      // A flag to indicate if we are in the process of getting the windows rdp info\n      this.processingGetInfo = false;\n      // Should the password be shown\n      this.showPassword = false;\n    });\n  }\n\n  get environment() {\n    return this.props.scEnvironment;\n  }\n\n  get envsStore() {\n    return this.props.scEnvironmentsStore;\n  }\n\n  getConnectionStore() {\n    return this.envsStore.getScEnvConnectionStore(this.environment.id);\n  }\n\n  // Returns only the connections that scheme = 'rdp'\n  // [ {id, name: <string>(optional), instanceId: <string>, scheme: 'rdp'}, ... ]\n  get connections() {\n    const connections = this.environment.getConnections(item => item.scheme === 'rdp');\n\n    return connections;\n  }\n\n  get connection() {\n    const id = this.connectionId;\n    const connections = this.connections;\n\n    return _.find(connections, ['id', id]) || {};\n  }\n\n  get connectionId() {\n    return this.props.connectionId;\n  }\n\n  get networkInterfaces() {\n    const entries = _.get(this.windowsRdpInfo, 'networkInterfaces');\n    if (_.isEmpty(entries)) return [];\n\n    const result = [];\n    _.forEach(entries, item => {\n      if (item.publicDnsName) result.push({ value: item.publicDnsName, type: 'dns', scope: 'public', info: 'Public' });\n      if (item.privateIp) result.push({ value: item.privateIp, type: 'ip', scope: 'private', info: 'Private' });\n    });\n\n    return result;\n  }\n\n  handleGetInfo = async () => {\n    const store = this.getConnectionStore();\n    const connectionId = this.connectionId;\n\n    this.windowsRdpInfo = undefined;\n    this.showPassword = false;\n    this.processingGetInfo = true;\n\n    try {\n      const result = await store.getWindowsRdpInfo(connectionId);\n      runInAction(() => {\n        this.windowsRdpInfo = result || {};\n      });\n    } catch (error) {\n      displayError(error);\n    } finally {\n      runInAction(() => {\n        this.processingGetInfo = false;\n      });\n    }\n  };\n\n  toggleShowPassword = () => {\n    this.showPassword = !this.showPassword;\n  };\n\n  render() {\n    const item = this.connection;\n    const windowsRdpInfo = this.windowsRdpInfo;\n    const processing = this.processingGetInfo;\n\n    const rows = [\n      <Table.Row key={item.id}>\n        <Table.Cell className=\"clearfix\">\n          <Button floated=\"right\" size=\"mini\" primary loading={processing} onClick={this.handleGetInfo}>\n            Get Password\n          </Button>\n\n          <div className=\"mt1\">{item.name || 'Connect'}</div>\n        </Table.Cell>\n      </Table.Row>,\n    ];\n\n    if (windowsRdpInfo) {\n      rows.push(this.renderExpanded());\n    }\n\n    return rows;\n  }\n\n  renderExpanded() {\n    const item = this.connection;\n    const windowsRdpInfo = this.windowsRdpInfo;\n    const interfaces = this.networkInterfaces;\n    const username = 'Administrator';\n    const password = windowsRdpInfo.password;\n    const showPassword = this.showPassword;\n    const moreThanOne = _.size(interfaces) > 1;\n\n    return (\n      <Table.Row key={`${item.id}__2`}>\n        <Table.Cell className=\"p3\">\n          <b>\n            Your Windows workspace can be accessed via an RDP client by using the DNS host name and credentials defined\n            below.\n          </b>\n          <List bulleted>\n            <List.Item>\n              The IP Address or DNS of the instance.{' '}\n              {moreThanOne ? 'Ask your administrator if you are not sure which one to use:' : ''}\n              <List>\n                {_.map(interfaces, network => (\n                  <List.Item key={network.value} className=\"flex\">\n                    {this.renderHostLabel(network)}\n                    <CopyToClipboard text={network.value} />\n                  </List.Item>\n                ))}\n              </List>\n            </List.Item>\n            <List.Item>\n              The username and password:\n              <List>\n                <List.Item className=\"flex\">\n                  {this.renderUsernameLabel(username)}\n                  <CopyToClipboard text={username} />\n                </List.Item>\n                <List.Item className=\"flex\">\n                  {this.renderPasswordLabel(password)}\n                  <Button className=\"ml2\" basic size=\"mini\" onClick={this.toggleShowPassword}>\n                    {showPassword ? 'Hide' : 'Show'}\n                  </Button>\n                  <CopyToClipboard text={password} />\n                </List.Item>\n              </List>\n            </List.Item>\n          </List>\n          <div className=\"mt3\">\n            Additional information about connecting via RDP can be found in the documentation below:\n          </div>\n          <List bulleted>\n            <List.Item\n              href=\"https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/connecting_to_windows_instance.html#connect-rdp\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              Connect to Your Windows Instance\n            </List.Item>\n          </List>\n        </Table.Cell>\n      </Table.Row>\n    );\n  }\n\n  renderPasswordLabel(password) {\n    const showPassword = this.showPassword;\n    return (\n      <Label>\n        Password\n        <Label.Detail>{showPassword ? password : '****************'}</Label.Detail>\n      </Label>\n    );\n  }\n\n  renderUsernameLabel(username) {\n    return (\n      <Label>\n        Username\n        <Label.Detail>{username}</Label.Detail>\n      </Label>\n    );\n  }\n\n  renderHostLabel(network) {\n    return (\n      <Label>\n        Host\n        <Label.Detail>\n          {network.value} <span className=\"fs-7 pl1\">({network.info})</span>\n        </Label.Detail>\n      </Label>\n    );\n  }\n}\n\n// see https://medium.com/@mweststrate/mobx-4-better-simpler-faster-smaller-c1fbc08008da\ndecorate(ScEnvironmentRdpConnectionRow, {\n  envsStore: computed,\n  environment: computed,\n  connections: computed,\n  connection: computed,\n  connectionId: computed,\n  networkInterfaces: computed,\n  windowsRdpInfo: observable,\n  processingGetInfo: observable,\n  showPassword: observable,\n  handleGetInfo: action,\n  toggleShowPassword: action,\n});\n\nexport default inject('scEnvironmentsStore')(withRouter(observer(ScEnvironmentRdpConnectionRow)));\n"],"file":"ScEnvironmentRdpConnectionRow.js"}