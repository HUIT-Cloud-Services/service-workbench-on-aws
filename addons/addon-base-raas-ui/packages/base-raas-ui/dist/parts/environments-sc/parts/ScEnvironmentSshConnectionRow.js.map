{"version":3,"sources":["../../../../src/parts/environments-sc/parts/ScEnvironmentSshConnectionRow.js"],"names":["ScEnvironmentSshConnectionRow","props","handleActivate","keyId","selectedKeyId","store","getConnectionStore","connectionId","_","isEmpty","networkInterfaces","undefined","processingSendKey","sendSshKey","result","get","handleKeyChange","e","data","value","changed","key","first","keyPairsStore","listActive","id","envsStore","getScEnvConnectionStore","environment","emptyKeys","item","connection","options","keyPairOptions","selectedKeyName","rows","name","instanceId","push","scEnvironment","scEnvironmentsStore","map","text","connections","getConnections","scheme","find","getKeyPair","React","Component","computed","observable","action"],"mappings":"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","sourcesContent":["import _ from 'lodash';\nimport React from 'react';\nimport { decorate, computed, action, runInAction, observable } from 'mobx';\nimport { observer, inject } from 'mobx-react';\nimport { withRouter } from 'react-router-dom';\nimport { Button, Table, Dropdown } from 'semantic-ui-react';\n\nimport { displayError } from '@aws-ee/base-ui/dist/helpers/notification';\n\nimport ScEnvSshConnRowExpanded from './ScEnvSshConnRowExpanded';\n\n// expected props\n// - scEnvironment (via prop)\n// - connectionId (via prop)\n// - scEnvironmentsStore (via injection)\n// - keyPairsStore  (vai injection)\nclass ScEnvironmentSshConnectionRow extends React.Component {\n  constructor(props) {\n    super(props);\n    runInAction(() => {\n      const key = _.first(this.keyPairsStore.listActive) || {};\n\n      // The networksInterfaces we get once we send the ssh key\n      this.networkInterfaces = undefined;\n      // A flag to indicate if the activation of ssh is being processed\n      this.processingSendKey = false;\n      // We default the selected key (if any) to the first latest active key\n      this.selectedKeyId = key.id;\n    });\n  }\n\n  get environment() {\n    return this.props.scEnvironment;\n  }\n\n  get envsStore() {\n    return this.props.scEnvironmentsStore;\n  }\n\n  get keyPairsStore() {\n    return this.props.keyPairsStore;\n  }\n\n  get keyPairOptions() {\n    return _.map(this.keyPairsStore.listActive, item => ({ key: item.id, value: item.id, text: item.name }));\n  }\n\n  getConnectionStore() {\n    return this.envsStore.getScEnvConnectionStore(this.environment.id);\n  }\n\n  // Returns only the connections that scheme = 'ssh'\n  // [ {id, name: <string>(optional), instanceId: <string>, scheme: 'ssh'}, ... ]\n  get connections() {\n    const connections = this.environment.getConnections(item => item.scheme === 'ssh');\n\n    return connections;\n  }\n\n  get connection() {\n    const id = this.connectionId;\n    const connections = this.connections;\n\n    return _.find(connections, ['id', id]) || {};\n  }\n\n  get connectionId() {\n    return this.props.connectionId;\n  }\n\n  get selectedKeyName() {\n    if (_.isEmpty(this.selectedKeyId)) return '';\n    return _.get(this.keyPairsStore.getKeyPair(this.selectedKeyId), 'name');\n  }\n\n  handleActivate = async () => {\n    const keyId = this.selectedKeyId;\n    const store = this.getConnectionStore();\n    const connectionId = this.connectionId;\n    if (_.isEmpty(keyId)) {\n      displayError('Please select the name of the key pair that you want to use');\n      return;\n    }\n\n    this.networkInterfaces = undefined;\n    this.processingSendKey = true;\n    try {\n      const result = await store.sendSshKey(connectionId, keyId);\n      runInAction(() => {\n        this.networkInterfaces = _.get(result, 'networkInterfaces');\n      });\n    } catch (error) {\n      displayError(error);\n    } finally {\n      runInAction(() => {\n        this.processingSendKey = false;\n      });\n    }\n  };\n\n  handleKeyChange = (e, data) => {\n    const value = _.get(data, 'value');\n    const changed = value !== this.selectedKeyId;\n    this.selectedKeyId = value;\n\n    if (changed) this.networkInterfaces = undefined;\n  };\n\n  render() {\n    const store = this.keyPairsStore;\n    const emptyKeys = _.isEmpty(store.listActive);\n    const item = this.connection;\n    const networkInterfaces = this.networkInterfaces;\n    const options = this.keyPairOptions;\n    const selectedKeyId = this.selectedKeyId;\n    const selectedKeyName = this.selectedKeyName;\n    const rows = [\n      <Table.Row key={item.id}>\n        <Table.Cell>\n          <div className=\"mt1\">{item.name || item.instanceId}</div>\n        </Table.Cell>\n        <Table.Cell>\n          {emptyKeys && 'No key pair found'}\n          {!emptyKeys && (\n            <Dropdown\n              upward\n              placeholder=\"Select Key\"\n              fluid\n              selection\n              options={options}\n              value={selectedKeyId}\n              onChange={this.handleKeyChange}\n              disabled={emptyKeys || this.processingSendKey}\n            />\n          )}\n        </Table.Cell>\n        <Table.Cell collapsing>\n          <Button\n            primary\n            size=\"mini\"\n            onClick={this.handleActivate}\n            disabled={emptyKeys}\n            loading={this.processingSendKey}\n          >\n            Use this SSH Key\n          </Button>\n        </Table.Cell>\n      </Table.Row>,\n    ];\n\n    if (networkInterfaces) {\n      rows.push(\n        <ScEnvSshConnRowExpanded\n          key={`${item.id}__1`}\n          networkInterfaces={networkInterfaces}\n          keyName={selectedKeyName}\n          connectionId={item.id}\n        />,\n      );\n    }\n\n    return rows;\n  }\n}\n\n// see https://medium.com/@mweststrate/mobx-4-better-simpler-faster-smaller-c1fbc08008da\ndecorate(ScEnvironmentSshConnectionRow, {\n  envsStore: computed,\n  environment: computed,\n  keyPairsStore: computed,\n  connections: computed,\n  connection: computed,\n  connectionId: computed,\n  keyPairOptions: computed,\n  selectedKeyName: computed,\n  selectedKeyId: observable,\n  networkInterfaces: observable,\n  processingSendKey: observable,\n  handleActivate: action,\n  handleKeyChange: action,\n});\n\nexport default inject('scEnvironmentsStore', 'keyPairsStore')(withRouter(observer(ScEnvironmentSshConnectionRow)));\n"],"file":"ScEnvironmentSshConnectionRow.js"}