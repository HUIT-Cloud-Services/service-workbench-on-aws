{"version":3,"sources":["../../../src/parts/environments-sc/ScEnvironmentCard.js"],"names":["ScEnvironmentCard","env","environment","state","renderStatus","renderTitle","renderError","renderButtons","description","renderDetailTable","id","studyCount","_","size","get","envType","renderRow","key","value","createdBy","isEmpty","projectId","cidr","name","cursor","color","spinner","display","tip","createdAt","error","props","envTypesStore","scEnvironment","store","getEnvType","envTypeId","React","Component","computed"],"mappings":"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","sourcesContent":["import _ from 'lodash';\nimport React from 'react';\nimport { decorate, computed } from 'mobx';\nimport { observer, inject } from 'mobx-react';\nimport { withRouter } from 'react-router-dom';\nimport { Header, Label, Popup, Icon, Divider, Message, Table, Grid, Segment } from 'semantic-ui-react';\nimport TimeAgo from 'react-timeago';\nimport { niceNumber } from '@aws-ee/base-ui/dist/helpers/utils';\n\nimport By from '../helpers/By';\nimport ScEnvironmentButtons from './parts/ScEnvironmentButtons';\nimport ScEnvironmentCost from './parts/ScEnvironmentCost';\n\n// expected props\n// - scEnvironment (via prop)\n// - envTypesStore (via injection)\nclass ScEnvironmentCard extends React.Component {\n  get envTypesStore() {\n    return this.props.envTypesStore;\n  }\n\n  get environment() {\n    return this.props.scEnvironment;\n  }\n\n  get envType() {\n    const env = this.props.scEnvironment;\n    const store = this.envTypesStore;\n    const envType = store.getEnvType(env.envTypeId);\n\n    return envType;\n  }\n\n  render() {\n    const env = this.environment;\n    const state = env.state;\n\n    return (\n      <>\n        {this.renderStatus(state)}\n        {this.renderTitle(env)}\n        {this.renderError(env)}\n        <Divider className=\"mt1 mb1\" />\n        {this.renderButtons(env)}\n        <Divider className=\"mt1\" />\n        {env.description || 'No description was provided for this workspace.'}\n        <Grid columns={2} stackable className=\"mt2\">\n          <Grid.Row stretched>\n            <Grid.Column width={12}>{this.renderDetailTable(env)}</Grid.Column>\n            <Grid.Column width={4}>\n              <Segment className=\"flex items-center\">\n                <div className=\"w-100 overflow-hidden\">\n                  <ScEnvironmentCost envId={env.id} />\n                </div>\n              </Segment>\n            </Grid.Column>\n          </Grid.Row>\n        </Grid>\n      </>\n    );\n  }\n\n  renderDetailTable(env) {\n    const studyCount = _.size(_.get(env, 'studyIds', []));\n    const envType = this.envType || {};\n    const renderRow = (key, value) => (\n      <Table.Row>\n        <Table.Cell width={5}>{key}</Table.Cell>\n        <Table.Cell width={11} className=\"breakout\">\n          {value}\n        </Table.Cell>\n      </Table.Row>\n    );\n\n    return (\n      <Table definition>\n        <Table.Body>\n          {renderRow('Owner', <By uid={env.createdBy} skipPrefix />)}\n          {renderRow('Studies', studyCount === 0 ? 'No studies linked to this workspace' : niceNumber(studyCount))}\n          {renderRow('Project', _.isEmpty(env.projectId) ? 'N/A' : env.projectId)}\n          {renderRow('Restricted CIDR', _.isEmpty(env.cidr) ? 'N/A' : env.cidr)}\n          {renderRow('Workspace Type', envType.name)}\n        </Table.Body>\n      </Table>\n    );\n  }\n\n  renderButtons(env) {\n    return <ScEnvironmentButtons scEnvironment={env} showDetailButton />;\n  }\n\n  renderStatus(state) {\n    return (\n      <div style={{ cursor: 'default' }}>\n        <Popup\n          trigger={\n            <Label attached=\"top left\" size=\"mini\" color={state.color}>\n              {state.spinner && <Icon name=\"spinner\" loading />}\n              {state.display}\n            </Label>\n          }\n        >\n          {state.tip}\n        </Popup>\n      </div>\n    );\n  }\n\n  renderTitle(env) {\n    return (\n      <Header as=\"h3\" className=\"mt1\">\n        {env.name}\n        <Header.Subheader>\n          <span className=\"fs-8 color-grey\">\n            Created <TimeAgo date={env.createdAt} className=\"mr2\" /> <By uid={env.createdBy} className=\"mr2\" />\n          </span>\n          <span className=\"fs-8 color-grey mr2\"> {env.id}</span>\n        </Header.Subheader>\n      </Header>\n    );\n  }\n\n  renderError(env) {\n    if (_.isEmpty(env.error)) return null;\n\n    return (\n      <Message negative>\n        <p>{env.error}</p>\n      </Message>\n    );\n  }\n}\n\n// see https://medium.com/@mweststrate/mobx-4-better-simpler-faster-smaller-c1fbc08008da\ndecorate(ScEnvironmentCard, {\n  envTypesStore: computed,\n  environment: computed,\n  envType: computed,\n});\n\nexport default inject('envTypesStore')(withRouter(observer(ScEnvironmentCard)));\n"],"file":"ScEnvironmentCard.js"}