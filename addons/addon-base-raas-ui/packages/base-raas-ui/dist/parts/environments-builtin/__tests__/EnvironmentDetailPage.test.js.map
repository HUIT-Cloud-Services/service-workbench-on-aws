{"version":3,"sources":["../../../../src/parts/environments-builtin/__tests__/EnvironmentDetailPage.test.js"],"names":["require","generateKeyPairSync","publicEncrypt","constants","jest","mock","displayErrorMock","gotoMock","environmentInstance","name","id","createdAt","createdBy","status","projectId","isExternal","getWindowsPassword","fn","environmentStore","load","startHeartbeat","ready","loading","environment","environmentsStore","getEnvironmentStore","updateEnvironment","userStore","match","params","instanceId","event","preventDefault","stopPropagation","describe","wrapper","container","beforeEach","instance","displayError","x","gotoFn","it","modulusLength","publicKeyEncoding","type","format","privateKeyEncoding","privateKey","publicKey","realPassword","passData","passwordData","key","padding","RSA_PKCS1_PADDING","Buffer","from","mockImplementationOnce","handleWindowsPasswordRequest","expect","windowsPassword","not","toEqual","handleSubmitSharedWithUsersClick","toHaveBeenCalledWith","objectContaining"],"mappings":";;AAeA;;AAEA;;AACA;;;;;;;;eAE0DA,OAAO,CAAC,QAAD,C;IAAzDC,mB,YAAAA,mB;IAAqBC,a,YAAAA,a;IAAeC,S,YAAAA,S;;AAE5CC,IAAI,CAACC,IAAL,CAAU,2CAAV;;AACA,IAAMC,gBAAgB,GAAGN,OAAO,CAAC,2CAAD,CAAhC;;AAEAI,IAAI,CAACC,IAAL,CAAU,sCAAV;;AACA,IAAME,QAAQ,GAAGP,OAAO,CAAC,sCAAD,CAAxB;;AAEA,IAAMQ,mBAAmB,GAAG;AAC1BC,EAAAA,IAAI,EAAE,MADoB;AAE1BC,EAAAA,EAAE,EAAE,IAFsB;AAG1BC,EAAAA,SAAS,EAAE,YAHe;AAI1BC,EAAAA,SAAS,EAAE,WAJe;AAK1BC,EAAAA,MAAM,EAAE,QALkB;AAM1BC,EAAAA,SAAS,EAAE,QANe;AAO1BC,EAAAA,UAAU,EAAE,KAPc;AAQ1BC,EAAAA,kBAAkB,EAAEZ,IAAI,CAACa,EAAL;AARM,CAA5B;AAWA,IAAMC,gBAAgB,GAAG;AACvBC,EAAAA,IAAI,EAAEf,IAAI,CAACa,EAAL,EADiB;AAEvBG,EAAAA,cAAc,EAAEhB,IAAI,CAACa,EAAL,EAFO;AAGvBI,EAAAA,KAAK,EAAE,IAHgB;AAIvBC,EAAAA,OAAO,EAAE,IAJc;AAKvBC,EAAAA,WAAW,EAAEf;AALU,CAAzB;AAQA,IAAMgB,iBAAiB,GAAG;AACxBC,EAAAA,mBAAmB,EAAErB,IAAI,CAACa,EAAL,CAAQ;AAAA,WAAMC,gBAAN;AAAA,GAAR,CADG;AAExBQ,EAAAA,iBAAiB,EAAEtB,IAAI,CAACa,EAAL;AAFK,CAA1B;AAKA,IAAMU,SAAS,GAAG,EAAlB;AAEA,IAAMC,KAAK,GAAG;AACZC,EAAAA,MAAM,EAAE;AACNC,IAAAA,UAAU,EAAE;AADN;AADI,CAAd;AAKA,IAAMC,KAAK,GAAG;AACZC,EAAAA,cAAc,EAAE5B,IAAI,CAACa,EAAL,EADJ;AAEZgB,EAAAA,eAAe,EAAE7B,IAAI,CAACa,EAAL;AAFL,CAAd;AAKAiB,QAAQ,CAAC,uBAAD,EAA0B,YAAM;AACtC,MAAIC,OAAO,GAAG,IAAd;AACA,MAAIC,SAAS,GAAG,IAAhB;AACAC,EAAAA,UAAU,CAAC,YAAM;AACf;AACAF,IAAAA,OAAO,GAAG,mCACR,gCAAC,iCAAD,CAAuB,gBAAvB;AACE,MAAA,iBAAiB,EAAEX,iBADrB;AAEE,MAAA,SAAS,EAAEG,SAFb;AAGE,MAAA,KAAK,EAAEC;AAHT,MADQ,CAAV,CAFe,CASf;;AACAQ,IAAAA,SAAS,GAAGD,OAAO,CAACG,QAAR,EAAZ,CAVe,CAYf;;AACAhC,IAAAA,gBAAgB,CAACiC,YAAjB,GAAgCnC,IAAI,CAACa,EAAL,CAAQ,UAAAuB,CAAC;AAAA,aAAIA,CAAJ;AAAA,KAAT,CAAhC,CAbe,CAef;;AACAjC,IAAAA,QAAQ,CAACkC,MAAT,GAAkBrC,IAAI,CAACa,EAAL,CAAQ;AAAA,aAAMb,IAAI,CAACa,EAAL,EAAN;AAAA,KAAR,CAAlB;AACD,GAjBS,CAAV;AAmBAyB,EAAAA,EAAE,CAAC,6CAAD,uEAAgD;AAAA;;AAAA;AAAA;AAAA;AAAA;AAChD;AADgD,mCAEdzC,mBAAmB,CAAC,KAAD,EAAQ;AAC3D0C,cAAAA,aAAa,EAAE,IAD4C;AAE3DC,cAAAA,iBAAiB,EAAE;AACjBC,gBAAAA,IAAI,EAAE,MADW;AAEjBC,gBAAAA,MAAM,EAAE;AAFS,eAFwC;AAM3DC,cAAAA,kBAAkB,EAAE;AAClBF,gBAAAA,IAAI,EAAE,OADY;AAElBC,gBAAAA,MAAM,EAAE;AAFU;AANuC,aAAR,CAFL,EAExCE,UAFwC,wBAExCA,UAFwC,EAE5BC,SAF4B,wBAE5BA,SAF4B;AAa1CC,YAAAA,YAb0C,GAa3B,WAb2B;AAc1CC,YAAAA,QAd0C,GAc/B,CACf;AAAEH,cAAAA,UAAU,EAAVA;AAAF,aADe,EAEf;AACEI,cAAAA,YAAY,EAAElD,aAAa,CACzB;AAAEmD,gBAAAA,GAAG,EAAEJ,SAAP;AAAkBK,gBAAAA,OAAO,EAAEnD,SAAS,CAACoD;AAArC,eADyB,EAEzBC,MAAM,CAACC,IAAP,CAAYP,YAAZ,EAA0B,MAA1B,CAFyB;AAD7B,aAFe,CAd+B;AAuBhD1C,YAAAA,mBAAmB,CAACQ,kBAApB,CAAuC0C,sBAAvC,CAA8D;AAAA,qBAAMP,QAAN;AAAA,aAA9D,EAvBgD,CAyBhD;;AAzBgD;AAAA,mBA0B1Cf,SAAS,CAACuB,4BAAV,CAAuC5B,KAAvC,CA1B0C;;AAAA;AA4BhD;AACA6B,YAAAA,MAAM,CAACxB,SAAS,CAACyB,eAAX,CAAN,CAAkCC,GAAlC,CAAsCC,OAAtC,CAA8CZ,QAAQ,CAACC,YAAvD;AACAQ,YAAAA,MAAM,CAACxB,SAAS,CAACyB,eAAX,CAAN,CAAkCE,OAAlC,CAA0Cb,YAA1C;;AA9BgD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAhD,GAAF;AAiCAR,EAAAA,EAAE,CAAC,4DAAD,uEAA+D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAIzDN,SAAS,CAAC4B,gCAAV,CAA2CjC,KAA3C,CAJyD;;AAAA;AAM/D;AACA6B,YAAAA,MAAM,CAACpC,iBAAiB,CAACE,iBAAnB,CAAN,CAA4CuC,oBAA5C,CACEL,MAAM,CAACM,gBAAP,CAAwB;AAAExD,cAAAA,EAAE,EAAEF,mBAAmB,CAACE;AAA1B,aAAxB,CADF;;AAP+D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA/D,GAAF;AAWD,CAlEO,CAAR","sourcesContent":["/*\n *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\").\n *  You may not use this file except in compliance with the License.\n *  A copy of the License is located at\n *\n *  http://aws.amazon.com/apache2.0\n *\n *  or in the \"license\" file accompanying this file. This file is distributed\n *  on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n *  express or implied. See the License for the specific language governing\n *  permissions and limitations under the License.\n */\n\nimport React from 'react';\n\nimport { shallow } from 'enzyme';\nimport EnvironmentDetailPage from '../EnvironmentDetailPage';\n\nconst { generateKeyPairSync, publicEncrypt, constants } = require('crypto');\n\njest.mock('@aws-ee/base-ui/dist/helpers/notification');\nconst displayErrorMock = require('@aws-ee/base-ui/dist/helpers/notification');\n\njest.mock('@aws-ee/base-ui/dist/helpers/routing');\nconst gotoMock = require('@aws-ee/base-ui/dist/helpers/routing');\n\nconst environmentInstance = {\n  name: 'name',\n  id: 'id',\n  createdAt: '01-01-1900',\n  createdBy: 'anonymous',\n  status: 'active',\n  projectId: 'projId',\n  isExternal: false,\n  getWindowsPassword: jest.fn(),\n};\n\nconst environmentStore = {\n  load: jest.fn(),\n  startHeartbeat: jest.fn(),\n  ready: true,\n  loading: true,\n  environment: environmentInstance,\n};\n\nconst environmentsStore = {\n  getEnvironmentStore: jest.fn(() => environmentStore),\n  updateEnvironment: jest.fn(),\n};\n\nconst userStore = {};\n\nconst match = {\n  params: {\n    instanceId: 'placeholder',\n  },\n};\nconst event = {\n  preventDefault: jest.fn(),\n  stopPropagation: jest.fn(),\n};\n\ndescribe('EnvironmentDetailPage', () => {\n  let wrapper = null;\n  let container = null;\n  beforeEach(() => {\n    // Render component\n    wrapper = shallow(\n      <EnvironmentDetailPage.WrappedComponent\n        environmentsStore={environmentsStore}\n        userStore={userStore}\n        match={match}\n      />,\n    );\n    // get instance of component\n    container = wrapper.instance();\n\n    // mock display error function\n    displayErrorMock.displayError = jest.fn(x => x);\n\n    // Mock goto function\n    gotoMock.gotoFn = jest.fn(() => jest.fn());\n  });\n\n  it('should accept and decrypt the user password', async () => {\n    // BUILD\n    const { privateKey, publicKey } = generateKeyPairSync('rsa', {\n      modulusLength: 2048,\n      publicKeyEncoding: {\n        type: 'spki',\n        format: 'pem',\n      },\n      privateKeyEncoding: {\n        type: 'pkcs1',\n        format: 'pem',\n      },\n    });\n    const realPassword = 'APASSWORD';\n    const passData = [\n      { privateKey },\n      {\n        passwordData: publicEncrypt(\n          { key: publicKey, padding: constants.RSA_PKCS1_PADDING },\n          Buffer.from(realPassword, 'utf8'),\n        ),\n      },\n    ];\n    environmentInstance.getWindowsPassword.mockImplementationOnce(() => passData);\n\n    // OPERATE\n    await container.handleWindowsPasswordRequest(event);\n\n    // CHECK\n    expect(container.windowsPassword).not.toEqual(passData.passwordData);\n    expect(container.windowsPassword).toEqual(realPassword);\n  });\n\n  it('should update the sharedWithUsers field of the environment', async () => {\n    // BUILD\n\n    // OPERATE\n    await container.handleSubmitSharedWithUsersClick(event);\n\n    // CHECK\n    expect(environmentsStore.updateEnvironment).toHaveBeenCalledWith(\n      expect.objectContaining({ id: environmentInstance.id }),\n    );\n  });\n});\n"],"file":"EnvironmentDetailPage.test.js"}