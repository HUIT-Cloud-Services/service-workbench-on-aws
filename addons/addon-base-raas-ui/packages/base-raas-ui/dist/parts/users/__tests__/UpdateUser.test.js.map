{"version":3,"sources":["../../../../src/parts/users/__tests__/UpdateUser.test.js"],"names":["jest","mock","displayErrorMock","require","userFormUtilsMock","projectsStore","userRolesStore","isInternalUser","fn","val","isInternalGuest","userStore","user","displayName","load","usersStore","updateUser","addUser","deleteUser","awsAccountsStore","authenticationProviderConfigsStore","describe","component","wrapper","beforeEach","displayError","x","displaySuccess","it","instance","username","firstName","lastName","email","userRole","status","form","values","$","isDirty","clear","handleFormSubmission","expect","not","toHaveBeenCalledWith","projectId","objectContaining","toHaveBeenCalled","isRootUser","toIdpFromValue","idpName","authNProviderId","check","error","message"],"mappings":"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","sourcesContent":["/*\n *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\").\n *  You may not use this file except in compliance with the License.\n *  A copy of the License is located at\n *\n *  http://aws.amazon.com/apache2.0\n *\n *  or in the \"license\" file accompanying this file. This file is distributed\n *  on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n *  express or implied. See the License for the specific language governing\n *  permissions and limitations under the License.\n */\n\nimport React from 'react';\nimport { shallow } from 'enzyme';\nimport UpdateUser from '../UpdateUser';\n\njest.mock('@aws-ee/base-ui/dist/helpers/notification');\nconst displayErrorMock = require('@aws-ee/base-ui/dist/helpers/notification');\n\njest.mock('../../../models/forms/UserFormUtils');\nconst userFormUtilsMock = require('../../../models/forms/UserFormUtils');\n\nconst projectsStore = {};\nconst userRolesStore = {\n  isInternalUser: jest.fn(val => val === 'internalUser'),\n  isInternalGuest: jest.fn(val => val === 'internalGuest'),\n};\nconst userStore = {\n  user: {\n    displayName: 'placeholder',\n  },\n  load: jest.fn(),\n};\nconst usersStore = {\n  updateUser: jest.fn(),\n  addUser: jest.fn(),\n  deleteUser: jest.fn(),\n};\nconst awsAccountsStore = {};\nconst authenticationProviderConfigsStore = {};\n\ndescribe('UpdateUser', () => {\n  let component = null;\n  let wrapper = null;\n  beforeEach(() => {\n    // Mock display functions because they don't function correctly in enzyme\n    displayErrorMock.displayError = jest.fn(x => x);\n    displayErrorMock.displaySuccess = jest.fn(x => x);\n  });\n\n  it('should fail because non-admins cannot update identityProviderName', async () => {\n    // BUILD\n    // Render component\n    wrapper = shallow(\n      <UpdateUser.wrappedComponent\n        projectsStore={projectsStore}\n        userRolesStore={userRolesStore}\n        userStore={userStore}\n        usersStore={usersStore}\n        awsAccountsStore={awsAccountsStore}\n        authenticationProviderConfigsStore={authenticationProviderConfigsStore}\n        adminMode={false}\n      />,\n    );\n    // Get instance of the component\n    component = wrapper.instance();\n\n    const user = {\n      username: 'username',\n      firstName: 'fName',\n      lastName: 'lName',\n      email: 'email@example.com',\n      userRole: 'internalUser',\n      status: 'active',\n    };\n    const form = {\n      values: jest.fn(() => user),\n      $: jest.fn(() => {\n        return {\n          isDirty: true,\n        };\n      }),\n      clear: jest.fn(),\n    };\n\n    // OPERATE\n    await component.handleFormSubmission(form);\n\n    // CHECK\n    expect(usersStore.updateUser).not.toHaveBeenCalledWith(user);\n    expect(displayErrorMock.displayError).toHaveBeenCalledWith(\n      'Only admins can update identity provider information for the user',\n    );\n  });\n\n  it('should succeed to update without saving projectId values', async () => {\n    // BUILD\n\n    // Render component\n    wrapper = shallow(\n      <UpdateUser.wrappedComponent\n        projectsStore={projectsStore}\n        userRolesStore={userRolesStore}\n        userStore={userStore}\n        usersStore={usersStore}\n        awsAccountsStore={awsAccountsStore}\n        authenticationProviderConfigsStore={authenticationProviderConfigsStore}\n        adminMode={false}\n      />,\n    );\n\n    // Get instance of the component\n    component = wrapper.instance();\n\n    const user = {\n      username: 'newer_username',\n      firstName: 'hName',\n      lastName: 'nName',\n      email: 'gockn@example.com',\n      userRole: 'internalGuest',\n      status: 'active',\n      projectId: ['potatoface'],\n    };\n\n    const form = {\n      values: jest.fn(() => user),\n      $: jest.fn(() => {\n        return {\n          isDirty: false,\n        };\n      }),\n      clear: jest.fn(),\n    };\n\n    // OPERATE\n    await component.handleFormSubmission(form);\n\n    // CHECK\n    expect(usersStore.updateUser).not.toHaveBeenCalledWith(expect.objectContaining({ projectId: user.projectId }));\n    expect(displayErrorMock.displaySuccess).toHaveBeenCalledWith('Updated user successfully');\n    expect(userStore.load).toHaveBeenCalled();\n  });\n\n  it('should update by deleting current user and adding a new one', async () => {\n    // BUILD\n    const user = {\n      username: 'newest_username',\n      firstName: 'iName',\n      lastName: 'oName',\n      email: 'hpdlo@example.com',\n      userRole: 'internalUser',\n      status: 'active',\n      projectId: ['potatopancake'],\n      isRootUser: false,\n    };\n\n    const form = {\n      values: jest.fn(() => user),\n      $: jest.fn(() => {\n        return {\n          isDirty: true,\n        };\n      }),\n      clear: jest.fn(),\n    };\n\n    userFormUtilsMock.toIdpFromValue = jest.fn(() => {\n      return {\n        idpName: 'example',\n        authNProviderId: 'example2',\n      };\n    });\n\n    // Render component\n    wrapper = shallow(\n      <UpdateUser.wrappedComponent\n        projectsStore={projectsStore}\n        userRolesStore={userRolesStore}\n        userStore={userStore}\n        usersStore={usersStore}\n        awsAccountsStore={awsAccountsStore}\n        authenticationProviderConfigsStore={authenticationProviderConfigsStore}\n        adminMode\n        user={user}\n      />,\n    );\n\n    // Get instance of the component\n    component = wrapper.instance();\n\n    // OPERATE\n    await component.handleFormSubmission(form);\n\n    // CHECK\n    expect(usersStore.addUser).toHaveBeenCalledWith(expect.objectContaining({ projectId: user.projectId }));\n    expect(usersStore.deleteUser).toHaveBeenCalledWith(user);\n    expect(displayErrorMock.displaySuccess).toHaveBeenCalledWith('Updated user successfully');\n    expect(userStore.load).toHaveBeenCalled();\n  });\n\n  it('should fail because of an error being thrown during update', async () => {\n    // BUILD\n\n    // Render component\n    wrapper = shallow(\n      <UpdateUser.wrappedComponent\n        projectsStore={projectsStore}\n        userRolesStore={userRolesStore}\n        userStore={userStore}\n        usersStore={usersStore}\n        awsAccountsStore={awsAccountsStore}\n        authenticationProviderConfigsStore={authenticationProviderConfigsStore}\n        adminMode={false}\n      />,\n    );\n\n    // Get instance of the component\n    component = wrapper.instance();\n\n    const user = {\n      username: 'new_username',\n      firstName: 'gName',\n      lastName: 'mName',\n      email: 'fnbjm@example.com',\n      userRole: 'internalUser',\n      status: 'active',\n    };\n\n    const check = {\n      email: 'fnbjm@example.com',\n      firstName: 'gName',\n      lastName: 'mName',\n    };\n    const error = { message: 'cannot update' };\n    const form = {\n      values: jest.fn(() => user),\n      $: jest.fn(() => {\n        return {\n          isDirty: false,\n        };\n      }),\n      clear: jest.fn(() => {\n        throw error;\n      }),\n    };\n\n    // OPERATE\n    await component.handleFormSubmission(form);\n\n    // CHECK\n    // tries to update\n    expect(usersStore.updateUser).toHaveBeenCalledWith(check);\n    // fails on form.clear()\n    expect(displayErrorMock.displayError).toHaveBeenCalledWith(error);\n  });\n});\n"],"file":"UpdateUser.test.js"}