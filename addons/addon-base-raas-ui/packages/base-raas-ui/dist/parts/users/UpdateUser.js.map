{"version":3,"sources":["../../../src/parts/users/UpdateUser.js"],"names":["UpdateUser","props","handleEditClick","view","handleCancel","form","clear","handleClose","handleFormSubmission","values","isInternalUser","userRolesStore","userRole","isInternalGuest","projectId","firstName","lastName","email","status","isAdmin","identityProviderNameField","$","userToUpdate","getCurrentUser","adminMode","isRootUser","usersStore","isDirty","ns","undefined","idpOptionValue","value","identityProviderName","idpName","authenticationProviderId","authNProviderId","addUser","deleteUser","updateUser","userStore","load","handleDeleteClick","processing","handleApproveDisapproveClick","handleOpen","stopHeartbeat","modalOpen","startHeartbeat","handleFormError","_form","_errors","stores","Stores","awsAccountsStore","projectsStore","authenticationProviderConfigsStore","getStores","content","hasError","error","loading","ready","renderMain","renderTrigger","renderDetailView","renderEditView","getFieldLabel","fieldName","label","toRow","_","get","displayValue","isArray","map","v","k","renderDetailViewButtons","makeButton","color","floated","disabled","attrs","currentUser","cancelButton","onClick","deleteButton","activeButton","user","deactiveButton","editButton","firstNameField","lastNameField","emailField","userRoleField","projectIdField","statusField","identityProviderOptions","getIdentityProviderOptions","userRoleOptions","getUserRoleOptions","projectIdOptions","getProjectOptions","showProjectField","isEmpty","isAdminMode","onCancel","displayName","list","dropdownOptions","React","Component","observable","computed","action"],"mappings":"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","sourcesContent":["/*\n *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\").\n *  You may not use this file except in compliance with the License.\n *  A copy of the License is located at\n *\n *  http://aws.amazon.com/apache2.0\n *\n *  or in the \"license\" file accompanying this file. This file is distributed\n *  on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n *  express or implied. See the License for the specific language governing\n *  permissions and limitations under the License.\n */\n\nimport React from 'react';\nimport { inject, observer } from 'mobx-react';\nimport { decorate, observable, action, computed, runInAction } from 'mobx';\nimport { Button, Header, Label, Segment, Modal, Menu, Icon, Table } from 'semantic-ui-react';\nimport _ from 'lodash';\n\nimport Stores from '@aws-ee/base-ui/dist/models/Stores';\nimport { swallowError } from '@aws-ee/base-ui/dist/helpers/utils';\n\nimport ErrorBox from '@aws-ee/base-ui/dist/parts/helpers/ErrorBox';\nimport BasicProgressPlaceholder from '@aws-ee/base-ui/dist/parts/helpers/BasicProgressPlaceholder';\nimport Form from '@aws-ee/base-ui/dist/parts/helpers/fields/Form';\nimport Input from '@aws-ee/base-ui/dist/parts/helpers/fields/Input';\nimport DropDown from '@aws-ee/base-ui/dist/parts/helpers/fields/DropDown';\nimport YesNo from '@aws-ee/base-ui/dist/parts/helpers/fields/YesNo';\nimport { displayError, displaySuccess } from '@aws-ee/base-ui/dist/helpers/notification';\nimport { getUpdateUserConfigForm } from '../../models/forms/UpdateUserConfig';\nimport { toIdpFromValue, toIdpOptions } from '../../models/forms/UserFormUtils';\n\nclass UpdateUser extends React.Component {\n  constructor(props) {\n    super(props);\n    runInAction(() => {\n      this.stores = new Stores([\n        this.userStore,\n        this.userRolesStore,\n        this.awsAccountsStore,\n        this.projectsStore,\n        this.authenticationProviderConfigsStore,\n      ]);\n      this.modalOpen = false;\n      this.processing = false;\n      this.view = 'detail'; // view mode or edit mode\n    });\n    this.form = getUpdateUserConfigForm(this.getCurrentUser());\n  }\n\n  componentDidMount() {\n    swallowError(this.getStores().load());\n  }\n\n  render() {\n    const stores = this.getStores();\n    let content = null;\n    if (stores.hasError) {\n      content = <ErrorBox error={stores.error} className=\"p0 mb3\" />;\n    } else if (stores.loading) {\n      content = <BasicProgressPlaceholder />;\n    } else if (stores.ready) {\n      content = this.renderMain();\n    } else {\n      content = null;\n    }\n\n    return (\n      <Modal closeIcon trigger={this.renderTrigger()} open={this.modalOpen} onClose={this.handleClose}>\n        <div className=\"mt2 animated fadeIn\">\n          <Header as=\"h3\" icon textAlign=\"center\" className=\"mt3\" color=\"grey\">\n            User Detail\n          </Header>\n          <div className=\"mt3 ml3 mr3 animated fadeIn\">{content}</div>\n        </div>\n      </Modal>\n    );\n  }\n\n  renderMain() {\n    let content = null;\n    if (this.view === 'detail') {\n      content = this.renderDetailView();\n    } else if (this.view === 'edit') {\n      content = this.renderEditView();\n    }\n    return content;\n  }\n\n  renderDetailView() {\n    const getFieldLabel = fieldName => this.form.$(fieldName).label;\n    const toRow = fieldName => {\n      const value = _.get(this.getCurrentUser(), fieldName);\n      const displayValue = _.isArray(value) ? _.map(value, (v, k) => <Label key={k} content={v} />) : value;\n      return (\n        <>\n          <Table.Cell collapsing active>\n            {getFieldLabel(fieldName)}\n          </Table.Cell>\n          <Table.Cell>{displayValue}</Table.Cell>\n        </>\n      );\n    };\n\n    return (\n      <Segment basic className=\"ui fluid form mb4\">\n        <Table celled>\n          <Table.Body>\n            <Table.Row>{toRow('username')}</Table.Row>\n            <Table.Row>{toRow('firstName')}</Table.Row>\n            <Table.Row>{toRow('lastName')}</Table.Row>\n            <Table.Row>{toRow('email')}</Table.Row>\n            {this.getCurrentUser().isRootUser ? null : (\n              <>\n                <Table.Row>{toRow('userRole')}</Table.Row>\n                <Table.Row>{toRow('identityProviderName')}</Table.Row>\n                <Table.Row>{toRow('projectId')}</Table.Row>\n                {this.getCurrentUser().status === 'pending' && <Table.Row>{toRow('applyReason')}</Table.Row>}\n                <Table.Row>{toRow('status')}</Table.Row>\n              </>\n            )}\n          </Table.Body>\n        </Table>\n        {this.renderDetailViewButtons()}\n      </Segment>\n    );\n  }\n\n  renderDetailViewButtons() {\n    const makeButton = ({ label = '', color = 'blue', floated = 'left', disabled = false, ...props }) => {\n      const attrs = {};\n      if (color) attrs.color = color;\n      return (\n        <Button floated={floated} disabled={disabled} className=\"ml2\" {...attrs} {...props}>\n          {label}\n        </Button>\n      );\n    };\n\n    const currentUser = this.getCurrentUser();\n\n    const cancelButton = makeButton({\n      label: 'Cancel',\n      floated: 'left',\n      color: '',\n      onClick: this.handleCancel,\n      disabled: this.processing,\n    });\n\n    const deleteButton =\n      // TODO: deletion actions should be confirmed by user first\n      this.view === 'detail'\n        ? makeButton({\n            label: 'Delete',\n            floated: 'right',\n            color: 'red',\n            onClick: this.handleDeleteClick,\n            disabled: currentUser.isRootUser || this.processing,\n          })\n        : '';\n\n    const activeButton =\n      this.props.user.status === 'pending' || this.props.user.status === 'inactive'\n        ? makeButton({\n            label: 'Activate User',\n            floated: 'right',\n            color: 'blue',\n            onClick: () => this.handleApproveDisapproveClick('active'),\n            disabled: this.processing,\n          })\n        : '';\n\n    const deactiveButton =\n      this.props.user.status === 'active' || this.props.user.status === 'pending'\n        ? makeButton({\n            label: 'Deactivate User',\n            floated: 'right',\n            disabled: currentUser.isRootUser || this.processing,\n            onClick: () => this.handleApproveDisapproveClick('inactive'),\n          })\n        : '';\n\n    const editButton =\n      currentUser.status === 'active' || currentUser.status === 'inactive' // do not show \"edit\" button for other status(es) such as \"pending\"\n        ? makeButton({ label: 'Edit', onClick: this.handleEditClick, floated: 'right', disabled: this.processing })\n        : '';\n\n    return this.props.adminMode ? (\n      <div className=\"mt4 mb4\">\n        <Modal.Actions>\n          {cancelButton}\n          {deleteButton}\n          {deactiveButton}\n          {activeButton}\n          {editButton}\n        </Modal.Actions>\n      </div>\n    ) : (\n      <div className=\"mt4 mb4\">\n        <Modal.Actions>\n          {cancelButton}\n          {editButton}\n        </Modal.Actions>\n      </div>\n    );\n  }\n\n  renderEditView() {\n    const form = this.form;\n\n    const firstNameField = form.$('firstName');\n    const lastNameField = form.$('lastName');\n    const emailField = form.$('email');\n    const identityProviderNameField = form.$('identityProviderName');\n    const userRoleField = form.$('userRole');\n    const projectIdField = form.$('projectId');\n    const statusField = form.$('status');\n\n    const identityProviderOptions = this.getIdentityProviderOptions();\n    const userRoleOptions = this.getUserRoleOptions();\n    const projectIdOptions = this.getProjectOptions();\n\n    const isInternalUser = this.userRolesStore.isInternalUser(userRoleField.value);\n    const isInternalGuest = this.userRolesStore.isInternalGuest(userRoleField.value);\n    const showProjectField = !_.isEmpty(projectIdOptions) && isInternalUser && !isInternalGuest;\n\n    const isAdminMode = this.props.adminMode;\n    return (\n      <Segment clearing className=\"p3 mb4\">\n        <Form\n          form={form}\n          onCancel={this.handleCancel}\n          onSuccess={this.handleFormSubmission}\n          onError={this.handleFormError}\n        >\n          {({ processing, onCancel }) => (\n            <>\n              <Input field={firstNameField} disabled={processing} />\n              <Input field={lastNameField} disabled={processing} />\n              <Input field={emailField} disabled={processing} />\n              {this.getCurrentUser().isRootUser ? null : (\n                <>\n                  {isAdminMode && (\n                    <DropDown\n                      field={identityProviderNameField}\n                      options={identityProviderOptions}\n                      selection\n                      fluid\n                      disabled={processing}\n                    />\n                  )}\n                  {isAdminMode && (\n                    <DropDown field={userRoleField} options={userRoleOptions} selection fluid disabled={processing} />\n                  )}\n\n                  {isAdminMode && showProjectField && (\n                    <DropDown\n                      field={projectIdField}\n                      options={projectIdOptions}\n                      multiple\n                      selection\n                      clearable\n                      fluid\n                      disabled={processing}\n                    />\n                  )}\n\n                  <YesNo field={statusField} disabled={processing} />\n                </>\n              )}\n\n              <div className=\"mt3\">\n                <Button floated=\"right\" color=\"blue\" icon disabled={processing} className=\"ml2\" type=\"submit\">\n                  Save\n                </Button>\n                <Button floated=\"right\" disabled={processing} onClick={onCancel}>\n                  Cancel\n                </Button>\n              </div>\n            </>\n          )}\n        </Form>\n      </Segment>\n    );\n  }\n\n  renderTrigger() {\n    let content = null;\n    if (this.props.adminMode) {\n      content = (\n        <Button size=\"mini\" compact color=\"blue\" onClick={this.handleOpen}>\n          Detail\n        </Button>\n      );\n    } else {\n      content = (\n        <Menu.Item onClick={this.handleOpen}>\n          <Icon name=\"user\" /> {this.props.userStore.user.displayName}\n        </Menu.Item>\n      );\n    }\n    return content;\n  }\n\n  handleEditClick = () => {\n    this.view = 'edit';\n  };\n\n  handleCancel = () => {\n    this.form.clear();\n    if (this.view === 'edit') {\n      // if it's in edit mode then switch to detail view mode\n      this.view = 'detail';\n    } else {\n      // if not in edit mode then close\n      this.handleClose();\n    }\n  };\n\n  handleFormSubmission = async form => {\n    const values = form.values();\n    const isInternalUser = this.userRolesStore.isInternalUser(values.userRole);\n    const isInternalGuest = this.userRolesStore.isInternalGuest(values.userRole);\n    let projectId = values.projectId || [];\n    if (!isInternalUser || isInternalGuest) {\n      // Pass projectId(s) only if the user's role is internal role and if the user is not a guest.\n      // Pass empty array otherwise.\n      projectId = [];\n    }\n\n    const { firstName, lastName, email, userRole, status } = values;\n    const isAdmin = userRole === 'admin';\n    const identityProviderNameField = form.$('identityProviderName');\n\n    let userToUpdate = { ...this.getCurrentUser(), firstName, lastName, email };\n    if (this.props.adminMode && !this.getCurrentUser().isRootUser) {\n      userToUpdate = { ...userToUpdate, userRole, isAdmin, projectId, status };\n    }\n\n    try {\n      const usersStore = this.usersStore;\n      if (identityProviderNameField.isDirty) {\n        // Change in identityProviderName so delete existing user and add it again with new identityProviderName\n        if (this.props.adminMode) {\n          // clear out the user namespace as it will be re-derived based on authenticationProviderId and\n          // identityProviderName on server side\n          userToUpdate.ns = undefined;\n          // The values.identityProviderName is in JSON string format\n          // containing authentication provider id as well as identity provider name\n          // See \"src/models/forms/UserFormUtils.js\" for more details.\n          const idpOptionValue = toIdpFromValue(identityProviderNameField.value);\n          userToUpdate.identityProviderName = idpOptionValue.idpName;\n          userToUpdate.authenticationProviderId = idpOptionValue.authNProviderId;\n          await usersStore.addUser(userToUpdate);\n\n          // Delete existing user first\n          await usersStore.deleteUser(this.getCurrentUser());\n        } else {\n          displayError('Only admins can update identity provider information for the user');\n        }\n      } else {\n        // No change in identityProviderName so simply update the user\n\n        // allow updating only firstName, lastName and email in case self-service update (i.e., adminMode = false)\n        // or if the user being updated is a root user (i.e., this.getCurrentUser().isRootUser = true)\n        await usersStore.updateUser(userToUpdate);\n      }\n      form.clear();\n      displaySuccess('Updated user successfully');\n\n      // reload the current user's store after user updates, in case the currently\n      // logged in user is updated\n      await this.userStore.load();\n\n      this.handleClose();\n    } catch (error) {\n      displayError(error);\n    }\n  };\n\n  handleDeleteClick = async () => {\n    try {\n      this.processing = true;\n      await this.usersStore.deleteUser(this.getCurrentUser());\n    } catch (error) {\n      displayError(error);\n    }\n    runInAction(() => {\n      this.processing = false;\n    });\n    this.handleClose();\n  };\n\n  handleApproveDisapproveClick = async status => {\n    try {\n      this.processing = true;\n      await this.usersStore.updateUser({ ...this.getCurrentUser(), status });\n\n      // reload the current user's store after user updates, in case the currently\n      // logged in user is updated\n      await this.userStore.load();\n    } catch (err) {\n      displayError(err);\n    }\n    runInAction(() => {\n      this.processing = false;\n    });\n    this.handleClose();\n  };\n\n  getStores() {\n    return this.stores;\n  }\n\n  handleOpen = () => {\n    this.usersStore.stopHeartbeat();\n\n    // Need to recreate form based on the user being passed (i.e., getCurrentUser) to make sure the form field values\n    // are updated as per the latest user information\n    this.form = getUpdateUserConfigForm(this.getCurrentUser());\n    this.modalOpen = true;\n  };\n\n  handleClose = () => {\n    this.usersStore.startHeartbeat();\n    this.modalOpen = false;\n  };\n\n  // eslint-disable-next-line no-unused-vars\n  handleFormError = (_form, _errors) => {\n    // We don't need to do anything here\n  };\n\n  getIdentityProviderOptions() {\n    return toIdpOptions(this.authenticationProviderConfigsStore.list);\n  }\n\n  getUserRoleOptions() {\n    return this.userRolesStore.dropdownOptions;\n  }\n\n  getProjectOptions() {\n    return this.projectsStore.dropdownOptions;\n  }\n\n  getCurrentUser() {\n    return this.props.user;\n  }\n\n  get userStore() {\n    return this.props.userStore;\n  }\n\n  get usersStore() {\n    return this.props.usersStore;\n  }\n\n  get userRolesStore() {\n    return this.props.userRolesStore;\n  }\n\n  get awsAccountsStore() {\n    return this.props.awsAccountsStore;\n  }\n\n  get projectsStore() {\n    return this.props.projectsStore;\n  }\n\n  get authenticationProviderConfigsStore() {\n    return this.props.authenticationProviderConfigsStore;\n  }\n}\n\n// see https://medium.com/@mweststrate/mobx-4-better-simpler-faster-smaller-c1fbc08008da\ndecorate(UpdateUser, {\n  modalOpen: observable,\n  view: observable,\n  processing: observable,\n\n  authenticationProviderConfigsStore: computed,\n  projectsStore: computed,\n  awsAccountsStore: computed,\n  userRolesStore: computed,\n  usersStore: computed,\n  userStore: computed,\n\n  handleOpen: action,\n  handleClose: action,\n  handleCancel: action,\n\n  handleEditClick: action,\n  handleDeleteClick: action,\n  handleApproveDisapproveClick: action,\n\n  handleFormSubmission: action,\n});\nexport default inject('authenticationProviderConfigsStore')(observer(UpdateUser));\n"],"file":"UpdateUser.js"}