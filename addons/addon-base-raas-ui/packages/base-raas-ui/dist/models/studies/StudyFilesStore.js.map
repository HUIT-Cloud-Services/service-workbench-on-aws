{"version":3,"sources":["../../../src/models/studies/StudyFilesStore.js"],"names":["StudyFile","types","model","filename","string","size","integer","lastModified","Date","StudyFilesStore","BaseStore","named","props","studyId","files","array","tickPeriod","actions","self","superCleanup","cleanup","doLoad","comparator","fileA","fileB","removed","_","differenceWith","added","length","sort","localeCompare","map","file","runInAction","replace","clear","views","empty"],"mappings":";;;;;;;AAeA;;AACA;;AACA;;AAEA;;;;;;;;;;;;;;AAEA;AACA;AACA;AACA,IAAMA,SAAS,GAAGC,qBAAMC,KAAN,CAAY,WAAZ,EAAyB;AACzCC,EAAAA,QAAQ,EAAEF,qBAAMG,MADyB;AAEzCC,EAAAA,IAAI,EAAEJ,qBAAMK,OAF6B;AAGzCC,EAAAA,YAAY,EAAEN,qBAAMO;AAHqB,CAAzB,CAAlB,C,CAMA;AACA;AACA;;;AACA,IAAMC,eAAe,GAAGC,qBAAUC,KAAV,CAAgB,iBAAhB,EACrBC,KADqB,CACf;AACLC,EAAAA,OAAO,EAAE,EADJ;AAELC,EAAAA,KAAK,EAAEb,qBAAMc,KAAN,CAAYf,SAAZ,CAFF;AAGLgB,EAAAA,UAAU,EAAE,IAAI,IAHX,CAGiB;;AAHjB,CADe,EAOrBC,OAPqB,CAOb,UAAAC,IAAI,EAAI;AACf;AACA,MAAMC,YAAY,GAAGD,IAAI,CAACE,OAA1B;AAEA,SAAO;AACCC,IAAAA,MADD,oBACU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAEK,yBAAeH,IAAI,CAACL,OAApB,CAFL;;AAAA;AAETC,gBAAAA,KAFS;;AAIb;AACMQ,gBAAAA,UALO,GAKM,SAAbA,UAAa,CAACC,KAAD,EAAQC,KAAR;AAAA,yBAAkBD,KAAK,CAACpB,QAAN,KAAmBqB,KAAK,CAACrB,QAA3C;AAAA,iBALN;;AAMPsB,gBAAAA,OANO,GAMGC,mBAAEC,cAAF,CAAiBT,IAAI,CAACJ,KAAtB,EAA6BA,KAA7B,EAAoCQ,UAApC,CANH;AAOPM,gBAAAA,KAPO,GAOCF,mBAAEC,cAAF,CAAiBb,KAAjB,EAAwBI,IAAI,CAACJ,KAA7B,EAAoCQ,UAApC,CAPD,EASb;;AACA,oBAAIG,OAAO,CAACI,MAAR,KAAmB,CAAnB,IAAwBD,KAAK,CAACC,MAAN,KAAiB,CAA7C,EAAgD;AAC9C;AACAf,kBAAAA,KAAK,GAAGA,KAAK,CACVgB,IADK,CACA,UAACP,KAAD,EAAQC,KAAR;AAAA,2BAAkBD,KAAK,CAACpB,QAAN,CAAe4B,aAAf,CAA6BP,KAAK,CAACrB,QAAnC,CAAlB;AAAA,mBADA,EAEL6B,GAFK,CAED,UAAAC,IAAI;AAAA,6CACJA,IADI;AAEP1B,sBAAAA,YAAY,EAAE,IAAIC,IAAJ,CAASyB,IAAI,CAAC1B,YAAd;AAFP;AAAA,mBAFH,CAAR,CAF8C,CAS9C;;AACAW,kBAAAA,IAAI,CAACgB,WAAL,CAAiB,YAAM;AACrBhB,oBAAAA,IAAI,CAACJ,KAAL,CAAWqB,OAAX,CAAmBrB,KAAnB;AACD,mBAFD;AAGD;;AAvBY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAwBd,KAzBI;AA2BLM,IAAAA,OAAO,EAAE,mBAAM;AACbF,MAAAA,IAAI,CAACJ,KAAL,CAAWsB,KAAX;AACAjB,MAAAA,YAAY;AACb;AA9BI,GAAP;AAgCD,CA3CqB,EA6CrBkB,KA7CqB,CA6Cf,UAAAnB,IAAI;AAAA,SAAK;AACd,QAAIoB,KAAJ,GAAY;AACV,aAAOpB,IAAI,CAACJ,KAAL,CAAWe,MAAX,KAAsB,CAA7B;AACD;;AAHa,GAAL;AAAA,CA7CW,CAAxB,C,CAmDA;AACA;AAC4B","sourcesContent":["/*\n *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\").\n *  You may not use this file except in compliance with the License.\n *  A copy of the License is located at\n *\n *  http://aws.amazon.com/apache2.0\n *\n *  or in the \"license\" file accompanying this file. This file is distributed\n *  on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n *  express or implied. See the License for the specific language governing\n *  permissions and limitations under the License.\n */\n\nimport _ from 'lodash';\nimport { types } from 'mobx-state-tree';\nimport { BaseStore } from '@aws-ee/base-ui/dist/models/BaseStore';\n\nimport { listStudyFiles } from '../../helpers/api';\n\n// ==================================================================\n// StudyFile\n// ==================================================================\nconst StudyFile = types.model('StudyFile', {\n  filename: types.string,\n  size: types.integer,\n  lastModified: types.Date,\n});\n\n// ==================================================================\n// StudyFiles\n// ==================================================================\nconst StudyFilesStore = BaseStore.named('StudyFilesStore')\n  .props({\n    studyId: '',\n    files: types.array(StudyFile),\n    tickPeriod: 5 * 1000, // 5 seconds\n  })\n\n  .actions(self => {\n    // save the base implementation of cleanup\n    const superCleanup = self.cleanup;\n\n    return {\n      async doLoad() {\n        // Retrieve files\n        let files = await listStudyFiles(self.studyId);\n\n        // Determine which files were added or removed\n        const comparator = (fileA, fileB) => fileA.filename === fileB.filename;\n        const removed = _.differenceWith(self.files, files, comparator);\n        const added = _.differenceWith(files, self.files, comparator);\n\n        // Only update store when needed to avoid unnecessary re-rendering\n        if (removed.length !== 0 || added.length !== 0) {\n          // Sort files by name and cast lastModified as Date()\n          files = files\n            .sort((fileA, fileB) => fileA.filename.localeCompare(fileB.filename))\n            .map(file => ({\n              ...file,\n              lastModified: new Date(file.lastModified),\n            }));\n\n          // Update store\n          self.runInAction(() => {\n            self.files.replace(files);\n          });\n        }\n      },\n\n      cleanup: () => {\n        self.files.clear();\n        superCleanup();\n      },\n    };\n  })\n\n  .views(self => ({\n    get empty() {\n      return self.files.length === 0;\n    },\n  }));\n\n// Note: Do NOT register this in the global context, if you want to gain access to an instance\n//       use study.getFilesStore()\nexport { StudyFilesStore }; // eslint-disable-line import/prefer-default-export\n"],"file":"StudyFilesStore.js"}