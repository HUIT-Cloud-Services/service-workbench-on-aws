{"version":3,"sources":["../../../src/models/studies/StudyPermissionsStore.js"],"names":["StudyPermissionsStore","BaseStore","named","props","studyId","types","identifier","studyPermissions","maybe","StudyPermissions","tickPeriod","actions","self","superCleanup","cleanup","doLoad","newPermissions","_","isEqual","runInAction","update","selectedUserIds","updateRequest","usersToAdd","usersToRemove","userTypes","forEach","type","userToRequestFormat","uid","permissionLevel","push","map","differenceWith","load"],"mappings":";;;;;;;AAgBA;;AACA;;AACA;;AAEA;;AACA;;;;;;;;;;;;;;;;;;;;AAEA;AACA;AACA;AACA,IAAMA,qBAAqB,GAAGC,qBAAUC,KAAV,CAAgB,uBAAhB,EAC3BC,KAD2B,CACrB;AACLC,EAAAA,OAAO,EAAEC,qBAAMC,UADV;AAELC,EAAAA,gBAAgB,EAAEF,qBAAMG,KAAN,CAAYC,kCAAZ,CAFb;AAGLC,EAAAA,UAAU,EAAE,MAAM,IAHb,CAGmB;;AAHnB,CADqB,EAO3BC,OAP2B,CAOnB,UAAAC,IAAI,EAAI;AACf;AACA,MAAMC,YAAY,GAAGD,IAAI,CAACE,OAA1B;AAEA,SAAO;AACLC,IAAAA,MAAM;AAAA,4EAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACuB,8BAAoBH,IAAI,CAACR,OAAzB,CADvB;;AAAA;AACAY,gBAAAA,cADA;;AAEN,oBAAI,CAACJ,IAAI,CAACL,gBAAN,IAA0B,CAACU,mBAAEC,OAAF,CAAUN,IAAI,CAACL,gBAAf,EAAiCS,cAAjC,CAA/B,EAAiF;AAC/EJ,kBAAAA,IAAI,CAACO,WAAL,CAAiB,YAAM;AACrBP,oBAAAA,IAAI,CAACL,gBAAL,GAAwBS,cAAxB;AACD,mBAFD;AAGD;;AANK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAF;;AAAA;AAAA;AAAA;;AAAA;AAAA,OADD;AAULF,IAAAA,OAAO,EAAE,mBAAM;AACbD,MAAAA,YAAY;AACb,KAZI;AAcLO,IAAAA,MAAM;AAAA,4EAAE,kBAAMC,eAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AACAC,gBAAAA,aADA,GACgB;AAAEC,kBAAAA,UAAU,EAAE,EAAd;AAAkBC,kBAAAA,aAAa,EAAE;AAAjC,iBADhB;AAGNZ,gBAAAA,IAAI,CAACL,gBAAL,CAAsBkB,SAAtB,CAAgCC,OAAhC,CAAwC,UAAAC,IAAI,EAAI;AAAA;;AAC9C,sBAAMC,mBAAmB,GAAG,SAAtBA,mBAAsB,CAAAC,GAAG;AAAA,2BAAK;AAAEA,sBAAAA,GAAG,EAAHA,GAAF;AAAOC,sBAAAA,eAAe,EAAEH;AAAxB,qBAAL;AAAA,mBAA/B,CAD8C,CAG9C;;;AACA,2CAAAL,aAAa,CAACC,UAAd,EAAyBQ,IAAzB,iDAAiCd,mBAAEe,GAAF,CAAMX,eAAe,CAACM,IAAD,CAArB,EAA6BC,mBAA7B,CAAjC,GAJ8C,CAM9C;;;AACA,4CAAAN,aAAa,CAACE,aAAd,EAA4BO,IAA5B,kDACKd,mBAAEgB,cAAF,CAAiBrB,IAAI,CAACL,gBAAL,WAAyBoB,IAAzB,WAAjB,EAAwDN,eAAe,CAACM,IAAD,CAAvE,EAA+EV,mBAAEC,OAAjF,EAA0Fc,GAA1F,CACDJ,mBADC,CADL;AAKD,iBAZD,EAHM,CAiBN;;AAjBM;AAAA,uBAkBA,iCAAuBhB,IAAI,CAACR,OAA5B,EAAqCkB,aAArC,CAlBA;;AAAA;AAAA;AAAA,uBAmBAV,IAAI,CAACsB,IAAL,EAnBA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAF;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAdD,GAAP;AAoCD,CA/C2B,CAA9B","sourcesContent":["/*\n *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\").\n *  You may not use this file except in compliance with the License.\n *  A copy of the License is located at\n *\n *  http://aws.amazon.com/apache2.0\n *\n *  or in the \"license\" file accompanying this file. This file is distributed\n *  on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n *  express or implied. See the License for the specific language governing\n *  permissions and limitations under the License.\n */\n\n/* eslint-disable import/prefer-default-export */\nimport _ from 'lodash';\nimport { types } from 'mobx-state-tree';\nimport { BaseStore } from '@aws-ee/base-ui/dist/models/BaseStore';\n\nimport { getStudyPermissions, updateStudyPermissions } from '../../helpers/api';\nimport { StudyPermissions } from './StudyPermissions';\n\n// ==================================================================\n// StudyStore\n// ==================================================================\nconst StudyPermissionsStore = BaseStore.named('StudyPermissionsStore')\n  .props({\n    studyId: types.identifier,\n    studyPermissions: types.maybe(StudyPermissions),\n    tickPeriod: 300 * 1000, // 5 minutes\n  })\n\n  .actions(self => {\n    // save the base implementation of cleanup\n    const superCleanup = self.cleanup;\n\n    return {\n      doLoad: async () => {\n        const newPermissions = await getStudyPermissions(self.studyId);\n        if (!self.studyPermissions || !_.isEqual(self.studyPermissions, newPermissions)) {\n          self.runInAction(() => {\n            self.studyPermissions = newPermissions;\n          });\n        }\n      },\n\n      cleanup: () => {\n        superCleanup();\n      },\n\n      update: async selectedUserIds => {\n        const updateRequest = { usersToAdd: [], usersToRemove: [] };\n\n        self.studyPermissions.userTypes.forEach(type => {\n          const userToRequestFormat = uid => ({ uid, permissionLevel: type });\n\n          // Set selected users as \"usersToAdd\" (API is idempotent)\n          updateRequest.usersToAdd.push(..._.map(selectedUserIds[type], userToRequestFormat));\n\n          // Set removed users as \"usersToRemove\"\n          updateRequest.usersToRemove.push(\n            ..._.differenceWith(self.studyPermissions[`${type}Users`], selectedUserIds[type], _.isEqual).map(\n              userToRequestFormat,\n            ),\n          );\n        });\n\n        // Perform update and reload store\n        await updateStudyPermissions(self.studyId, updateRequest);\n        await self.load();\n      },\n    };\n  });\n\nexport { StudyPermissionsStore };\n"],"file":"StudyPermissionsStore.js"}