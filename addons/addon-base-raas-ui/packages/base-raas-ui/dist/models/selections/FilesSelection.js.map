{"version":3,"sources":["../../../src/models/selections/FilesSelection.js"],"names":["File","types","model","id","identifier","name","description","maybeNull","string","accessStatus","FilesSelection","files","optional","map","actions","self","setFile","file","set","deleteFile","cleanup","clear","setFiles","filesMapSnapshot","views","hasFile","has","empty","size","count","studiesCount","studyIdMap","forEach","entry","studyId","_","studiesCountByStatus","state","studiesCountByNotStatus","fileNames","names","push","groupByStudy","values","isArray","groupNotApprovedByStudy","countByStatus","counter","registerContextItems","appContext","filesSelection","create"],"mappings":"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","sourcesContent":["/*\n *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\").\n *  You may not use this file except in compliance with the License.\n *  A copy of the License is located at\n *\n *  http://aws.amazon.com/apache2.0\n *\n *  or in the \"license\" file accompanying this file. This file is distributed\n *  on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n *  express or implied. See the License for the specific language governing\n *  permissions and limitations under the License.\n */\n\nimport _ from 'lodash';\nimport { types, applySnapshot } from 'mobx-state-tree';\n\n// TODO: Improve file model\n// const File2 = types.model('File2', {\n//   name: '',\n//   size: types.optional(types.number, 0),\n// });\n\n// TODO this should have been named 'Run'\nconst File = types.model('File', {\n  id: types.identifier,\n  name: '',\n  description: types.maybeNull(types.string),\n  accessStatus: '',\n});\n\n// TODO this should have been named 'RunsSelection'\nconst FilesSelection = types\n  .model('FilesSelection', {\n    files: types.optional(types.map(File), {}),\n  })\n  .actions(self => ({\n    setFile(file) {\n      self.files.set(file.id, file);\n    },\n    deleteFile(id) {\n      self.files.delete(id);\n    },\n    cleanup() {\n      self.files.clear();\n    },\n    setFiles(filesMapSnapshot) {\n      applySnapshot(self.files, filesMapSnapshot);\n    },\n  }))\n  .views(self => ({\n    hasFile(id) {\n      return self.files.has(id);\n    },\n    get empty() {\n      return self.files.size === 0;\n    },\n    get count() {\n      return self.files.size;\n    },\n    get studiesCount() {\n      const studyIdMap = {};\n      self.files.forEach(entry => {\n        studyIdMap[entry.studyId] = true;\n      });\n\n      return _.size(studyIdMap);\n    },\n    studiesCountByStatus: state => {\n      const studyIdMap = {};\n      self.files.forEach(entry => {\n        if (entry.accessStatus === state) studyIdMap[entry.studyId] = true;\n      });\n\n      return _.size(studyIdMap);\n    },\n    studiesCountByNotStatus: state => {\n      const studyIdMap = {};\n      self.files.forEach(entry => {\n        if (entry.accessStatus !== state) studyIdMap[entry.studyId] = true;\n      });\n\n      return _.size(studyIdMap);\n    },\n    get fileNames() {\n      const names = [];\n      self.files.forEach(entry => {\n        names.push(entry.id);\n      });\n\n      return names;\n    },\n    groupByStudy: () => {\n      const studyIdMap = {};\n      self.files.forEach(entry => {\n        const values = studyIdMap[entry.studyId];\n        if (_.isArray(values)) {\n          values.push(entry);\n        } else {\n          studyIdMap[entry.studyId] = [entry];\n        }\n      });\n\n      return studyIdMap;\n    },\n    groupNotApprovedByStudy: () => {\n      const studyIdMap = {};\n      self.files.forEach(entry => {\n        if (entry.accessStatus === 'approved') return;\n        const values = studyIdMap[entry.studyId];\n        if (_.isArray(values)) {\n          values.push(entry);\n        } else {\n          studyIdMap[entry.studyId] = [entry];\n        }\n      });\n\n      return studyIdMap;\n    },\n    countByStatus: state => {\n      let counter = 0;\n      self.files.forEach(file => {\n        if (file.accessStatus === state) counter += 1;\n      });\n\n      return counter;\n    },\n  }));\n\nfunction registerContextItems(appContext) {\n  appContext.filesSelection = FilesSelection.create({}, appContext);\n}\n\nexport { FilesSelection, registerContextItems };\n"],"file":"FilesSelection.js"}