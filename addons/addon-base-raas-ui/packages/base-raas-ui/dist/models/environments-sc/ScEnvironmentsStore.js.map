{"version":3,"sources":["../../../src/models/environments-sc/ScEnvironmentsStore.js"],"names":["filterNames","ALL","AVAILABLE","STOPPED","PENDING","ERRORED","TERMINATED","filters","env","status","ScEnvironmentsStore","BaseStore","named","props","environments","types","optional","map","ScEnvironment","environmentStores","ScEnvironmentStore","connectionStores","ScEnvConnectionStore","tickPeriod","actions","self","superCleanup","cleanup","doLoad","runInAction","exiting","newItem","setScEnvironment","addScEnvironment","rawEnvironment","id","previous","get","put","createScEnvironment","environment","result","getScEnvironment","terminateScEnvironment","setStatus","startScEnvironment","stopScEnvironment","getScEnvironmentStore","envId","entry","set","create","getScEnvConnectionStore","clear","views","empty","size","total","list","_","orderBy","filtered","filterName","filter","canChangeState","outputs","forEach","output","OutputKey","user","userStore","registerContextItems","appContext","scEnvironmentsStore"],"mappings":"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","sourcesContent":["import _ from 'lodash';\nimport { values } from 'mobx';\nimport { getEnv, types } from 'mobx-state-tree';\nimport { consolidateToMap } from '@aws-ee/base-ui/dist/helpers/utils';\nimport { BaseStore } from '@aws-ee/base-ui/dist/models/BaseStore';\n\nimport {\n  getScEnvironments,\n  createScEnvironment,\n  deleteScEnvironment,\n  startScEnvironment,\n  stopScEnvironment,\n} from '../../helpers/api';\nimport { ScEnvironment } from './ScEnvironment';\nimport { ScEnvironmentStore } from './ScEnvironmentStore';\nimport { ScEnvConnectionStore } from './ScEnvConnectionStore';\n\nconst filterNames = {\n  ALL: 'all',\n  AVAILABLE: 'available',\n  STOPPED: 'stopped',\n  PENDING: 'pending',\n  ERRORED: 'errored',\n  TERMINATED: 'terminated',\n};\n\n// A map, with the key being the filter name and the value being the function that will be used to filter the workspace\nconst filters = {\n  [filterNames.ALL]: () => true,\n  [filterNames.AVAILABLE]: env => env.status === 'COMPLETED' || env.status === 'TAINTED',\n  [filterNames.STOPPED]: env => env.status === 'STOPPED',\n  [filterNames.PENDING]: env =>\n    env.status === 'PENDING' || env.status === 'TERMINATING' || env.status === 'STARTING' || env.status === 'STOPPING',\n  [filterNames.ERRORED]: env =>\n    env.status === 'FAILED' ||\n    env.status === 'TERMINATING_FAILED' ||\n    env.status === 'STARTING_FAILED' ||\n    env.status === 'STOPPING_FAILED',\n  [filterNames.TERMINATED]: env => env.status === 'TERMINATED',\n};\n\n// ==================================================================\n// ScEnvironmentsStore\n// ==================================================================\nconst ScEnvironmentsStore = BaseStore.named('ScEnvironmentsStore')\n  .props({\n    environments: types.optional(types.map(ScEnvironment), {}),\n    environmentStores: types.optional(types.map(ScEnvironmentStore), {}),\n    connectionStores: types.optional(types.map(ScEnvConnectionStore), {}),\n    tickPeriod: 30 * 1000, // 30 seconds\n  })\n\n  .actions(self => {\n    // save the base implementation of cleanup\n    const superCleanup = self.cleanup;\n\n    return {\n      async doLoad() {\n        const environments = await getScEnvironments();\n        self.runInAction(() => {\n          consolidateToMap(self.environments, environments, (exiting, newItem) => {\n            exiting.setScEnvironment(newItem);\n          });\n        });\n      },\n\n      addScEnvironment(rawEnvironment) {\n        const id = rawEnvironment.id;\n        const previous = self.environments.get(id);\n\n        if (!previous) {\n          self.environments.put(rawEnvironment);\n        } else {\n          previous.setScEnvironment(rawEnvironment);\n        }\n      },\n\n      async createScEnvironment(environment) {\n        // environment = { name, description, projectId, envTypeId, envTypeConfigId, studyIds (optional) }\n        const result = await createScEnvironment(environment);\n        self.addScEnvironment(result);\n        return self.getScEnvironment(result.id);\n      },\n\n      async terminateScEnvironment(id) {\n        await deleteScEnvironment(id);\n        const env = self.getScEnvironment(id);\n        if (!env) return;\n        env.setStatus('TERMINATING');\n      },\n\n      async startScEnvironment(id) {\n        await startScEnvironment(id);\n        const env = self.getScEnvironment(id);\n        if (!env) return;\n        env.setStatus('STARTING');\n      },\n\n      async stopScEnvironment(id) {\n        await stopScEnvironment(id);\n        const env = self.getScEnvironment(id);\n        if (!env) return;\n        env.setStatus('STOPPING');\n      },\n\n      getScEnvironmentStore(envId) {\n        let entry = self.environmentStores.get(envId);\n        if (!entry) {\n          // Lazily create the store\n          self.environmentStores.set(envId, ScEnvironmentStore.create({ envId }));\n          entry = self.environmentStores.get(envId);\n        }\n\n        return entry;\n      },\n\n      getScEnvConnectionStore(envId) {\n        let entry = self.connectionStores.get(envId);\n        if (!entry) {\n          // Lazily create the store\n          self.connectionStores.set(envId, ScEnvConnectionStore.create({ envId }));\n          entry = self.connectionStores.get(envId);\n        }\n\n        return entry;\n      },\n\n      cleanup: () => {\n        self.environments.clear();\n        self.environmentStores.clear();\n        self.connectionStores.clear();\n        superCleanup();\n      },\n    };\n  })\n\n  .views(self => ({\n    get empty() {\n      return self.environments.size === 0;\n    },\n\n    get total() {\n      return self.environments.size;\n    },\n\n    get list() {\n      return _.orderBy(values(self.environments), ['createdAt', 'name'], ['desc', 'asc']);\n    },\n\n    filtered(filterName) {\n      const filter = filters[filterName] || (() => true);\n      const filtered = _.filter(values(self.environments), filter);\n      return _.orderBy(filtered, ['createdAt', 'name'], ['desc', 'asc']);\n    },\n\n    getScEnvironment(id) {\n      return self.environments.get(id);\n    },\n\n    canChangeState(id) {\n      const outputs = self.environments.get(id).outputs;\n      let result = false;\n      outputs.forEach(output => {\n        if (output.OutputKey === 'Ec2WorkspaceInstanceId' || output.OutputKey === 'NotebookInstanceName') {\n          result = true;\n        }\n      });\n      return result;\n    },\n\n    get user() {\n      return getEnv(self).userStore.user;\n    },\n  }));\n\nfunction registerContextItems(appContext) {\n  appContext.scEnvironmentsStore = ScEnvironmentsStore.create({}, appContext);\n}\n\nexport { ScEnvironmentsStore, registerContextItems, filterNames };\n"],"file":"ScEnvironmentsStore.js"}