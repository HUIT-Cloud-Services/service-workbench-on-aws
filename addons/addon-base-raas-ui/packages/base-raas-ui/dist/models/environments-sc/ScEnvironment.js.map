{"version":3,"sources":["../../../src/models/environments-sc/ScEnvironment.js"],"names":["states","key","display","color","tip","spinner","canTerminate","canConnect","canStop","canStart","ScEnvironment","types","model","id","identifier","rev","maybe","number","status","description","name","projectId","envTypeId","createdAt","createdBy","updatedAt","updatedBy","error","maybeNull","string","connections","frozen","hasConnections","studyIds","cidr","outputs","actions","self","setScEnvironment","rawEnvironment","raw","setStatus","setConnections","views","state","entry","_","cloneDeep","find","getConnections","filterFn","filter"],"mappings":"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","sourcesContent":["/* eslint-disable import/prefer-default-export */\nimport _ from 'lodash';\nimport { types, applySnapshot } from 'mobx-state-tree';\n\n// 'COMPLETED', 'PENDING', 'TAINTED', 'FAILED', 'TERMINATING', 'TERMINATED', 'TERMINATING_FAILED', 'UNKNOWN'\n// Note: 'UNKNOWN' is not something that is returned from the server, it is here to catch any other status\n// that we don't know about.\nconst states = [\n  {\n    key: 'COMPLETED',\n    display: 'AVAILABLE',\n    color: 'green',\n    tip: 'The workspace is ready to be used.',\n    spinner: false,\n    canTerminate: true,\n    canConnect: true,\n    canStop: true,\n    canStart: false,\n  },\n  {\n    key: 'PENDING',\n    display: 'PENDING',\n    color: 'orange',\n    tip: 'The workspace is being prepared, this could take sometime.',\n    spinner: true,\n    canTerminate: false,\n    canConnect: false,\n    canStop: false,\n    canStart: false,\n  },\n  {\n    key: 'STOPPED',\n    display: 'STOPPED',\n    color: 'orange',\n    tip: 'The workspace is stopped.',\n    spinner: false,\n    canTerminate: true,\n    canConnect: false,\n    canStop: false,\n    canStart: true,\n  },\n  {\n    key: 'STOPPING',\n    display: 'STOPPING',\n    color: 'orange',\n    tip: 'The workspace is stopping.',\n    spinner: true,\n    canTerminate: true,\n    canConnect: false,\n    canStop: false,\n    canStart: false,\n  },\n  {\n    key: 'STARTING',\n    display: 'STARTING',\n    color: 'orange',\n    tip: 'The workspace is starting.',\n    spinner: true,\n    canTerminate: true,\n    canConnect: false,\n    canStop: false,\n    canStart: false,\n  },\n  {\n    key: 'TAINTED',\n    display: 'TAINTED',\n    color: 'orange',\n    tip: 'The workspace is ready but the latest configuration updates might not have been successful.',\n    spinner: false,\n    canTerminate: true,\n    canConnect: true,\n    canStop: false,\n    canStart: false,\n  },\n  {\n    key: 'FAILED',\n    display: 'FAILED',\n    color: 'red',\n    tip: 'Something went wrong.',\n    spinner: false,\n    canTerminate: true,\n    canConnect: false,\n    canStop: false,\n    canStart: false,\n  },\n  {\n    key: 'TERMINATING',\n    display: 'TERMINATING',\n    color: 'red',\n    tip: 'The workspace is being terminated. This could take sometime.',\n    spinner: true,\n    canTerminate: false,\n    canConnect: false,\n    canStop: false,\n    canStart: false,\n  },\n  {\n    key: 'TERMINATED',\n    display: 'TERMINATED',\n    color: 'grey',\n    tip: 'The workspace is terminated successfully and no longer available.',\n    spinner: false,\n    canTerminate: false,\n    canConnect: false,\n    canStop: false,\n    canStart: false,\n  },\n  {\n    key: 'TERMINATING_FAILED',\n    display: 'TERMINATION FAILED',\n    color: 'red',\n    tip:\n      'The workspace was not terminated correctly, it is possible that some compute and storage resources are still in place.',\n    spinner: false,\n    canTerminate: true,\n    canConnect: true,\n    canStop: false,\n    canStart: false,\n  },\n  {\n    key: 'UNKNOWN',\n    display: 'UNKNOWN',\n    color: 'grey',\n    tip: 'Something not right. This requires further investigation by the administrator.',\n    spinner: false,\n    canTerminate: true,\n    canConnect: true,\n    canStop: false,\n    canStart: false,\n  },\n];\n\n// ==================================================================\n// ScEnvironment\n// ==================================================================\nconst ScEnvironment = types\n  .model('ScEnvironment', {\n    id: types.identifier,\n    rev: types.maybe(types.number),\n    status: '',\n    description: '',\n    name: '',\n    projectId: '',\n    envTypeId: '',\n    createdAt: '',\n    createdBy: '',\n    updatedAt: '',\n    updatedBy: '',\n    error: types.maybeNull(types.string),\n    connections: types.frozen([]),\n    hasConnections: false,\n    studyIds: types.frozen([]),\n    cidr: '',\n    outputs: types.frozen([]),\n  })\n  .actions(self => ({\n    setScEnvironment(rawEnvironment) {\n      // Note: if you have partial data vs full data, you need to replace the applySnapshot() with\n      // the appropriate logic\n      const raw = { ...rawEnvironment, connections: self.connections || [] };\n      applySnapshot(self, raw);\n    },\n    setStatus(status) {\n      self.status = status;\n    },\n    setConnections(connections) {\n      self.connections = connections;\n    },\n  }))\n\n  // eslint-disable-next-line no-unused-vars\n  .views(self => ({\n    // State is a generalization of the status name. With the state object, we can provide more\n    // information about the state and what can be done/displayed\n    get state() {\n      // We need to clone the entry so that we don't impact the existing states object\n      const entry = _.cloneDeep(_.find(states, ['key', self.status]) || _.find(states, ['key', 'UNKNOWN']));\n\n      // The canConnect value is also determined by looking at the existing state requirement and\n      // if we have any connections\n      entry.canConnect = entry.canConnect && self.hasConnections;\n\n      return entry;\n    },\n\n    getConnections(filterFn = () => true) {\n      return _.filter(self.connections, filterFn);\n    },\n  }));\n\nexport { ScEnvironment };\n"],"file":"ScEnvironment.js"}