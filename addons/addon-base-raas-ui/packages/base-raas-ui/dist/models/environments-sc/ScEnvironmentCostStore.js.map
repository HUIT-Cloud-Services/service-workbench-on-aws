{"version":3,"sources":["../../../src/models/environments-sc/ScEnvironmentCostStore.js"],"names":["ScEnvironmentCostStore","BaseStore","named","props","envId","tickPeriod","actions","self","superCleanup","cleanup","doLoad","id","parent","rawEntity","entries","error","addScEnvironmentCost","message","_","get","views","scEnvironmentCost","cost","getScEnvironmentCost"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AAEA;;;;;;;;AAEA;AACA;AACA;AACA,IAAMA,sBAAsB,GAAGC,qBAAUC,KAAV,CAAgB,wBAAhB,EAC5BC,KAD4B,CACtB;AACLC,EAAAA,KAAK,EAAE,EADF;AAELC,EAAAA,UAAU,EAAE,KAAK,EAAL,GAAU,EAAV,GAAe,IAFtB,CAE4B;;AAF5B,CADsB,EAM5BC,OAN4B,CAMpB,UAAAC,IAAI,EAAI;AACf;AACA,MAAMC,YAAY,GAAGD,IAAI,CAACE,OAA1B;AAEA,SAAO;AACCC,IAAAA,MADD,oBACU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACPC,gBAAAA,EADO,GACFJ,IAAI,CAACH,KADH;AAEPQ,gBAAAA,MAFO,GAEE,8BAAUL,IAAV,EAAgB,CAAhB,CAFF;AAGPM,gBAAAA,SAHO,GAGK;AAAEC,kBAAAA,OAAO,EAAE,EAAX;AAAeH,kBAAAA,EAAE,YAAKA,EAAL,UAAjB;AAAiCI,kBAAAA,KAAK,EAAE;AAAxC,iBAHL,EAIb;AACA;AACA;AACA;;AAPa;AAAA;AAAA,uBASW,+BAAqBJ,EAArB,EAAyB,EAAzB,CATX;;AAAA;AASLG,gBAAAA,OATK;AAUXD,gBAAAA,SAAS,CAACC,OAAV,GAAoBA,OAApB;AACAF,gBAAAA,MAAM,CAACI,oBAAP,CAA4BH,SAA5B;AAXW;AAAA;;AAAA;AAAA;AAAA;AAaLI,gBAAAA,OAbK,GAaKC,mBAAEC,GAAF,cAAa,SAAb,KAA2BD,mBAAEC,GAAF,cAAa,UAAb,EAAyB,sBAAzB,CAbhC;AAcXN,gBAAAA,SAAS,CAACE,KAAV,GAAkBE,OAAlB;AACAL,gBAAAA,MAAM,CAACI,oBAAP,CAA4BH,SAA5B,EAfW,CAgBX;;AAhBW;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAmBd,KApBI;AAsBLJ,IAAAA,OAAO,EAAE,mBAAM;AACbD,MAAAA,YAAY;AACb;AAxBI,GAAP;AA0BD,CApC4B,EAsC5BY,KAtC4B,CAsCtB,UAAAb,IAAI;AAAA,SAAK;AACd,QAAIc,iBAAJ,GAAwB;AACtB,UAAMT,MAAM,GAAG,8BAAUL,IAAV,EAAgB,CAAhB,CAAf;AACA,UAAMe,IAAI,GAAGV,MAAM,CAACW,oBAAP,CAA4BhB,IAAI,CAACH,KAAjC,CAAb;AACA,aAAOkB,IAAP;AACD;;AALa,GAAL;AAAA,CAtCkB,CAA/B,C,CA8CA;AACA;AACA","sourcesContent":["import _ from 'lodash';\nimport { getParent } from 'mobx-state-tree';\nimport { BaseStore } from '@aws-ee/base-ui/dist/models/BaseStore';\n\nimport { getScEnvironmentCost } from '../../helpers/api';\n\n// ==================================================================\n// ScEnvironmentCostStore\n// ==================================================================\nconst ScEnvironmentCostStore = BaseStore.named('ScEnvironmentCostStore')\n  .props({\n    envId: '',\n    tickPeriod: 12 * 60 * 60 * 1000, // 12 hours\n  })\n\n  .actions(self => {\n    // save the base implementation of cleanup\n    const superCleanup = self.cleanup;\n\n    return {\n      async doLoad() {\n        const id = self.envId;\n        const parent = getParent(self, 2);\n        const rawEntity = { entries: [], id: `${id}-cost`, error: '' };\n        // We are breaking the norm here by doing a try/catch. This is because we also want\n        // to update the entity.error value based on if we received an error. In general,\n        // entity models don't have 'error' property that reflects the loading status, this is\n        // because the 'error' property belongs to the store.\n        try {\n          const entries = await getScEnvironmentCost(id, 30);\n          rawEntity.entries = entries;\n          parent.addScEnvironmentCost(rawEntity);\n        } catch (error) {\n          const message = _.get(error, 'message') || _.get(error, 'friendly', 'Something went wrong');\n          rawEntity.error = message;\n          parent.addScEnvironmentCost(rawEntity);\n          // We want to throw an error here so that the store can be in the correct state\n          throw error;\n        }\n      },\n\n      cleanup: () => {\n        superCleanup();\n      },\n    };\n  })\n\n  .views(self => ({\n    get scEnvironmentCost() {\n      const parent = getParent(self, 2);\n      const cost = parent.getScEnvironmentCost(self.envId);\n      return cost;\n    },\n  }));\n\n// Note: Do NOT register this in the global context, if you want to gain access to an instance\n//       use scEnvironmentCostsStore.getScEnvironmentCostStore()\n// eslint-disable-next-line import/prefer-default-export\nexport { ScEnvironmentCostStore };\n"],"file":"ScEnvironmentCostStore.js"}