{"version":3,"sources":["../../../src/models/environments-sc/ScEnvironmentCostsStore.js"],"names":["ScEnvironmentCostsStore","BaseStore","named","props","costs","types","optional","map","ScEnvironmentCost","costStores","ScEnvironmentCostStore","tickPeriod","actions","self","superCleanup","cleanup","doLoad","scEnvironmentsStore","load","environments","list","getCost","environment","envId","id","rawEntity","entries","error","message","_","get","Promise","all","env","runInAction","exiting","newItem","setScEnvironmentCost","addScEnvironmentCost","rawCost","previous","put","getScEnvironmentCostStore","entry","set","create","clear","views","empty","size","getScEnvironmentCost","registerContextItems","appContext","scEnvironmentCostsStore"],"mappings":"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","sourcesContent":["import _ from 'lodash';\nimport { getEnv, types } from 'mobx-state-tree';\nimport { consolidateToMap } from '@aws-ee/base-ui/dist/helpers/utils';\nimport { BaseStore, isStoreReady } from '@aws-ee/base-ui/dist/models/BaseStore';\n\nimport { getScEnvironmentCost } from '../../helpers/api';\nimport { ScEnvironmentCost } from './ScEnvironmentCost';\nimport { ScEnvironmentCostStore } from './ScEnvironmentCostStore';\n\n// WARNING WARNING WARNING WARNING WARNING\n// ---------------------------------------\n// This store is here as a temporary solution, in this store we call the cost api\n// for each sc environment. This obviously is not scalable and should not be even an acceptable\n// approach, but we need to have it here for now to maintain an existing behaviour.\n// The cost api design needs to be addressed ASAP.\n// ---------------------------------------\n// WARNING WARNING WARNING WARNING WARNING\n\n// ==================================================================\n// ScEnvironmentCostsStore\n// ==================================================================\nconst ScEnvironmentCostsStore = BaseStore.named('ScEnvironmentCostsStore')\n  .props({\n    costs: types.optional(types.map(ScEnvironmentCost), {}),\n    costStores: types.optional(types.map(ScEnvironmentCostStore), {}),\n    tickPeriod: 60 * 1000, // 60 seconds\n  })\n\n  .actions(self => {\n    // save the base implementation of cleanup\n    const superCleanup = self.cleanup;\n\n    return {\n      async doLoad() {\n        // we need to check if the environment lists is loaded\n        const scEnvironmentsStore = self.scEnvironmentsStore;\n        if (!isStoreReady(scEnvironmentsStore)) {\n          await scEnvironmentsStore.load();\n        }\n\n        const environments = scEnvironmentsStore.list;\n\n        // 'getCost' is an async function that will attempt to load the\n        // cost for the given environment, if an error occurs we\n        // don't fail the whole outer doLoad() function.  We just\n        // keep the error message in the 'error' props of the raw entity object\n        const getCost = async environment => {\n          const envId = environment.id;\n          const rawEntity = { entries: [], id: `${envId}-cost`, error: '' };\n          try {\n            const entries = await getScEnvironmentCost(envId, 30);\n            rawEntity.entries = entries;\n          } catch (error) {\n            const message = _.get(error, 'message') || _.get(error, 'friendly', 'Something went wrong');\n            rawEntity.error = message;\n          }\n\n          return rawEntity;\n        };\n\n        const costs = await Promise.all(_.map(environments, env => getCost(env)));\n        self.runInAction(() => {\n          consolidateToMap(self.costs, costs, (exiting, newItem) => {\n            exiting.setScEnvironmentCost(newItem);\n          });\n        });\n      },\n\n      addScEnvironmentCost(rawCost) {\n        const id = rawCost.id;\n        const previous = self.costs.get(id);\n\n        if (!previous) {\n          self.costs.put(rawCost);\n        } else {\n          previous.setScEnvironmentCost(rawCost);\n        }\n      },\n\n      getScEnvironmentCostStore(envId) {\n        let entry = self.costStores.get(envId);\n        if (!entry) {\n          // Lazily create the store\n          self.costStores.set(envId, ScEnvironmentCostStore.create({ envId }));\n          entry = self.costStores.get(envId);\n        }\n\n        return entry;\n      },\n\n      cleanup: () => {\n        self.costStores.clear();\n        self.costs.clear();\n        superCleanup();\n      },\n    };\n  })\n\n  .views(self => ({\n    get empty() {\n      return self.costs.size === 0;\n    },\n\n    getScEnvironmentCost(id) {\n      return self.costs.get(`${id}-cost`);\n    },\n\n    get scEnvironmentsStore() {\n      return getEnv(self).scEnvironmentsStore;\n    },\n  }));\n\nfunction registerContextItems(appContext) {\n  appContext.scEnvironmentCostsStore = ScEnvironmentCostsStore.create({}, appContext);\n}\n\nexport { ScEnvironmentCostsStore, registerContextItems };\n"],"file":"ScEnvironmentCostsStore.js"}