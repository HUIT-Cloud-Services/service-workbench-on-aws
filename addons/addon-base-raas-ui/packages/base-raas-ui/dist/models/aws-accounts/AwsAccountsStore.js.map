{"version":3,"sources":["../../../src/models/aws-accounts/AwsAccountsStore.js"],"names":["AwsAccountsStore","BaseStore","named","props","awsAccounts","types","optional","map","AwsAccount","budgetStores","BudgetStore","tickPeriod","actions","self","superCleanup","cleanup","doLoad","runInAction","forEach","awsAccount","awsAccountsModel","create","previous","get","id","set","setAwsAccounts","undefined","addAwsAccount","addedAwsAccount","addedAwsAccountModel","createAwsAccount","getBudgetStore","awsAccountUUID","entry","addBudget","rawBudget","account","budget","Budget","views","list","result","res","name","accountId","roleArn","description","externalId","vpcId","subnetId","encryptionKeyArn","push","dropdownOptions","key","value","text","getNameForAccountId","getAwsAccount","registerContextItems","appContext","awsAccountsStore"],"mappings":"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","sourcesContent":["/*\n *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\").\n *  You may not use this file except in compliance with the License.\n *  A copy of the License is located at\n *\n *  http://aws.amazon.com/apache2.0\n *\n *  or in the \"license\" file accompanying this file. This file is distributed\n *  on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n *  express or implied. See the License for the specific language governing\n *  permissions and limitations under the License.\n */\n\nimport { types } from 'mobx-state-tree';\nimport { BaseStore } from '@aws-ee/base-ui/dist/models/BaseStore';\n\nimport { getAwsAccounts, addAwsAccount, createAwsAccount } from '../../helpers/api';\nimport { AwsAccount } from './AwsAccount';\nimport { BudgetStore } from './BudgetStore';\nimport Budget from './Budget';\n\n// ==================================================================\n// AwsAccountsStore\n// ==================================================================\nconst AwsAccountsStore = BaseStore.named('AwsAccountsStore')\n  .props({\n    awsAccounts: types.optional(types.map(AwsAccount), {}),\n    budgetStores: types.optional(types.map(BudgetStore), {}),\n    tickPeriod: 10 * 1000, // 10 sec\n  })\n\n  .actions(self => {\n    // save the base implementation of cleanup\n    const superCleanup = self.cleanup;\n\n    return {\n      async doLoad() {\n        const awsAccounts = (await getAwsAccounts()) || [];\n        // We try to preserve existing accounts data and merge the new data instead\n        // We could have used self.accounts.replace(), but it will do clear() then merge()\n        self.runInAction(() => {\n          awsAccounts.forEach(awsAccount => {\n            const awsAccountsModel = AwsAccount.create(awsAccount);\n            const previous = self.awsAccounts.get(awsAccountsModel.id);\n            if (!previous) {\n              self.awsAccounts.set(awsAccountsModel.id, awsAccountsModel);\n            } else {\n              previous.setAwsAccounts(awsAccount);\n            }\n          });\n        });\n        return undefined;\n      },\n\n      cleanup: () => {\n        superCleanup();\n      },\n\n      addAwsAccount: async awsAccount => {\n        const addedAwsAccount = await addAwsAccount(awsAccount);\n        self.runInAction(() => {\n          const addedAwsAccountModel = AwsAccount.create(addedAwsAccount);\n          self.awsAccounts.set(addedAwsAccountModel.id, addedAwsAccountModel);\n        });\n      },\n\n      createAwsAccount: async awsAccount => {\n        await createAwsAccount(awsAccount);\n      },\n\n      getBudgetStore: awsAccountUUID => {\n        let entry = self.budgetStores.get(awsAccountUUID);\n        if (!entry) {\n          // Lazily create the store\n          self.budgetStores.set(awsAccountUUID, BudgetStore.create({ awsAccountUUID }));\n          entry = self.budgetStores.get(awsAccountUUID);\n        }\n        return entry;\n      },\n\n      addBudget: (awsAccountUUID, rawBudget) => {\n        const account = self.awsAccounts.get(awsAccountUUID);\n        account.budget = Budget.create(rawBudget);\n      },\n    };\n  })\n\n  .views(self => ({\n    get list() {\n      const result = [];\n      // converting map self.users to result array\n      self.awsAccounts.forEach(awsAccount => {\n        const res = {};\n        res.name = awsAccount.name;\n        res.id = awsAccount.id;\n        res.accountId = awsAccount.accountId;\n        res.roleArn = awsAccount.roleArn;\n        res.description = awsAccount.description;\n        res.externalId = awsAccount.externalId;\n        res.vpcId = awsAccount.vpcId;\n        res.subnetId = awsAccount.subnetId;\n        res.encryptionKeyArn = awsAccount.encryptionKeyArn;\n        result.push(res);\n      });\n      return result;\n    },\n\n    get dropdownOptions() {\n      const result = [];\n      // converting map self.users to result array\n      self.awsAccounts.forEach(awsAccount => {\n        const account = {};\n        account.key = awsAccount.id;\n        account.value = awsAccount.id;\n        // For migration purposes fallback to id if there's no name\n        account.text = `${awsAccount.description} (${awsAccount.name || awsAccount.id})`;\n        result.push(account);\n      });\n      return result;\n    },\n\n    getNameForAccountId(id) {\n      const account = self.awsAccounts.get(id);\n\n      // For migration purposes fallback to id if there's no name\n      if (!account || !account.name) {\n        return id;\n      }\n\n      return `${account.name} (${account.accountId})`;\n    },\n\n    getAwsAccount(id) {\n      return self.awsAccounts.get(id);\n    },\n  }));\n\nfunction registerContextItems(appContext) {\n  appContext.awsAccountsStore = AwsAccountsStore.create({}, appContext);\n}\n\nexport { AwsAccountsStore, registerContextItems };\n"],"file":"AwsAccountsStore.js"}