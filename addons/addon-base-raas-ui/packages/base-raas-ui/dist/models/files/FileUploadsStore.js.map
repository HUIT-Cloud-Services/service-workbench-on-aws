{"version":3,"sources":["../../../src/models/files/FileUploadsStore.js"],"names":["FileUploadsStore","types","model","fileUploadGroups","map","FileUploadGroup","actions","self","getFileUploadGroup","resourceId","group","get","create","state","put","resetFileUploadGroup","registerContextItems","appContext","fileUploadsStore"],"mappings":";;;;;;;;AAeA;;AACA;;;;AAhBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA,IAAMA,gBAAgB,GAAGC,qBACtBC,KADsB,CAChB,kBADgB,EACI;AACzBC,EAAAA,gBAAgB,EAAEF,qBAAMG,GAAN,CAAUC,2BAAV;AADO,CADJ,EAItBC,OAJsB,CAId,UAAAC,IAAI;AAAA,SAAK;AAChBC,IAAAA,kBADgB,8BACGC,UADH,EACe;AAC7B,UAAIC,KAAK,GAAGH,IAAI,CAACJ,gBAAL,CAAsBQ,GAAtB,CAA0BF,UAA1B,CAAZ;;AACA,UAAI,CAACC,KAAL,EAAY;AACVA,QAAAA,KAAK,GAAGL,4BAAgBO,MAAhB,CAAuB;AAAEH,UAAAA,UAAU,EAAVA,UAAF;AAAcI,UAAAA,KAAK,EAAE;AAArB,SAAvB,CAAR;AACAN,QAAAA,IAAI,CAACJ,gBAAL,CAAsBW,GAAtB,CAA0BJ,KAA1B;AACD;;AACD,aAAOA,KAAP;AACD,KARe;AAShBK,IAAAA,oBATgB,gCASKN,UATL,EASiB;AAC/B,UAAMC,KAAK,GAAGL,4BAAgBO,MAAhB,CAAuB;AAAEH,QAAAA,UAAU,EAAVA,UAAF;AAAcI,QAAAA,KAAK,EAAE;AAArB,OAAvB,CAAd;;AACAN,MAAAA,IAAI,CAACJ,gBAAL,CAAsBW,GAAtB,CAA0BJ,KAA1B;AACD;AAZe,GAAL;AAAA,CAJU,CAAzB;;;;AAmBA,SAASM,oBAAT,CAA8BC,UAA9B,EAA0C;AACxCA,EAAAA,UAAU,CAACC,gBAAX,GAA8BlB,gBAAgB,CAACY,MAAjB,CAAwB,EAAxB,EAA4BK,UAA5B,CAA9B;AACD","sourcesContent":["/*\n *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\").\n *  You may not use this file except in compliance with the License.\n *  A copy of the License is located at\n *\n *  http://aws.amazon.com/apache2.0\n *\n *  or in the \"license\" file accompanying this file. This file is distributed\n *  on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n *  express or implied. See the License for the specific language governing\n *  permissions and limitations under the License.\n */\n\nimport { types } from 'mobx-state-tree';\nimport FileUploadGroup from './FileUploadGroup';\n\nconst FileUploadsStore = types\n  .model('FileUploadsStore', {\n    fileUploadGroups: types.map(FileUploadGroup),\n  })\n  .actions(self => ({\n    getFileUploadGroup(resourceId) {\n      let group = self.fileUploadGroups.get(resourceId);\n      if (!group) {\n        group = FileUploadGroup.create({ resourceId, state: 'PENDING' });\n        self.fileUploadGroups.put(group);\n      }\n      return group;\n    },\n    resetFileUploadGroup(resourceId) {\n      const group = FileUploadGroup.create({ resourceId, state: 'PENDING' });\n      self.fileUploadGroups.put(group);\n    },\n  }));\n\nfunction registerContextItems(appContext) {\n  appContext.fileUploadsStore = FileUploadsStore.create({}, appContext);\n}\n\nexport { FileUploadsStore, registerContextItems };\n"],"file":"FileUploadsStore.js"}