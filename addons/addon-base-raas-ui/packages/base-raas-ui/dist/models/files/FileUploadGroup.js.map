{"version":3,"sources":["../../../src/models/files/FileUploadGroup.js"],"names":["FileUpload","types","model","id","identifier","status","union","literal","uploaded","maybeNull","number","error","string","file","undefined","cancel","views","self","size","name","getFile","actions","updateProgress","uploadedBytes","updateStatusToUploading","updateStatusToComplete","updateStatusToFailed","setFile","setCancel","doCancel","FileUploadGroup","resourceId","fileUploads","map","state","fileUploadObjects","Array","from","values","getFileUpload","fileUploadId","get","start","fileUploadHandler","Error","setStateToUploading","filter","fileUpload","Promise","all","message","setStateToComplete","forEach","remove","add","create","put"],"mappings":"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","sourcesContent":["/*\n *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\").\n *  You may not use this file except in compliance with the License.\n *  A copy of the License is located at\n *\n *  http://aws.amazon.com/apache2.0\n *\n *  or in the \"license\" file accompanying this file. This file is distributed\n *  on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n *  express or implied. See the License for the specific language governing\n *  permissions and limitations under the License.\n */\n\nimport { types } from 'mobx-state-tree';\nimport uuidv4 from 'uuid/v4';\n\nconst FileUpload = types\n  .model('FileUpload', {\n    id: types.identifier,\n    status: types.union(\n      types.literal('PENDING'),\n      types.literal('UPLOADING'),\n      types.literal('COMPLETE'),\n      types.literal('FAILED'),\n    ),\n    uploaded: types.maybeNull(types.number),\n    error: types.maybeNull(types.string),\n  })\n  .volatile(() => ({\n    file: undefined,\n    cancel: undefined,\n  }))\n  .views(self => ({\n    get size() {\n      return self.file ? self.file.size : 0;\n    },\n    get name() {\n      return self.file ? self.file.name : '';\n    },\n    getFile() {\n      return self.file;\n    },\n  }))\n  .actions(self => ({\n    updateProgress(uploadedBytes) {\n      self.uploaded = uploadedBytes;\n    },\n    updateStatusToUploading() {\n      self.status = 'UPLOADING';\n    },\n    updateStatusToComplete() {\n      self.status = 'COMPLETE';\n    },\n    updateStatusToFailed(error) {\n      self.status = 'FAILED';\n      self.error = error;\n    },\n    setFile(file) {\n      self.file = file;\n    },\n    setCancel(cancel) {\n      self.cancel = cancel;\n    },\n    doCancel() {\n      if (self.cancel) {\n        self.cancel();\n        self.cancel = undefined;\n      }\n    },\n  }));\n\nconst FileUploadGroup = types\n  .model('FileUploadGroup', {\n    resourceId: types.identifier,\n    fileUploads: types.map(FileUpload),\n    state: types.union(types.literal('PENDING'), types.literal('UPLOADING'), types.literal('COMPLETE')),\n  })\n  .views(self => ({\n    get fileUploadObjects() {\n      return Array.from(self.fileUploads.values());\n    },\n    getFileUpload(fileUploadId) {\n      return self.fileUploads.get(fileUploadId);\n    },\n  }))\n  .actions(self => ({\n    async start(fileUploadHandler) {\n      if (self.state !== 'PENDING') {\n        throw new Error(`Cannot transition state from ${self.state} -> UPLOADING`);\n      }\n      self.setStateToUploading();\n      const fileUploads = Array.from(self.fileUploads.values()).filter(fileUpload => fileUpload.status === 'PENDING');\n      await Promise.all(\n        fileUploads.map(async fileUpload => {\n          fileUpload.updateStatusToUploading();\n          try {\n            await fileUploadHandler(fileUpload);\n          } catch (error) {\n            fileUpload.updateStatusToFailed(error.message);\n          }\n        }),\n      );\n      self.setStateToComplete();\n    },\n    cancel() {\n      self.fileUploads.forEach(fileUpload => {\n        fileUpload.doCancel();\n      });\n    },\n    remove(id) {\n      self.fileUploads.delete(id);\n    },\n    add({ file }) {\n      const model = FileUpload.create({\n        id: uuidv4(),\n        status: 'PENDING',\n      });\n      model.setFile(file);\n      self.fileUploads.put(model);\n    },\n    setStateToComplete() {\n      self.state = 'COMPLETE';\n    },\n    setStateToUploading() {\n      self.state = 'UPLOADING';\n    },\n  }));\n\nexport default FileUploadGroup;\n"],"file":"FileUploadGroup.js"}