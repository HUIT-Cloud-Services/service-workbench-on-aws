{"version":3,"sources":["../../../src/models/accounts/Account.js"],"names":["CfnInfo","types","model","crossAccountExecutionRoleArn","crossAccountEnvMgmtRoleArn","subnetId","vpcId","stackId","Account","id","identifier","accountName","status","accountArn","email","cfnInfo","optional","rev","maybe","number","name","createdAt","createdBy","updatedAt","updatedBy","actions","self","setAccount","rawAccount","views"],"mappings":";;;;;;;AAeA;;AAfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA,IAAMA,OAAO,GAAGC,qBAAMC,KAAN,CAAY;AAC1BC,EAAAA,4BAA4B,EAAE,EADJ;AAE1BC,EAAAA,0BAA0B,EAAE,EAFF;AAG1BC,EAAAA,QAAQ,EAAE,EAHgB;AAI1BC,EAAAA,KAAK,EAAE,EAJmB;AAK1BC,EAAAA,OAAO,EAAE;AALiB,CAAZ,CAAhB,C,CAOA;AACA;AACA;;;AACA,IAAMC,OAAO,GAAGP,qBACbC,KADa,CACP,SADO,EACI;AAChBO,EAAAA,EAAE,EAAER,qBAAMS,UADM;AAEhBC,EAAAA,WAAW,EAAE,EAFG;AAGhBC,EAAAA,MAAM,EAAE,EAHQ;AAIhBC,EAAAA,UAAU,EAAE,EAJI;AAKhBC,EAAAA,KAAK,EAAE,EALS;AAMhBC,EAAAA,OAAO,EAAEd,qBAAMe,QAAN,CAAehB,OAAf,EAAwB,EAAxB,CANO;AAOhBiB,EAAAA,GAAG,EAAEhB,qBAAMiB,KAAN,CAAYjB,qBAAMkB,MAAlB,CAPW;AAQhBC,EAAAA,IAAI,EAAE,EARU;AAShBC,EAAAA,SAAS,EAAE,EATK;AAUhBC,EAAAA,SAAS,EAAE,EAVK;AAWhBC,EAAAA,SAAS,EAAE,EAXK;AAYhBC,EAAAA,SAAS,EAAE;AAZK,CADJ,EAebC,OAfa,CAeL,UAAAC,IAAI;AAAA,SAAK;AAChBC,IAAAA,UADgB,sBACLC,UADK,EACO;AACrB;AACA;AACA,wCAAcF,IAAd,EAAoBE,UAApB;AACD;AALe,GAAL;AAAA,CAfC,EAuBd;AAvBc,CAwBbC,KAxBa,CAwBP,UAAAH,IAAI;AAAA,SAAK,CACd;AADc,GAAL;AAAA,CAxBG,CAAhB,C,CA4BA","sourcesContent":["/*\n *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\").\n *  You may not use this file except in compliance with the License.\n *  A copy of the License is located at\n *\n *  http://aws.amazon.com/apache2.0\n *\n *  or in the \"license\" file accompanying this file. This file is distributed\n *  on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n *  express or implied. See the License for the specific language governing\n *  permissions and limitations under the License.\n */\n\nimport { types, applySnapshot } from 'mobx-state-tree';\n\nconst CfnInfo = types.model({\n  crossAccountExecutionRoleArn: '',\n  crossAccountEnvMgmtRoleArn: '',\n  subnetId: '',\n  vpcId: '',\n  stackId: '',\n});\n// ==================================================================\n// Account\n// ==================================================================\nconst Account = types\n  .model('Account', {\n    id: types.identifier,\n    accountName: '',\n    status: '',\n    accountArn: '',\n    email: '',\n    cfnInfo: types.optional(CfnInfo, {}),\n    rev: types.maybe(types.number),\n    name: '',\n    createdAt: '',\n    createdBy: '',\n    updatedAt: '',\n    updatedBy: '',\n  })\n  .actions(self => ({\n    setAccount(rawAccount) {\n      // Note: if you have partial data vs full data, you need to replace the applySnapshot() with\n      // the appropriate logic\n      applySnapshot(self, rawAccount);\n    },\n  }))\n\n  // eslint-disable-next-line no-unused-vars\n  .views(self => ({\n    // add view methods here\n  }));\n\n// eslint-disable-next-line import/prefer-default-export\nexport { Account };\n"],"file":"Account.js"}