{"version":3,"sources":["../../../../src/models/accounts/__tests__/AccountsStore.test.js"],"names":["jest","mock","describe","store","appContext","newAccount","id","accountName","accountArn","email","name","createdAt","updatedAt","rev","status","beforeEach","accountsStore","it","getAccounts","mockResolvedValueOnce","load","addAccount","expect","list","toMatchObject","length","toBe","removeItem","removeAccountInfo","toHaveBeenCalledWith"],"mappings":";;AAeA;;AACA;;;;;;AAEAA,IAAI,CAACC,IAAL,CAAU,sBAAV;AAEAC,QAAQ,CAAC,eAAD,EAAkB,YAAM;AAC9B,MAAIC,KAAK,GAAG,IAAZ;AACA,MAAMC,UAAU,GAAG,EAAnB;AACA,MAAMC,UAAU,GAAG;AACjBC,IAAAA,EAAE,EAAE,QADa;AAEjBC,IAAAA,WAAW,EAAE,6BAFI;AAGjBC,IAAAA,UAAU,EAAE,mDAHK;AAIjBC,IAAAA,KAAK,EAAE,wDAJU;AAKjBC,IAAAA,IAAI,EAAE,iCALW;AAMjBC,IAAAA,SAAS,EAAE,iBANM;AAOjBC,IAAAA,SAAS,EAAE,sBAPM;AAQjBC,IAAAA,GAAG,EAAE,GARY;AASjBC,IAAAA,MAAM,EAAE;AATS,GAAnB;AAYAC,EAAAA,UAAU,uEAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACH,yCAAsBX,UAAtB,CADG;;AAAA;AAETD,YAAAA,KAAK,GAAGC,UAAU,CAACY,aAAnB;;AAFS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAD,GAAV;AAKAd,EAAAA,QAAQ,CAAC,YAAD,EAAe,YAAM;AAC3Be,IAAAA,EAAE,CAAC,sBAAD,uEAAyB;AAAA;AAAA;AAAA;AAAA;AACzB;AACAC,+BAAYC,qBAAZ,CAAkC,EAAlC;;AAFyB;AAAA,qBAGnBhB,KAAK,CAACiB,IAAN,EAHmB;;AAAA;AAAA;AAAA,qBAMnBjB,KAAK,CAACkB,UAAN,CAAiBhB,UAAjB,CANmB;;AAAA;AAQzB;AACAiB,cAAAA,MAAM,CAACnB,KAAK,CAACoB,IAAN,CAAW,CAAX,CAAD,CAAN,CAAsBC,aAAtB,CAAoCnB,UAApC;;AATyB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAzB,GAAF;AAYAY,IAAAA,EAAE,CAAC,sDAAD,uEAAyD;AAAA;AAAA;AAAA;AAAA;AACzD;AACAC,+BAAYC,qBAAZ,CAAkC,CAACd,UAAD,CAAlC;;AAFyD;AAAA,qBAGnDF,KAAK,CAACiB,IAAN,EAHmD;;AAAA;AAAA;AAAA,qBAMnDjB,KAAK,CAACkB,UAAN,CAAiBhB,UAAjB,CANmD;;AAAA;AAQzD;AACAiB,cAAAA,MAAM,CAACnB,KAAK,CAACoB,IAAN,CAAWE,MAAZ,CAAN,CAA0BC,IAA1B,CAA+B,CAA/B;;AATyD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAzD,GAAF;AAWD,GAxBO,CAAR;AA0BAxB,EAAAA,QAAQ,CAAC,YAAD,EAAe,YAAM;AAC3Be,IAAAA,EAAE,CAAC,2BAAD,uEAA8B;AAAA;AAAA;AAAA;AAAA;AAC9B;AACAC,+BAAYC,qBAAZ,CAAkC,CAACd,UAAD,CAAlC;;AAF8B;AAAA,qBAGxBF,KAAK,CAACiB,IAAN,EAHwB;;AAAA;AAAA;AAAA,qBAMxBjB,KAAK,CAACwB,UAAN,CAAiBtB,UAAU,CAACC,EAA5B,CANwB;;AAAA;AAO9B;AACA;AAEA;AACAgB,cAAAA,MAAM,CAACM,sBAAD,CAAN,CAA0BC,oBAA1B,CAA+CxB,UAAU,CAACC,EAA1D;;AAX8B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA9B,GAAF;AAaD,GAdO,CAAR;AAeD,CA7DO,CAAR","sourcesContent":["/*\n *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\").\n *  You may not use this file except in compliance with the License.\n *  A copy of the License is located at\n *\n *  http://aws.amazon.com/apache2.0\n *\n *  or in the \"license\" file accompanying this file. This file is distributed\n *  on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n *  express or implied. See the License for the specific language governing\n *  permissions and limitations under the License.\n */\n\nimport { getAccounts, removeAccountInfo } from '../../../helpers/api';\nimport { registerContextItems as registerAccountsStore } from '../AccountsStore';\n\njest.mock('../../../helpers/api');\n\ndescribe('AccountsStore', () => {\n  let store = null;\n  const appContext = {};\n  const newAccount = {\n    id: 'mscott',\n    accountName: 'It all starts with an idea.',\n    accountArn: 'But you can never tell where an idea will end up.',\n    email: 'because-ideas-spread-they-change-they-grow@example.com',\n    name: 'They connect us with the world.',\n    createdAt: 'Limitless paper',\n    updatedAt: 'in a paperless world',\n    rev: 100,\n    status: 'COMPLETED',\n  };\n\n  beforeEach(async () => {\n    await registerAccountsStore(appContext);\n    store = appContext.accountsStore;\n  });\n\n  describe('addAccount', () => {\n    it('should add a account', async () => {\n      // BUILD\n      getAccounts.mockResolvedValueOnce([]);\n      await store.load();\n\n      // OPERATE\n      await store.addAccount(newAccount);\n\n      // CHECK\n      expect(store.list[0]).toMatchObject(newAccount);\n    });\n\n    it('should not add the project because it already exists', async () => {\n      // BUILD\n      getAccounts.mockResolvedValueOnce([newAccount]);\n      await store.load();\n\n      // OPERATE\n      await store.addAccount(newAccount);\n\n      // CHECK\n      expect(store.list.length).toBe(1);\n    });\n  });\n\n  describe('removeItem', () => {\n    it('should remove the account', async () => {\n      // BUILD\n      getAccounts.mockResolvedValueOnce([newAccount]);\n      await store.load();\n\n      // OPERATE\n      await store.removeItem(newAccount.id);\n      // I'm not sure why the function is 'removeItem' and not 'deleteAccount'\n      // breaks the convention set by some of the others\n\n      // CHECK\n      expect(removeAccountInfo).toHaveBeenCalledWith(newAccount.id);\n    });\n  });\n});\n"],"file":"AccountsStore.test.js"}