{"version":3,"sources":["../../../src/models/accounts/AccountsStore.js"],"names":["AccountsStore","BaseStore","named","props","accounts","types","optional","map","Account","accountStores","AccountStore","tickPeriod","actions","self","superCleanup","cleanup","doLoad","runInAction","exiting","newItem","setAccount","undefined","addAccount","rawAccount","id","previous","get","put","removeItem","account","getAccountStore","accountId","entry","set","create","clear","views","listCreatingAccount","result","forEach","status","push","_","reverse","sortBy","listErrorAccount","empty","size","total","list","hasAccount","has","getAccount","registerContextItems","appContext","accountsStore"],"mappings":"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","sourcesContent":["/*\n *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\").\n *  You may not use this file except in compliance with the License.\n *  A copy of the License is located at\n *\n *  http://aws.amazon.com/apache2.0\n *\n *  or in the \"license\" file accompanying this file. This file is distributed\n *  on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n *  express or implied. See the License for the specific language governing\n *  permissions and limitations under the License.\n */\n\nimport _ from 'lodash';\nimport { types } from 'mobx-state-tree';\nimport { BaseStore } from '@aws-ee/base-ui/dist/models/BaseStore';\nimport { consolidateToMap } from '@aws-ee/base-ui/dist/helpers/utils';\n\nimport { getAccounts, removeAccountInfo } from '../../helpers/api';\nimport { Account } from './Account';\nimport { AccountStore } from './AccountStore';\n\n// ==================================================================\n// AccountsStore\n// ==================================================================\nconst AccountsStore = BaseStore.named('AccountsStore')\n  .props({\n    accounts: types.optional(types.map(Account), {}),\n    accountStores: types.optional(types.map(AccountStore), {}),\n    tickPeriod: 5 * 1000, // 10 sec\n  })\n\n  .actions(self => {\n    // save the base implementation of cleanup\n    const superCleanup = self.cleanup;\n\n    return {\n      async doLoad() {\n        const accounts = await getAccounts();\n        // We try to preserve existing accounts data and merge the new data instead\n        // We could have used self.accounts.replace(), but it will do clear() then merge()\n        self.runInAction(() => {\n          consolidateToMap(self.accounts, accounts, (exiting, newItem) => {\n            exiting.setAccount(newItem);\n          });\n        });\n        return undefined;\n      },\n\n      addAccount(rawAccount) {\n        const id = rawAccount.id;\n        const previous = self.accounts.get(id);\n\n        if (!previous) {\n          self.accounts.put(rawAccount);\n        } else {\n          previous.setAccount(rawAccount);\n        }\n      },\n\n      async removeItem(id) {\n        const account = self.accounts.get(id);\n        self.accounts.delete(account);\n        await removeAccountInfo(id);\n      },\n\n      getAccountStore: accountId => {\n        let entry = self.accountStores.get(accountId);\n        if (!entry) {\n          // Lazily create the store\n          self.accountStores.set(accountId, AccountStore.create({ accountId }));\n          entry = self.accountStores.get(accountId);\n        }\n\n        return entry;\n      },\n\n      cleanup: () => {\n        self.accounts.clear();\n        superCleanup();\n      },\n    };\n  })\n\n  .views(self => ({\n    get listCreatingAccount() {\n      const result = [];\n      self.accounts.forEach(account => {\n        if (account.status === 'PENDING') {\n          result.push(account);\n        }\n      });\n      return _.reverse(_.sortBy(result, ['createdAt', 'name']));\n    },\n\n    get listErrorAccount() {\n      const result = [];\n      self.accounts.forEach(account => {\n        if (account.status === 'FAILED') {\n          result.push(account);\n        }\n      });\n      return _.reverse(_.sortBy(result, ['createdAt', 'name']));\n    },\n\n    get empty() {\n      return self.accounts.size === 0;\n    },\n\n    get total() {\n      return self.accounts.size;\n    },\n\n    get list() {\n      const result = [];\n      self.accounts.forEach(account => result.push(account));\n\n      return _.reverse(_.sortBy(result, ['createdAt', 'name']));\n    },\n\n    hasAccount(id) {\n      return self.accounts.has(id);\n    },\n\n    getAccount(id) {\n      return self.accounts.get(id);\n    },\n  }));\n\nfunction registerContextItems(appContext) {\n  appContext.accountsStore = AccountsStore.create({}, appContext);\n}\n\nexport { AccountsStore, registerContextItems };\n"],"file":"AccountsStore.js"}