{"version":3,"sources":["../../../src/models/operations/Operations.js"],"names":["Operations","ops","status","payload","op","push","markRunning","success","running","skipped","run","markFinished","markNotStarted","clear","notStarted","empty","result","_","forEach","failure","length","observable","computed","allFailed","action"],"mappings":"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","sourcesContent":["/*\n *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\").\n *  You may not use this file except in compliance with the License.\n *  A copy of the License is located at\n *\n *  http://aws.amazon.com/apache2.0\n *\n *  or in the \"license\" file accompanying this file. This file is distributed\n *  on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n *  express or implied. See the License for the specific language governing\n *  permissions and limitations under the License.\n */\n\n/* eslint-disable no-await-in-loop */\n/* eslint-disable no-continue */\n/* eslint-disable no-restricted-syntax */\nimport _ from 'lodash';\nimport { decorate, observable, action, computed } from 'mobx';\n\nclass Operations {\n  constructor() {\n    this.ops = [];\n    this.status = 'notStarted'; // this is the overall status for all operations\n    this.payload = {};\n  }\n\n  add(op) {\n    this.ops.push(op);\n  }\n\n  async run(payload) {\n    if (this.status === 'running') return;\n    this.payload = payload;\n    this.markRunning();\n    for (const op of this.ops) {\n      if (op.success) continue;\n      if (op.running) continue;\n      if (op.skipped) continue;\n      await op.run(this.payload);\n    }\n    this.markFinished();\n  }\n\n  async rerun() {\n    if (this.status === 'running') return;\n    this.markNotStarted();\n\n    this.run(this.payload);\n  }\n\n  markNotStarted() {\n    this.status = 'notStarted';\n  }\n\n  markRunning() {\n    this.status = 'running';\n  }\n\n  markFinished() {\n    this.status = 'finished';\n  }\n\n  clear() {\n    this.ops.clear();\n    this.status = 'notStarted';\n    this.payload = {};\n  }\n\n  get running() {\n    return this.status === 'running';\n  }\n\n  get notStarted() {\n    return this.status === 'notStarted';\n  }\n\n  get started() {\n    return !this.notStarted;\n  }\n\n  get success() {\n    if (this.status !== 'finished') return false;\n    if (this.empty) return true;\n\n    let result = true;\n    // eslint-disable-next-line consistent-return\n    _.forEach(this.ops, op => {\n      if (op.failure) {\n        result = false;\n        return false; // to stop the forEach loop since we got the answer we want\n      }\n    });\n\n    return result;\n  }\n\n  // If we have one or more operations that failed\n  get failure() {\n    if (this.status !== 'finished') return false;\n    return !this.success;\n  }\n\n  // True if all operations failed (not even skipped)\n  get allFailed() {\n    if (this.status !== 'finished') return false;\n    if (this.empty) return false;\n\n    let result = true;\n    // eslint-disable-next-line consistent-return\n    _.forEach(this.ops, op => {\n      if (op.success || op.skipped) {\n        result = false;\n        return false; // to stop the forEach loop since we got the answer we want\n      }\n    });\n\n    return result;\n  }\n\n  get empty() {\n    return this.ops.length === 0;\n  }\n}\n\n// see https://medium.com/@mweststrate/mobx-4-better-simpler-faster-smaller-c1fbc08008da\ndecorate(Operations, {\n  ops: observable,\n  status: observable,\n  running: computed,\n  success: computed,\n  failure: computed,\n  allFailed: computed,\n  notStarted: computed,\n  markRunning: action,\n  markFinished: action,\n  markNotStarted: action,\n  clear: action,\n});\n\nexport default Operations;\n"],"file":"Operations.js"}