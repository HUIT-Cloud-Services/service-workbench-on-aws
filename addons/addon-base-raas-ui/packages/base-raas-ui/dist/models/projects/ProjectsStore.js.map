{"version":3,"sources":["../../../src/models/projects/ProjectsStore.js"],"names":["ProjectsStore","BaseStore","named","props","projects","types","optional","map","Project","projectStores","ProjectStore","tickPeriod","actions","self","superCleanup","cleanup","doLoad","runInAction","exiting","newItem","setProject","addProject","rawProject","id","previous","get","put","getProjectStore","projectId","entry","set","create","deleteProject","project","updateProject","updatedProject","clear","views","empty","size","total","list","result","forEach","push","_","reverse","sortBy","dropdownOptions","res","key","value","text","hasProject","has","getProject","registerContextItems","appContext","projectsStore"],"mappings":"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","sourcesContent":["/*\n *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\").\n *  You may not use this file except in compliance with the License.\n *  A copy of the License is located at\n *\n *  http://aws.amazon.com/apache2.0\n *\n *  or in the \"license\" file accompanying this file. This file is distributed\n *  on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n *  express or implied. See the License for the specific language governing\n *  permissions and limitations under the License.\n */\n\nimport _ from 'lodash';\nimport { types } from 'mobx-state-tree';\nimport { BaseStore } from '@aws-ee/base-ui/dist/models/BaseStore';\nimport { consolidateToMap } from '@aws-ee/base-ui/dist/helpers/utils';\n\nimport { getProjects, addProject, updateProject, deleteProject } from '../../helpers/api';\nimport { Project } from './Project';\nimport { ProjectStore } from './ProjectStore';\n\n// ==================================================================\n// ProjectsStore\n// ==================================================================\nconst ProjectsStore = BaseStore.named('ProjectsStore')\n  .props({\n    projects: types.optional(types.map(Project), {}),\n    projectStores: types.optional(types.map(ProjectStore), {}),\n    tickPeriod: 900 * 1000, // 15 minutes\n  })\n\n  .actions(self => {\n    // save the base implementation of cleanup\n    const superCleanup = self.cleanup;\n\n    return {\n      async doLoad() {\n        const projects = await getProjects();\n        // We try to preserve existing projects data and merge the new data instead\n        // We could have used self.projects.replace(), but it will do clear() then merge()\n        self.runInAction(() => {\n          consolidateToMap(self.projects, projects, (exiting, newItem) => {\n            exiting.setProject(newItem);\n          });\n        });\n      },\n\n      async addProject(rawProject) {\n        const id = rawProject.id;\n        const previous = self.projects.get(id);\n\n        if (!previous) {\n          self.projects.put(rawProject);\n          await addProject(rawProject);\n        } else {\n          previous.setProject(rawProject);\n        }\n      },\n\n      getProjectStore: projectId => {\n        let entry = self.projectStores.get(projectId);\n        if (!entry) {\n          // Lazily create the store\n          self.projectStores.set(projectId, ProjectStore.create({ projectId }));\n          entry = self.projectStores.get(projectId);\n        }\n\n        return entry;\n      },\n\n      deleteProject: async project => {\n        await deleteProject(project);\n      },\n\n      updateProject: async project => {\n        const updatedProject = await updateProject(project);\n        self.addProject(updatedProject);\n      },\n\n      cleanup: () => {\n        self.projects.clear();\n        superCleanup();\n      },\n    };\n  })\n\n  .views(self => ({\n    get empty() {\n      return self.projects.size === 0;\n    },\n\n    get total() {\n      return self.projects.size;\n    },\n\n    get list() {\n      const result = [];\n      self.projects.forEach(project => result.push(project));\n\n      return _.reverse(_.sortBy(result, ['createdAt', 'id']));\n    },\n\n    get dropdownOptions() {\n      const result = [];\n      // converting map self.users to result array\n      self.projects.forEach(project => {\n        const res = {};\n        res.key = project.id;\n        res.value = project.id;\n        res.text = project.id;\n        result.push(res);\n      });\n\n      return result;\n    },\n\n    hasProject(id) {\n      return self.projects.has(id);\n    },\n\n    getProject(id) {\n      return self.projects.get(id);\n    },\n  }));\n\nfunction registerContextItems(appContext) {\n  appContext.projectsStore = ProjectsStore.create({}, appContext);\n}\n\nexport { ProjectsStore, registerContextItems };\n"],"file":"ProjectsStore.js"}