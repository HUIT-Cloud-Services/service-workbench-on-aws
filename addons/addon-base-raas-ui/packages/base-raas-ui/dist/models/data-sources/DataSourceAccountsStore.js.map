{"version":3,"sources":["../../../src/models/data-sources/DataSourceAccountsStore.js"],"names":["DataSourceAccountsStore","BaseStore","named","props","accounts","types","map","DataSourceAccount","accountStores","DataSourceAccountStore","tickPeriod","actions","self","superCleanup","cleanup","doLoad","runInAction","existing","newItem","setDataSourceAccount","addAccount","raw","id","previous","get","set","getAccountStore","accountId","entry","create","updateAccount","account","_","omit","updatedAccount","existingAccount","getAccount","isEmpty","contactInfo","description","name","registerAccount","newAccount","registerBucket","bucket","normalizedBucket","awsPartition","access","Error","newBucket","setBucket","registerStudy","bucketName","study","newStudy","setStudy","checkAccountReachability","accountEntity","checkStudyReachability","studyId","studyEntity","getStudy","clear","views","empty","size","total","list","orderBy","dropdownOptions","result","key","value","text","content","hosting","registerContextItems","appContext","dataSourceAccountsStore"],"mappings":"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","sourcesContent":["/*\n *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\").\n *  You may not use this file except in compliance with the License.\n *  A copy of the License is located at\n *\n *  http://aws.amazon.com/apache2.0\n *\n *  or in the \"license\" file accompanying this file. This file is distributed\n *  on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n *  express or implied. See the License for the specific language governing\n *  permissions and limitations under the License.\n */\n\nimport _ from 'lodash';\nimport React from 'react';\nimport { Header } from 'semantic-ui-react';\nimport { values } from 'mobx';\nimport { types } from 'mobx-state-tree';\nimport { consolidateToMap } from '@aws-ee/base-ui/dist/helpers/utils';\nimport { BaseStore } from '@aws-ee/base-ui/dist/models/BaseStore';\n\nimport {\n  getDataSourceAccounts,\n  checkStudyReachability,\n  checkAccountReachability,\n  registerAccount,\n  registerBucket,\n  registerStudy,\n  updateRegisteredAccount,\n} from '../../helpers/api';\nimport { DataSourceAccount } from './DataSourceAccount';\nimport { DataSourceAccountStore } from './DataSourceAccountStore';\n\n// ==================================================================\n// DataSourceAccountsStore\n// ==================================================================\nconst DataSourceAccountsStore = BaseStore.named('DataSourceAccountsStore')\n  .props({\n    accounts: types.map(DataSourceAccount),\n    accountStores: types.map(DataSourceAccountStore),\n    tickPeriod: 3 * 60 * 1000, // 3 minutes\n  })\n\n  .actions(self => {\n    // save the base implementation of cleanup\n    const superCleanup = self.cleanup;\n\n    return {\n      async doLoad() {\n        const accounts = await getDataSourceAccounts();\n        self.runInAction(() => {\n          consolidateToMap(self.accounts, accounts, (existing, newItem) => {\n            existing.setDataSourceAccount(newItem);\n          });\n        });\n      },\n\n      addAccount(raw) {\n        const id = raw.id;\n        const previous = self.accounts.get(id);\n\n        if (!previous) {\n          self.accounts.set(raw.id, raw);\n        } else {\n          previous.setDataSourceAccount(raw);\n        }\n      },\n\n      getAccountStore(accountId) {\n        let entry = self.accountStores.get(accountId);\n        if (!entry) {\n          // Lazily create the store\n          self.accountStores.set(accountId, DataSourceAccountStore.create({ accountId }));\n          entry = self.accountStores.get(accountId);\n        }\n\n        return entry;\n      },\n\n      async updateAccount(account) {\n        const updatedAccount = await updateRegisteredAccount(account.id, _.omit(account, ['id']));\n        const existingAccount = self.getAccount(account.id);\n\n        // If we get null values for the props, we need to change them to empty string\n        if (_.isEmpty(updatedAccount.contactInfo)) {\n          updatedAccount.contactInfo = '';\n        }\n\n        if (_.isEmpty(updatedAccount.description)) {\n          updatedAccount.description = '';\n        }\n\n        if (_.isEmpty(updatedAccount.name)) {\n          updatedAccount.name = '';\n        }\n\n        existingAccount.setDataSourceAccount(updatedAccount);\n      },\n\n      async registerAccount(account) {\n        const newAccount = await registerAccount(account);\n        self.addAccount(newAccount);\n\n        return self.getAccount(account.id);\n      },\n\n      async registerBucket(accountId, bucket = {}) {\n        const normalizedBucket = { ...bucket, awsPartition: 'aws', access: 'roles' };\n        const account = self.getAccount(accountId);\n        if (_.isEmpty(account)) throw new Error(`Account #${accountId} is not loaded yet`);\n\n        const newBucket = await registerBucket(accountId, normalizedBucket);\n\n        return account.setBucket(newBucket);\n      },\n\n      async registerStudy(accountId, bucketName, study = {}) {\n        const account = self.getAccount(accountId);\n        if (_.isEmpty(account)) throw new Error(`Account #${accountId} is not loaded yet`);\n\n        const newStudy = await registerStudy(accountId, bucketName, study);\n\n        return account.setStudy(newStudy);\n      },\n\n      async checkAccountReachability(accountId) {\n        const accountEntity = await checkAccountReachability(accountId);\n        const account = self.getAccount(accountId);\n        if (account) account.setDataSourceAccount(accountEntity);\n      },\n\n      async checkStudyReachability(studyId) {\n        const studyEntity = await checkStudyReachability(studyId);\n        const account = self.getAccount(studyEntity.accountId);\n        const study = account.getStudy(studyId);\n        if (study) study.setStudy(studyEntity);\n      },\n\n      cleanup: () => {\n        self.accounts.clear();\n        self.accountStores.clear();\n        superCleanup();\n      },\n    };\n  })\n\n  .views(self => ({\n    get empty() {\n      return self.accounts.size === 0;\n    },\n\n    get total() {\n      return self.accounts.size;\n    },\n\n    get list() {\n      return _.orderBy(values(self.accounts), ['createdAt', 'name'], ['desc', 'asc']);\n    },\n\n    getAccount(id) {\n      return self.accounts.get(id);\n    },\n\n    get dropdownOptions() {\n      const result = _.map(values(self.accounts), account => ({\n        key: account.id,\n        value: account.id,\n        text: account.id,\n        content: (\n          <Header\n            as=\"h5\"\n            content={account.id}\n            subheader={`${account.name}${account.hosting ? ' (Hosting Account)' : ''}`}\n          />\n        ),\n      }));\n\n      return result;\n    },\n  }));\n\nfunction registerContextItems(appContext) {\n  appContext.dataSourceAccountsStore = DataSourceAccountsStore.create({}, appContext);\n}\n\nexport { DataSourceAccountsStore, registerContextItems };\n"],"file":"DataSourceAccountsStore.js"}