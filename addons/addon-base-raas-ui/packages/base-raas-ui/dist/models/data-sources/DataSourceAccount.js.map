{"version":3,"sources":["../../../src/models/data-sources/DataSourceAccount.js"],"names":["states","pending","id","display","color","error","reachable","DataSourceAccount","types","model","rev","maybe","number","name","createdAt","createdBy","updatedAt","updatedBy","stackCreated","mainRegion","qualifier","contactInfo","optional","maybeNull","string","stack","status","statusMsg","statusAt","description","type","templateIdExpected","templateIdFound","stackId","buckets","array","frozen","studies","map","DataSourceStudy","stackInfo","StackInfo","actions","self","setDataSourceAccount","raw","_","forEach","value","key","isUndefined","setStudies","existing","newItem","setStudy","study","set","get","setBucket","bucket","cloneDeep","push","setStackInfo","views","studiesList","orderBy","getStudy","studyId","state","pendingState","errorState","reachableState","statusMessageInfo","msg","info","prefix","message","isEmpty","startsWith","nth","split","stackOutDated","incorrectStackNameProvisioned","getBucket","find","bucketNames","getStudiesForBucket","filter","emailCommonSection","names","lines","folder","friendlyAccessType","updateStackEmailTemplate","cfnConsoleUrl","updateStackUrl","urlExpiry","slice","Date","toISOString","join","createStackEmailTemplate","createStackUrl"],"mappings":"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","sourcesContent":["/*\n *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\").\n *  You may not use this file except in compliance with the License.\n *  A copy of the License is located at\n *\n *  http://aws.amazon.com/apache2.0\n *\n *  or in the \"license\" file accompanying this file. This file is distributed\n *  on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n *  express or implied. See the License for the specific language governing\n *  permissions and limitations under the License.\n */\n\nimport _ from 'lodash';\nimport { values } from 'mobx';\nimport { types } from 'mobx-state-tree';\n\nimport { consolidateToMap } from '@aws-ee/base-ui/dist/helpers/utils';\n\nimport { DataSourceStudy } from './DataSourceStudy';\nimport { StackInfo } from './StackInfo';\n\nconst states = {\n  pending: {\n    id: 'pending',\n    display: 'Pending',\n    color: 'orange',\n  },\n  error: {\n    id: 'error',\n    display: 'Unavailable',\n    color: 'red',\n  },\n  reachable: {\n    id: 'reachable',\n    display: 'Available',\n    color: 'green',\n  },\n};\n\n// ==================================================================\n// DataSourceAccount\n// ==================================================================\nconst DataSourceAccount = types\n  .model('DataSourceAccount', {\n    id: '',\n    rev: types.maybe(types.number),\n    name: '',\n    createdAt: '',\n    createdBy: '',\n    updatedAt: '',\n    updatedBy: '',\n    stackCreated: false,\n    mainRegion: '',\n    qualifier: '',\n    contactInfo: types.optional(types.maybeNull(types.string), ''),\n    stack: '',\n    status: '',\n    statusMsg: '',\n    statusAt: '',\n    description: types.optional(types.maybeNull(types.string), ''),\n    type: '', // managed vs unmanaged\n    templateIdExpected: '',\n    templateIdFound: '',\n    stackId: '',\n    buckets: types.array(types.frozen()),\n    studies: types.map(DataSourceStudy),\n    stackInfo: types.optional(StackInfo, {}),\n  })\n  .actions(self => ({\n    setDataSourceAccount(raw = {}) {\n      _.forEach(raw, (value, key) => {\n        if (value === 'studies') return; // we don't want to update the studies\n        if (value === 'stackInfo') return; // we don't want to update the stack info\n        self[key] = value;\n      });\n\n      // We want to take care of thee statusMsg because it might come as undefined\n      if (_.isUndefined(raw.statusMsg)) self.statusMsg = '';\n    },\n\n    setStudies(studies) {\n      consolidateToMap(self.studies, studies, (existing, newItem) => {\n        existing.setStudy(newItem);\n      });\n    },\n\n    setStudy(study) {\n      self.studies.set(study.id, study);\n\n      return self.studies.get(study.id);\n    },\n\n    setBucket(bucket) {\n      // Because buckets are frozen, we need to deep clone first\n      const buckets = _.cloneDeep(self.buckets);\n      buckets.push(bucket);\n      self.buckets = buckets;\n\n      return bucket;\n    },\n\n    setStackInfo(stackInfo) {\n      self.stackInfo.setStackInfo(stackInfo);\n    },\n  }))\n\n  // eslint-disable-next-line no-unused-vars\n  .views(self => ({\n    get studiesList() {\n      return _.orderBy(values(self.studies), ['id'], ['asc']);\n    },\n\n    getStudy(studyId) {\n      return self.studies.get(studyId);\n    },\n\n    get state() {\n      return states[self.status] || states.reachable;\n    },\n\n    get pendingState() {\n      return self.status === 'pending';\n    },\n\n    get errorState() {\n      return self.status === 'error';\n    },\n\n    get reachableState() {\n      return self.status === 'reachable';\n    },\n\n    get statusMessageInfo() {\n      const msg = self.statusMsg;\n      const info = {\n        prefix: '',\n        color: 'grey',\n        message: msg,\n      };\n\n      if (_.isEmpty(msg)) return info;\n\n      if (_.startsWith(msg, 'WARN|||')) {\n        info.prefix = 'WARN';\n        info.message = _.nth(_.split(msg, '|||'), 1);\n        info.color = 'orange';\n      } else if (_.startsWith(msg, 'ERR|||')) {\n        info.prefix = 'ERR';\n        info.message = _.nth(_.split(msg, '|||'), 1);\n        info.color = 'red';\n      }\n\n      return info;\n    },\n\n    get stackOutDated() {\n      return !_.isEmpty(self.stackId) && self.stackCreated && self.templateIdExpected !== self.templateIdFound;\n    },\n\n    get incorrectStackNameProvisioned() {\n      return _.isEmpty(self.stackId) && self.stackCreated;\n    },\n\n    getBucket(name) {\n      return _.find(self.buckets, bucket => bucket.name === name);\n    },\n\n    get bucketNames() {\n      return _.map(self.buckets, bucket => bucket.name);\n    },\n\n    getStudiesForBucket(name) {\n      return _.filter(values(self.studies), study => study.bucket === name);\n    },\n\n    get emailCommonSection() {\n      const names = self.bucketNames;\n      const lines = ['Dear Admin,', '', 'We are requesting access to the following bucket(s) and studies:'];\n      _.forEach(names, name => {\n        lines.push(`\\nBucket name: ${name}`);\n        const studies = self.getStudiesForBucket(name);\n        _.forEach(studies, study => {\n          lines.push(` - folder: ${study.folder}`);\n          lines.push(`   access: ${study.friendlyAccessType}`);\n        });\n      });\n\n      lines.push('');\n      lines.push(\n        'For your convenience, you can follow these steps to configure the account for the requested access:\\n',\n      );\n\n      return lines;\n    },\n\n    get updateStackEmailTemplate() {\n      const { id, mainRegion, stackInfo = {} } = self;\n      const { cfnConsoleUrl, updateStackUrl, urlExpiry } = stackInfo;\n      const lines = _.slice(self.emailCommonSection);\n\n      lines.push(\n        `1 - Log in to the aws console using the correct account. Please ensure that you are using the correct account # ${id} and region ${mainRegion}\\n`,\n      );\n      lines.push(`2 - Go to the AWS CloudFormation console ${cfnConsoleUrl}\\n`);\n      lines.push(`    You need to visit the AWS CloudFormation console page before you can follow the next link\\n`);\n      lines.push(`3 - Click on the following link\\n`);\n      lines.push(`    ${updateStackUrl}\\n`);\n      lines.push(\n        '    The link takes you to the CloudFormation console where you can review the stack information and provision it.\\n',\n      );\n      lines.push(`    Note: the link expires at ${new Date(urlExpiry).toISOString()}`);\n      lines.push(`\\n\\nRegards,\\nService Workbench admin`);\n      return lines.join('\\n');\n    },\n\n    get createStackEmailTemplate() {\n      const { id, mainRegion, stackInfo = {} } = self;\n      const { createStackUrl, urlExpiry } = stackInfo;\n      const lines = _.slice(self.emailCommonSection);\n\n      lines.push(\n        `1 - Log in to the aws console using the correct account. Please ensure that you are using the correct account # ${id} and region ${mainRegion}\\n`,\n      );\n      lines.push(`2 - Click on the following link\\n`);\n      lines.push(`    ${createStackUrl}\\n`);\n      lines.push(\n        '    The link takes you to the CloudFormation console where you can review the stack information and provision it.\\n',\n      );\n      lines.push(`    Note: the link expires at ${new Date(urlExpiry).toISOString()}`);\n      lines.push(`\\n\\nRegards,\\nService Workbench admin`);\n      return lines.join('\\n');\n    },\n  }));\n\nexport { DataSourceAccount }; // eslint-disable-line import/prefer-default-export\n"],"file":"DataSourceAccount.js"}