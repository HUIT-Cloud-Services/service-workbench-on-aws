{"version":3,"sources":["../../../../../src/models/data-sources/register/operations/RegisterBucket.js"],"names":["RegisterBucketOperation","accountId","bucket","accountsStore","name","setMessage","registerBucket","markSkipped","Operation","doRun","action"],"mappings":";;;;;;;;;AAeA;;AAEA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAEMA,uB;;;;;AACJ,yCAAuD;AAAA;;AAAA,QAAzCC,SAAyC,QAAzCA,SAAyC;AAAA,2BAA9BC,MAA8B;AAAA,QAA9BA,MAA8B,4BAArB,EAAqB;AAAA,QAAjBC,aAAiB,QAAjBA,aAAiB;;AAAA;;AACrD;AACA,UAAKF,SAAL,GAAiBA,SAAjB;AACA,UAAKC,MAAL,GAAcA,MAAd;AACA,UAAKE,IAAL,gCAAkCF,MAAM,CAACE,IAAzC;AACA,UAAKD,aAAL,GAAqBA,aAArB;AALqD;AAMtD;;;;;;;;;;;AAGSC,gBAAAA,I,GAAS,KAAKF,M,CAAdE,I;AACR,qBAAKC,UAAL,6BAAqCD,IAArC;;;uBAEQ,KAAKD,aAAL,CAAmBG,cAAnB,CAAkC,KAAKL,SAAvC,EAAkD,KAAKC,MAAvD,C;;;AACN,qBAAKG,UAAL,0CAAkDD,IAAlD;;;;;;;;oBAGK,yC;;;;;;;;AAEL,qBAAKG,WAAL;AACA,qBAAKF,UAAL;;;;;;;;;;;;;;;;;;;EApBgCG,sB,GAyBtC;;;AACA,oBAASR,uBAAT,EAAkC;AAChCS,EAAAA,KAAK,EAAEC;AADyB,CAAlC;eAIeV,uB","sourcesContent":["/*\n *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\").\n *  You may not use this file except in compliance with the License.\n *  A copy of the License is located at\n *\n *  http://aws.amazon.com/apache2.0\n *\n *  or in the \"license\" file accompanying this file. This file is distributed\n *  on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n *  express or implied. See the License for the specific language governing\n *  permissions and limitations under the License.\n */\n\nimport { decorate, action } from 'mobx';\n\nimport { isAlreadyExists } from '../../../../helpers/errors';\nimport Operation from '../../../operations/Operation';\n\nclass RegisterBucketOperation extends Operation {\n  constructor({ accountId, bucket = {}, accountsStore }) {\n    super();\n    this.accountId = accountId;\n    this.bucket = bucket;\n    this.name = `Registering bucket ${bucket.name}`;\n    this.accountsStore = accountsStore;\n  }\n\n  async doRun() {\n    const { name } = this.bucket;\n    this.setMessage(`Registering bucket${name}`);\n    try {\n      await this.accountsStore.registerBucket(this.accountId, this.bucket);\n      this.setMessage(`Successfully registered bucket ${name}`);\n    } catch (error) {\n      // Check if the error is about existing bucket, if so, then skip it\n      if (!isAlreadyExists(error)) throw error;\n\n      this.markSkipped();\n      this.setMessage(`Skipping bucket registration, the bucket is already registered`);\n    }\n  }\n}\n\n// see https://medium.com/@mweststrate/mobx-4-better-simpler-faster-smaller-c1fbc08008da\ndecorate(RegisterBucketOperation, {\n  doRun: action,\n});\n\nexport default RegisterBucketOperation;\n"],"file":"RegisterBucket.js"}