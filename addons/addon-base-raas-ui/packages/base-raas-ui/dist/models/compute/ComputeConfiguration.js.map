{"version":3,"sources":["../../../src/models/compute/ComputeConfiguration.js"],"names":["ComputeConfiguration","types","model","id","identifier","type","title","displayOrder","maybe","number","priceInfo","frozen","desc","displayProps","params","actions","self","setComputeConfiguration","raw","views","descHtml","showdown","convert","isMutable","param","_","has","mutableParams","get","defaultCidr","undefined","pricePerDay","info","timeUnit","value","getParam","name","isUndefined"],"mappings":";;;;;;;AAgBA;;AACA;;;;AAjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAIA;AACA,IAAMA,oBAAoB,GAAGC,qBAC1BC,KAD0B,CACpB,sBADoB,EACI;AAC7BC,EAAAA,EAAE,EAAEF,qBAAMG,UADmB;AAE7BC,EAAAA,IAAI,EAAE,EAFuB;AAG7BC,EAAAA,KAAK,EAAE,EAHsB;AAI7BC,EAAAA,YAAY,EAAEN,qBAAMO,KAAN,CAAYP,qBAAMQ,MAAlB,CAJe;AAK7BC,EAAAA,SAAS,EAAET,qBAAMU,MAAN,EALkB;AAM7BC,EAAAA,IAAI,EAAE,EANuB;AAO7BC,EAAAA,YAAY,EAAEZ,qBAAMU,MAAN,EAPe;AAOC;AAC9BG,EAAAA,MAAM,EAAEb,qBAAMU,MAAN;AARqB,CADJ,EAW1BI,OAX0B,CAWlB,UAAAC,IAAI;AAAA,SAAK;AAChBC,IAAAA,uBADgB,mCACQC,GADR,EACa;AAC3B;AACA;AACA,wCAAcF,IAAd,EAAoBE,GAApB;AACD;AALe,GAAL;AAAA,CAXc,EAkB1BC,KAlB0B,CAkBpB,UAAAH,IAAI;AAAA,SAAK;AACd,QAAII,QAAJ,GAAe;AACb,UAAMC,QAAQ,GAAG,2BAAOL,IAAP,EAAaK,QAA9B;AACA,aAAOA,QAAQ,CAACC,OAAT,CAAiBN,IAAI,CAACJ,IAAtB,CAAP;AACD,KAJa;;AAMd;AACAW,IAAAA,SAPc,qBAOJC,KAPI,EAOG;AACf,aAAOC,mBAAEC,GAAF,CAAMV,IAAI,CAACF,MAAX,EAAmB,CAAC,SAAD,EAAYU,KAAZ,CAAnB,CAAP;AACD,KATa;;AAWd;AACA,QAAIG,aAAJ,GAAoB;AAClB,aAAOF,mBAAEG,GAAF,CAAMZ,IAAI,CAACF,MAAX,EAAmB,SAAnB,EAA8B,EAA9B,CAAP;AACD,KAda;;AAgBd;AACA,QAAIe,WAAJ,GAAkB;AAChB,UAAI,CAACb,IAAI,CAACO,SAAL,CAAe,MAAf,CAAL,EAA6B,OAAOO,SAAP;AAC7B,aAAOL,mBAAEG,GAAF,CAAMZ,IAAI,CAACW,aAAX,EAA0B,MAA1B,EAAkC,EAAlC,CAAP;AACD,KApBa;;AAsBd,QAAII,WAAJ,GAAkB;AAChB,UAAMC,IAAI,GAAGhB,IAAI,CAACN,SAAL,IAAkB,EAA/B;AACA,UAAIsB,IAAI,CAACC,QAAL,KAAkB,MAAtB,EAA8B,OAAOD,IAAI,CAACE,KAAL,GAAa,EAApB;AAC9B,UAAIF,IAAI,CAACC,QAAL,KAAkB,KAAtB,EAA6B,OAAOD,IAAI,CAACE,KAAZ;AAE7B,aAAOJ,SAAP;AACD,KA5Ba;;AA8Bd;AACA;AACA;AACAK,IAAAA,QAjCc,oBAiCLC,IAjCK,EAiCC;AACb,UAAMF,KAAK,GAAGT,mBAAEG,GAAF,CAAMZ,IAAI,CAACF,MAAX,EAAmB,CAAC,WAAD,EAAcsB,IAAd,CAAnB,CAAd;;AACA,UAAI,CAACX,mBAAEY,WAAF,CAAcH,KAAd,CAAL,EAA2B,OAAOA,KAAP;AAC3B,aAAOT,mBAAEG,GAAF,CAAMZ,IAAI,CAACW,aAAX,EAA0BS,IAA1B,CAAP;AACD;AArCa,GAAL;AAAA,CAlBgB,CAA7B","sourcesContent":["/*\n *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\").\n *  You may not use this file except in compliance with the License.\n *  A copy of the License is located at\n *\n *  http://aws.amazon.com/apache2.0\n *\n *  or in the \"license\" file accompanying this file. This file is distributed\n *  on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n *  express or implied. See the License for the specific language governing\n *  permissions and limitations under the License.\n */\n\n/* eslint-disable import/prefer-default-export */\nimport _ from 'lodash';\nimport { types, getEnv, applySnapshot } from 'mobx-state-tree';\n\n// This represents a specific configuration of a compute platform, such as a specific size of an ec2 setup\nconst ComputeConfiguration = types\n  .model('ComputeConfiguration', {\n    id: types.identifier,\n    type: '',\n    title: '',\n    displayOrder: types.maybe(types.number),\n    priceInfo: types.frozen(),\n    desc: '',\n    displayProps: types.frozen(), // an array of objects, each object has a key and a value that are purely used for displaying purposes\n    params: types.frozen(),\n  })\n  .actions(self => ({\n    setComputeConfiguration(raw) {\n      // Note: if you have partial data vs full data, you need to replace the applySnapshot() with\n      // the appropriate logic\n      applySnapshot(self, raw);\n    },\n  }))\n  .views(self => ({\n    get descHtml() {\n      const showdown = getEnv(self).showdown;\n      return showdown.convert(self.desc);\n    },\n\n    // Returns true if the configuration supports changing the value of a given param\n    isMutable(param) {\n      return _.has(self.params, ['mutable', param]);\n    },\n\n    // Returns all mutable parameters that this configuration allow\n    get mutableParams() {\n      return _.get(self.params, 'mutable', {});\n    },\n\n    // If undefined is returned, it means that changing the cidr value is not supported\n    get defaultCidr() {\n      if (!self.isMutable('cidr')) return undefined;\n      return _.get(self.mutableParams, 'cidr', '');\n    },\n\n    get pricePerDay() {\n      const info = self.priceInfo || {};\n      if (info.timeUnit === 'hour') return info.value * 24;\n      if (info.timeUnit === 'day') return info.value;\n\n      return undefined;\n    },\n\n    // Use this method to get a value of a parameter, regardless whether it is immutable or not\n    // We first see if the parameter exists in the immutable params if so, it is returned,\n    // otherwise the one in the mutable params is returned if any\n    getParam(name) {\n      const value = _.get(self.params, ['immutable', name]);\n      if (!_.isUndefined(value)) return value;\n      return _.get(self.mutableParams, name);\n    },\n  }));\n\nexport { ComputeConfiguration };\n"],"file":"ComputeConfiguration.js"}