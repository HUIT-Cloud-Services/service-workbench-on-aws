{"version":3,"sources":["../../../src/models/compute/ComputePlatformStore.js"],"names":["ComputePlatformStore","BaseStore","named","props","platformId","tickPeriod","actions","self","superCleanup","cleanup","doLoad","configurations","platform","computePlatform","setConfigurations","views","parent","getComputePlatform"],"mappings":";;;;;;;AAgBA;;AACA;;AAEA;;;;;;AAEA;AACA;AACA;AACA,IAAMA,oBAAoB,GAAGC,qBAAUC,KAAV,CAAgB,sBAAhB,EAC1BC,KAD0B,CACpB;AACLC,EAAAA,UAAU,EAAE,EADP;AAELC,EAAAA,UAAU,EAAE,MAAM,IAFb,CAEmB;;AAFnB,CADoB,EAM1BC,OAN0B,CAMlB,UAAAC,IAAI,EAAI;AACf;AACA,MAAMC,YAAY,GAAGD,IAAI,CAACE,OAA1B;AAEA,SAAO;AACCC,IAAAA,MADD,oBACU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACgB,mCAAyBH,IAAI,CAACH,UAA9B,CADhB;;AAAA;AACPO,gBAAAA,cADO;AAEPC,gBAAAA,QAFO,GAEIL,IAAI,CAACM,eAFT;;AAAA,oBAGRD,QAHQ;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAIbA,gBAAAA,QAAQ,CAACE,iBAAT,CAA2BH,cAA3B;;AAJa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKd,KANI;AAQLF,IAAAA,OAAO,EAAE,mBAAM;AACbF,MAAAA,IAAI,CAACH,UAAL,GAAkB,EAAlB;AACAI,MAAAA,YAAY;AACb;AAXI,GAAP;AAaD,CAvB0B,EAyB1BO,KAzB0B,CAyBpB,UAAAR,IAAI;AAAA,SAAK;AACd,QAAIM,eAAJ,GAAsB;AACpB,UAAMG,MAAM,GAAG,8BAAUT,IAAV,EAAgB,CAAhB,CAAf;AACA,UAAMK,QAAQ,GAAGI,MAAM,CAACC,kBAAP,CAA0BV,IAAI,CAACH,UAA/B,CAAjB;AACA,aAAOQ,QAAP;AACD;;AALa,GAAL;AAAA,CAzBgB,CAA7B,C,CAiCA;AACA","sourcesContent":["/*\n *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\").\n *  You may not use this file except in compliance with the License.\n *  A copy of the License is located at\n *\n *  http://aws.amazon.com/apache2.0\n *\n *  or in the \"license\" file accompanying this file. This file is distributed\n *  on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n *  express or implied. See the License for the specific language governing\n *  permissions and limitations under the License.\n */\n\n/* eslint-disable import/prefer-default-export */\nimport { getParent } from 'mobx-state-tree';\nimport { BaseStore } from '@aws-ee/base-ui/dist/models/BaseStore';\n\nimport { getComputeConfigurations } from '../../helpers/api';\n\n// ==================================================================\n// ComputePlatformStore\n// ==================================================================\nconst ComputePlatformStore = BaseStore.named('ComputePlatformStore')\n  .props({\n    platformId: '',\n    tickPeriod: 300 * 1000, // 5 minutes\n  })\n\n  .actions(self => {\n    // save the base implementation of cleanup\n    const superCleanup = self.cleanup;\n\n    return {\n      async doLoad() {\n        const configurations = await getComputeConfigurations(self.platformId);\n        const platform = self.computePlatform;\n        if (!platform) return;\n        platform.setConfigurations(configurations);\n      },\n\n      cleanup: () => {\n        self.platformId = '';\n        superCleanup();\n      },\n    };\n  })\n\n  .views(self => ({\n    get computePlatform() {\n      const parent = getParent(self, 2);\n      const platform = parent.getComputePlatform(self.platformId);\n      return platform;\n    },\n  }));\n\n// Note: Do NOT register this in the app context, if you want to gain access to an instance\n//       use computePlatformsStore.getComputePlatformStore()\nexport { ComputePlatformStore };\n"],"file":"ComputePlatformStore.js"}