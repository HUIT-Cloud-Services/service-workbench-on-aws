{"version":3,"sources":["../../../src/models/compute/ComputePlatformsStore.js"],"names":["ComputePlatformsStore","BaseStore","named","props","platforms","types","map","ComputePlatform","platformsStores","ComputePlatformStore","actions","self","superCleanup","cleanup","doLoad","computePlatforms","runInAction","exiting","newItem","setComputePlatform","getComputePlatformStore","platformId","entry","get","set","create","clear","views","empty","size","total","list","_","sortBy","getComputePlatform","id","registerContextItems","appContext","computePlatformsStore"],"mappings":";;;;;;;;AAeA;;AACA;;AACA;;AACA;;AACA;;AAEA;;AACA;;AACA;;;;;;;;AAEA;AACA;AACA;AACA,IAAMA,qBAAqB,GAAGC,qBAAUC,KAAV,CAAgB,uBAAhB,EAC3BC,KAD2B,CACrB;AACLC,EAAAA,SAAS,EAAEC,qBAAMC,GAAN,CAAUC,gCAAV,CADN;AAELC,EAAAA,eAAe,EAAEH,qBAAMC,GAAN,CAAUG,0CAAV;AAFZ,CADqB,EAK3BC,OAL2B,CAKnB,UAAAC,IAAI,EAAI;AACf;AACA,MAAMC,YAAY,GAAGD,IAAI,CAACE,OAA1B;AAEA,SAAO;AACCC,IAAAA,MADD,oBACU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACkB,+BADlB;;AAAA;AACPC,gBAAAA,gBADO;AAEbJ,gBAAAA,IAAI,CAACK,WAAL,CAAiB,YAAM;AACrB,+CAAiBL,IAAI,CAACP,SAAtB,EAAiCW,gBAAjC,EAAmD,UAACE,OAAD,EAAUC,OAAV,EAAsB;AACvED,oBAAAA,OAAO,CAACE,kBAAR,CAA2BD,OAA3B;AACD,mBAFD;AAGD,iBAJD;;AAFa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOd,KARI;AAULE,IAAAA,uBAVK,mCAUmBC,UAVnB,EAU+B;AAClC,UAAIC,KAAK,GAAGX,IAAI,CAACH,eAAL,CAAqBe,GAArB,CAAyBF,UAAzB,CAAZ;;AACA,UAAI,CAACC,KAAL,EAAY;AACV;AACAX,QAAAA,IAAI,CAACH,eAAL,CAAqBgB,GAArB,CAAyBH,UAAzB,EAAqCZ,2CAAqBgB,MAArB,CAA4B;AAAEJ,UAAAA,UAAU,EAAVA;AAAF,SAA5B,CAArC;AACAC,QAAAA,KAAK,GAAGX,IAAI,CAACH,eAAL,CAAqBe,GAArB,CAAyBF,UAAzB,CAAR;AACD;;AAED,aAAOC,KAAP;AACD,KAnBI;AAqBLT,IAAAA,OArBK,qBAqBK;AACRF,MAAAA,IAAI,CAACP,SAAL,CAAesB,KAAf;AACAf,MAAAA,IAAI,CAACH,eAAL,CAAqBkB,KAArB;AACAd,MAAAA,YAAY;AACb;AAzBI,GAAP;AA2BD,CApC2B,EAqC3Be,KArC2B,CAqCrB,UAAAhB,IAAI;AAAA,SAAK;AACd,QAAIiB,KAAJ,GAAY;AACV,aAAOjB,IAAI,CAACP,SAAL,CAAeyB,IAAf,KAAwB,CAA/B;AACD,KAHa;;AAKd,QAAIC,KAAJ,GAAY;AACV,aAAOnB,IAAI,CAACP,SAAL,CAAeyB,IAAtB;AACD,KAPa;;AASd,QAAIE,IAAJ,GAAW;AACT,aAAOC,mBAAEC,MAAF,CAAS,kBAAOtB,IAAI,CAACP,SAAZ,CAAT,EAAiC,cAAjC,CAAP;AACD,KAXa;;AAad8B,IAAAA,kBAbc,8BAaKC,EAbL,EAaS;AACrB,aAAOxB,IAAI,CAACP,SAAL,CAAemB,GAAf,CAAmBY,EAAnB,CAAP;AACD;AAfa,GAAL;AAAA,CArCiB,CAA9B;;;;AAuDA,SAASC,oBAAT,CAA8BC,UAA9B,EAA0C;AACxCA,EAAAA,UAAU,CAACC,qBAAX,GAAmCtC,qBAAqB,CAACyB,MAAtB,CAA6B,EAA7B,EAAiCY,UAAjC,CAAnC;AACD","sourcesContent":["/*\n *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\").\n *  You may not use this file except in compliance with the License.\n *  A copy of the License is located at\n *\n *  http://aws.amazon.com/apache2.0\n *\n *  or in the \"license\" file accompanying this file. This file is distributed\n *  on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n *  express or implied. See the License for the specific language governing\n *  permissions and limitations under the License.\n */\n\nimport _ from 'lodash';\nimport { values } from 'mobx';\nimport { types } from 'mobx-state-tree';\nimport { BaseStore } from '@aws-ee/base-ui/dist/models/BaseStore';\nimport { consolidateToMap } from '@aws-ee/base-ui/dist/helpers/utils';\n\nimport { getComputePlatforms } from '../../helpers/api';\nimport { ComputePlatform } from './ComputePlatform';\nimport { ComputePlatformStore } from './ComputePlatformStore';\n\n// ==================================================================\n// ComputePlatformsStore\n// ==================================================================\nconst ComputePlatformsStore = BaseStore.named('ComputePlatformsStore')\n  .props({\n    platforms: types.map(ComputePlatform),\n    platformsStores: types.map(ComputePlatformStore),\n  })\n  .actions(self => {\n    // save the base implementation of cleanup\n    const superCleanup = self.cleanup;\n\n    return {\n      async doLoad() {\n        const computePlatforms = await getComputePlatforms();\n        self.runInAction(() => {\n          consolidateToMap(self.platforms, computePlatforms, (exiting, newItem) => {\n            exiting.setComputePlatform(newItem);\n          });\n        });\n      },\n\n      getComputePlatformStore(platformId) {\n        let entry = self.platformsStores.get(platformId);\n        if (!entry) {\n          // Lazily create the store\n          self.platformsStores.set(platformId, ComputePlatformStore.create({ platformId }));\n          entry = self.platformsStores.get(platformId);\n        }\n\n        return entry;\n      },\n\n      cleanup() {\n        self.platforms.clear();\n        self.platformsStores.clear();\n        superCleanup();\n      },\n    };\n  })\n  .views(self => ({\n    get empty() {\n      return self.platforms.size === 0;\n    },\n\n    get total() {\n      return self.platforms.size;\n    },\n\n    get list() {\n      return _.sortBy(values(self.platforms), 'displayOrder');\n    },\n\n    getComputePlatform(id) {\n      return self.platforms.get(id);\n    },\n  }));\n\nfunction registerContextItems(appContext) {\n  appContext.computePlatformsStore = ComputePlatformsStore.create({}, appContext);\n}\n\nexport { ComputePlatformsStore, registerContextItems };\n"],"file":"ComputePlatformsStore.js"}