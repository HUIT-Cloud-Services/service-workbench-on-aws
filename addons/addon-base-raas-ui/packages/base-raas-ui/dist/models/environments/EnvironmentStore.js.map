{"version":3,"sources":["../../../src/models/environments/EnvironmentStore.js"],"names":["EnvironmentStore","BaseStore","named","props","environmentId","tickPeriod","actions","self","superCleanup","cleanup","doLoad","parent","rawEnvironment","envCreatedAt","Date","createdAt","now","diffTime","Math","abs","numberOfDaysBetweenDateCreatedAndToday","ceil","numberDaysInPast","min","isExternal","environmentCost","costs","addEnvironment","views","environment","w","getEnvironment"],"mappings":";;;;;;;AAeA;;AACA;;AACA;;AAEA;;AACA;;;;;;AAEA;AACA;AACA;AACA,IAAMA,gBAAgB,GAAGC,qBAAUC,KAAV,CAAgB,kBAAhB,EACtBC,KADsB,CAChB;AACLC,EAAAA,aAAa,EAAE,EADV;AAELC,EAAAA,UAAU,EAAE,MAAM,IAFb,CAEmB;;AAFnB,CADgB,EAMtBC,OANsB,CAMd,UAAAC,IAAI,EAAI;AACf;AACA,MAAMC,YAAY,GAAGD,IAAI,CAACE,OAA1B;AAEA,SAAO;AACCC,IAAAA,MADD,oBACU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACPC,gBAAAA,MADO,GACE,8BAAUJ,IAAV,EAAgB,CAAhB,CADF;AAAA;AAAA,uBAEgB,yBAAeA,IAAI,CAACH,aAApB,CAFhB;;AAAA;AAEPQ,gBAAAA,cAFO;AAGPC,gBAAAA,YAHO,GAGQ,IAAIC,IAAJ,CAASF,cAAc,CAACG,SAAxB,CAHR;AAIPC,gBAAAA,GAJO,GAID,IAAIF,IAAJ,EAJC;AAKPG,gBAAAA,QALO,GAKIC,IAAI,CAACC,GAAL,CAASH,GAAG,GAAGH,YAAf,CALJ;AAMPO,gBAAAA,sCANO,GAMkCF,IAAI,CAACG,IAAL,CAAUJ,QAAQ,IAAI,OAAO,EAAP,GAAY,EAAZ,GAAiB,EAArB,CAAlB,CANlC;AAAA;AASLK,gBAAAA,gBATK,GAScJ,IAAI,CAACK,GAAL,CAAS,EAAT,EAAaH,sCAAb,CATd;;AAAA,qBAUaR,cAAc,CAACY,UAV5B;AAAA;AAAA;AAAA;;AAAA;AAAA,uBAWD,wCAAiBZ,cAAjB,EAAiCU,gBAAjC,CAXC;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,uBAYD,6BAAmBf,IAAI,CAACH,aAAxB,EAAuCkB,gBAAvC,CAZC;;AAAA;AAAA;;AAAA;AAULG,gBAAAA,eAVK;AAaXb,gBAAAA,cAAc,CAACc,KAAf,GAAuBD,eAAvB;AAbW;AAAA;;AAAA;AAAA;AAAA;AAeX,kDAAe,wCAAf;;AAfW;AAkBbd,gBAAAA,MAAM,CAACgB,cAAP,CAAsBf,cAAtB;;AAlBa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAmBd,KApBI;AAsBLH,IAAAA,OAAO,EAAE,mBAAM;AACbD,MAAAA,YAAY;AACb;AAxBI,GAAP;AA0BD,CApCsB,EAsCtBoB,KAtCsB,CAsChB,UAAArB,IAAI;AAAA,SAAK;AACd,QAAIsB,WAAJ,GAAkB;AAChB,UAAMlB,MAAM,GAAG,8BAAUJ,IAAV,EAAgB,CAAhB,CAAf;AACA,UAAMuB,CAAC,GAAGnB,MAAM,CAACoB,cAAP,CAAsBxB,IAAI,CAACH,aAA3B,CAAV;AACA,aAAO0B,CAAP;AACD;;AALa,GAAL;AAAA,CAtCY,CAAzB,C,CA8CA;AACA;AACA","sourcesContent":["/*\n *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\").\n *  You may not use this file except in compliance with the License.\n *  A copy of the License is located at\n *\n *  http://aws.amazon.com/apache2.0\n *\n *  or in the \"license\" file accompanying this file. This file is distributed\n *  on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n *  express or implied. See the License for the specific language governing\n *  permissions and limitations under the License.\n */\n\nimport { getParent } from 'mobx-state-tree';\nimport { BaseStore } from '@aws-ee/base-ui/dist/models/BaseStore';\nimport { displayWarning } from '@aws-ee/base-ui/dist/helpers/notification';\n\nimport { getEnvironment, getEnvironmentCost } from '../../helpers/api';\nimport { getEstimatedCost } from '../../helpers/externalCostUtil';\n\n// ==================================================================\n// EnvironmentStore\n// ==================================================================\nconst EnvironmentStore = BaseStore.named('EnvironmentStore')\n  .props({\n    environmentId: '',\n    tickPeriod: 300 * 1000, // 5 minutes\n  })\n\n  .actions(self => {\n    // save the base implementation of cleanup\n    const superCleanup = self.cleanup;\n\n    return {\n      async doLoad() {\n        const parent = getParent(self, 2);\n        const rawEnvironment = await getEnvironment(self.environmentId);\n        const envCreatedAt = new Date(rawEnvironment.createdAt);\n        const now = new Date();\n        const diffTime = Math.abs(now - envCreatedAt);\n        const numberOfDaysBetweenDateCreatedAndToday = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n\n        try {\n          const numberDaysInPast = Math.min(30, numberOfDaysBetweenDateCreatedAndToday);\n          const environmentCost = rawEnvironment.isExternal\n            ? await getEstimatedCost(rawEnvironment, numberDaysInPast)\n            : await getEnvironmentCost(self.environmentId, numberDaysInPast);\n          rawEnvironment.costs = environmentCost;\n        } catch (error) {\n          displayWarning('Error encountered retrieving cost data', error);\n        }\n\n        parent.addEnvironment(rawEnvironment);\n      },\n\n      cleanup: () => {\n        superCleanup();\n      },\n    };\n  })\n\n  .views(self => ({\n    get environment() {\n      const parent = getParent(self, 2);\n      const w = parent.getEnvironment(self.environmentId);\n      return w;\n    },\n  }));\n\n// Note: Do NOT register this in the global context, if you want to gain access to an instance\n//       use environmentsStore.getEnvironmentStore()\n// eslint-disable-next-line import/prefer-default-export\nexport { EnvironmentStore };\n"],"file":"EnvironmentStore.js"}