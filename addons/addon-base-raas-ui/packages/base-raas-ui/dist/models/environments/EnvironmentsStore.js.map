{"version":3,"sources":["../../../src/models/environments/EnvironmentsStore.js"],"names":["EnvironmentsStore","BaseStore","named","props","environments","types","optional","map","Environment","environmentStores","EnvironmentStore","tickPeriod","actions","self","superCleanup","cleanup","doLoad","costPromises","env","isExternal","id","Promise","all","costInfo","i","length","costs","runInAction","exiting","newItem","setEnvironment","addEnvironment","rawEnvironment","previous","get","put","getEnvironmentStore","environmentId","entry","set","create","stopEnvironment","environment","uiEventBus","fireEvent","startEnvironment","markAsTerminating","updateExternalEnvironment","user","pin","isExternalUser","_","isEmpty","storage","getItem","localStorageKeys","pinToken","unencryptedCreds","creds","cfn","CfnService","accessKeyId","secretAccessKey","region","request","describeStack","stackId","response","assign","convertCfnResponse","instanceInfo","status","error","message","isDone","outputs","forEach","output","key","value","omitBy","isFailed","statusReason","deleteEnvironment","deleteExternalEnvironment","deleteStack","type","externalKeypairService","ExternalKeypairService","createEnvironment","isExternalResearcher","username","omit","createExternalEnvironment","result","getEnvironment","platformId","configurationId","configuration","getComputeConfiguration","title","size","getParam","accountId","Account","name","Date","getTime","getExternalParams","params","url","createStack","StackId","config","cidr","s3Mounts","iamPolicyDocument","environmentInstanceFiles","amiImage","cfnParams","addParam","v","push","ParameterKey","ParameterValue","externalVpcService","ExternalVpcService","defaultVPCInfo","vpcId","subnetId","diskSizeGb","toString","workerInstanceSize","workerInstanceCount","isOnDemand","spotBidPrice","toFixed","keyName","updateEnvironment","removeItem","clear","views","empty","total","list","reverse","sortBy","userStore","store","computePlatformsStore","platform","getComputePlatform","undefined","getConfiguration","registerContextItems","appContext","environmentsStore"],"mappings":"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","sourcesContent":["/*\n *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\").\n *  You may not use this file except in compliance with the License.\n *  A copy of the License is located at\n *\n *  http://aws.amazon.com/apache2.0\n *\n *  or in the \"license\" file accompanying this file. This file is distributed\n *  on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n *  express or implied. See the License for the specific language governing\n *  permissions and limitations under the License.\n */\n\nimport _ from 'lodash';\nimport { getEnv, types } from 'mobx-state-tree';\nimport { displayWarning } from '@aws-ee/base-ui/dist/helpers/notification';\nimport { consolidateToMap, storage } from '@aws-ee/base-ui/dist/helpers/utils';\nimport { BaseStore } from '@aws-ee/base-ui/dist/models/BaseStore';\n\nimport { randomString } from '@aws-ee/base-services/lib/helpers/utils';\nimport { getEstimatedCost } from '../../helpers/externalCostUtil';\nimport localStorageKeys from '../constants/local-storage-keys';\nimport {\n  getEnvironments,\n  deleteEnvironment,\n  createEnvironment,\n  startEnvironment,\n  stopEnvironment,\n  getEnvironmentCost,\n  getExternalTemplate,\n  updateEnvironment,\n} from '../../helpers/api';\nimport { Environment } from './Environment';\nimport { EnvironmentStore } from './EnvironmentStore';\nimport CfnService from '../../helpers/cfn-service';\nimport ExternalKeypairService from '../../helpers/externalKeypairService';\nimport ExternalVpcService from '../../helpers/externalVpcService';\nimport getExternalAccountDetails from '../../helpers/externalAccountDetails';\n\n// ==================================================================\n// EnvironmentsStore\n// ==================================================================\nconst EnvironmentsStore = BaseStore.named('EnvironmentsStore')\n  .props({\n    environments: types.optional(types.map(Environment), {}),\n    environmentStores: types.optional(types.map(EnvironmentStore), {}),\n    tickPeriod: 30 * 1000, // 30 seconds\n  })\n\n  .actions(self => {\n    // save the base implementation of cleanup\n    const superCleanup = self.cleanup;\n\n    return {\n      async doLoad() {\n        const environments = await getEnvironments();\n\n        try {\n          const costPromises = environments.map(env => {\n            if (env.isExternal) {\n              return getEstimatedCost(env, 1);\n            }\n            return getEnvironmentCost(env.id, 1);\n          });\n\n          const costInfo = await Promise.all(costPromises);\n\n          for (let i = 0; i < environments.length; i++) {\n            environments[i].costs = costInfo[i];\n          }\n        } catch (error) {\n          displayWarning('Error encountered retrieving cost data', error);\n        }\n\n        self.runInAction(() => {\n          consolidateToMap(self.environments, environments, (exiting, newItem) => {\n            exiting.setEnvironment(newItem);\n          });\n        });\n      },\n\n      addEnvironment(rawEnvironment) {\n        const id = rawEnvironment.id;\n        const previous = self.environments.get(id);\n\n        if (!previous) {\n          self.environments.put(rawEnvironment);\n        } else {\n          previous.setEnvironment(rawEnvironment);\n        }\n      },\n\n      getEnvironmentStore: environmentId => {\n        let entry = self.environmentStores.get(environmentId);\n        if (!entry) {\n          // Lazily create the store\n          self.environmentStores.set(environmentId, EnvironmentStore.create({ environmentId }));\n          entry = self.environmentStores.get(environmentId);\n        }\n\n        return entry;\n      },\n\n      async stopEnvironment(environment) {\n        const uiEventBus = getEnv(self).uiEventBus;\n        await uiEventBus.fireEvent('environmentStopping', environment);\n        await stopEnvironment(environment.id);\n      },\n\n      async startEnvironment(environment) {\n        const uiEventBus = getEnv(self).uiEventBus;\n        await uiEventBus.fireEvent('environmentStarting', environment);\n        await startEnvironment(environment.id);\n      },\n\n      markAsTerminating: id => {\n        const previous = self.environments.get(id);\n        if (previous) {\n          previous.markAsTerminating();\n        }\n      },\n\n      async updateExternalEnvironment(environment, user, pin) {\n        if (!environment.isExternal || !user.isExternalUser || _.isEmpty(storage.getItem(localStorageKeys.pinToken))) {\n          return;\n        }\n        const creds = await user.unencryptedCreds(pin);\n        const cfn = new CfnService(creds.accessKeyId, creds.secretAccessKey, creds.region);\n        const request = { id: environment.id };\n        try {\n          const response = await cfn.describeStack(environment.stackId);\n          _.assign(request, this.convertCfnResponse(response, environment.instanceInfo));\n        } catch (e) {\n          _.assign(request, { status: 'FAILED', error: e.message });\n        } finally {\n          if (environment.status !== request.status) {\n            updateEnvironment(request);\n          }\n        }\n      },\n\n      convertCfnResponse(response, instanceInfo) {\n        if (!response.isDone) {\n          return { status: 'PENDING' };\n        }\n        response.outputs.forEach(output => {\n          _.assign(instanceInfo, { [output.key]: output.value });\n        });\n        instanceInfo = _.omitBy(instanceInfo, _.isEmpty);\n        return response.isFailed\n          ? { status: 'FAILED', error: response.statusReason, instanceInfo }\n          : response.status === 'DELETE_COMPLETE'\n          ? { status: 'TERMINATED', instanceInfo }\n          : { status: 'COMPLETED', instanceInfo };\n      },\n\n      async deleteEnvironment(environment, user, pin) {\n        if (environment.isExternal) {\n          await this.deleteExternalEnvironment(await user.unencryptedCreds(pin), environment);\n        }\n        const uiEventBus = getEnv(self).uiEventBus;\n        await deleteEnvironment(environment.id);\n        await uiEventBus.fireEvent('environmentDeleted', environment);\n      },\n\n      async deleteExternalEnvironment(creds, environment) {\n        const cfn = new CfnService(creds.accessKeyId, creds.secretAccessKey, creds.region);\n        await cfn.deleteStack(environment.stackId);\n\n        if (environment.instanceInfo.type !== 'sagemaker') {\n          const externalKeypairService = new ExternalKeypairService(creds);\n          await externalKeypairService.delete(environment.id);\n        }\n      },\n\n      async createEnvironment(environment) {\n        // environment = { platformId, configurationId, name, description, projectId, studyIds, params, pin }\n        // - projectId is only available if the user is not external\n        // - pin is only available if creation of the environment is done by an external researcher user role.\n        //   and should never be sent to the server\n        const user = self.user;\n        const result = user.isExternalResearcher\n          ? await this.createExternalEnvironment(\n              await user.unencryptedCreds(environment.pin),\n              user.username,\n              _.omit(environment, ['pin']), // remove the pin, we don't want to send it to the server\n            )\n          : await createEnvironment(environment);\n        self.addEnvironment(result);\n        return self.getEnvironment(result.id);\n      },\n\n      async createExternalEnvironment(creds, username, rawEnvironment) {\n        const { platformId, configurationId } = rawEnvironment;\n        const configuration = self.getComputeConfiguration(platformId, configurationId);\n        const { type, title } = configuration;\n        const size = configuration.getParam('size');\n\n        // We need to get the external account details to pass the account Id to the api to allow ami access\n        const { Account: accountId } = await getExternalAccountDetails(creds);\n        // We first call the backend because it will enrich with id and the imageId if needed\n        const environment = await createEnvironment({ ...rawEnvironment, accountId });\n        const cfn = new CfnService(creds.accessKeyId, creds.secretAccessKey, creds.region);\n        // Stack naming combines datetime & randomString to avoid collisions when two workspaces are created at the same time\n        const name = `analysis-${new Date().getTime()}-${randomString(10)}`;\n        const params = await this.getExternalParams({ environment, name, creds });\n        const url = await getExternalTemplate(`${type}.cfn.yml`);\n        const response = await cfn.createStack(\n          name,\n          params,\n          url,\n          username,\n          `Created By ${username} - ${title} - ${type} - ${size}`,\n        );\n\n        return updateEnvironment({ id: environment.id, stackId: response.StackId });\n      },\n\n      async getExternalParams({\n        environment: {\n          id,\n          instanceInfo: { type, size, config, cidr, s3Mounts, iamPolicyDocument, environmentInstanceFiles },\n          amiImage,\n        },\n        name,\n        creds,\n      }) {\n        const cfnParams = [];\n        const addParam = (key, v) => cfnParams.push({ ParameterKey: key, ParameterValue: `${v}` });\n\n        addParam('Namespace', name);\n        addParam('S3Mounts', s3Mounts);\n        addParam('IamPolicyDocument', iamPolicyDocument);\n        addParam('EnvironmentInstanceFiles', environmentInstanceFiles);\n\n        const externalVpcService = new ExternalVpcService(creds);\n        const { vpcId, subnetId } = await externalVpcService.defaultVPCInfo();\n        addParam('VPC', vpcId);\n        addParam('Subnet', subnetId);\n\n        if (type === 'sagemaker') {\n          addParam('InstanceType', size); // Yes, size here is actually the instance type we want to send to cfn\n        }\n\n        if (type === 'emr') {\n          addParam('DiskSizeGB', config.diskSizeGb.toString());\n          addParam('MasterInstanceType', size);\n          addParam('WorkerInstanceType', config.workerInstanceSize);\n          addParam('CoreNodeCount', config.workerInstanceCount.toString());\n\n          // Add parameters to support spot instance pricing if specified\n          // TODO this needs to be parameterized\n          const isOnDemand = !config.spotBidPrice;\n          // The spot bid price can only have 3 decimal places maximum\n          const spotBidPrice = isOnDemand ? '0' : config.spotBidPrice.toFixed(3);\n\n          addParam('Market', isOnDemand ? 'ON_DEMAND' : 'SPOT');\n          addParam('WorkerBidPrice', spotBidPrice);\n\n          // These paramaters apply for types apart from sagemaker, but keep the logic simple for now\n          const externalKeypairService = new ExternalKeypairService(creds);\n          const keyName = await externalKeypairService.create(id);\n\n          addParam('AmiId', amiImage);\n          addParam('AccessFromCIDRBlock', cidr);\n          addParam('KeyName', keyName);\n        }\n\n        return cfnParams;\n      },\n\n      async updateEnvironment(environment) {\n        await updateEnvironment(environment);\n      },\n\n      cleanup: () => {\n        storage.removeItem(localStorageKeys.pinToken);\n        self.environments.clear();\n        superCleanup();\n      },\n    };\n  })\n\n  .views(self => ({\n    get empty() {\n      return self.environments.size === 0;\n    },\n\n    get total() {\n      return self.environments.size;\n    },\n\n    get list() {\n      const result = [];\n      self.environments.forEach(environment => result.push(environment));\n\n      return _.reverse(_.sortBy(result, ['createdAt', 'name']));\n    },\n\n    getEnvironment(id) {\n      return self.environments.get(id);\n    },\n\n    get user() {\n      return getEnv(self).userStore.user;\n    },\n\n    getComputeConfiguration(platformId, configurationId) {\n      const store = getEnv(self).computePlatformsStore;\n      const platform = store.getComputePlatform(platformId);\n      if (!platform) return undefined;\n      return platform.getConfiguration(configurationId);\n    },\n  }));\n\nfunction registerContextItems(appContext) {\n  appContext.environmentsStore = EnvironmentsStore.create({}, appContext);\n}\n\nexport { EnvironmentsStore, registerContextItems };\n"],"file":"EnvironmentsStore.js"}