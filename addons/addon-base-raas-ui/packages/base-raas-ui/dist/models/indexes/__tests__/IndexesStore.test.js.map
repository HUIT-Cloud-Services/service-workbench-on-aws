{"version":3,"sources":["../../../../src/models/indexes/__tests__/IndexesStore.test.js"],"names":["jest","mock","describe","store","appContext","newIndex","id","rev","awsAccountId","description","createdAt","updatedAt","beforeEach","indexesStore","it","getIndexes","mockResolvedValue","addIndex","load","expect","list","toEqual","getIndex","retVal","toMatchObject"],"mappings":";;AAeA;;AACA;;;;;;AAEAA,IAAI,CAACC,IAAL,CAAU,sBAAV;AAEAC,QAAQ,CAAC,cAAD,EAAiB,YAAM;AAC7B,MAAIC,KAAK,GAAG,IAAZ;AACA,MAAMC,UAAU,GAAG,EAAnB;AACA,MAAMC,QAAQ,GAAG;AACfC,IAAAA,EAAE,EAAE,aADW;AAEfC,IAAAA,GAAG,EAAE,CAFU;AAGfC,IAAAA,YAAY,EAAE,kBAHC;AAIfC,IAAAA,WAAW,EAAE,cAJE;AAKfC,IAAAA,SAAS,EAAE,MALI;AAMfC,IAAAA,SAAS,EAAE;AANI,GAAjB;AASAC,EAAAA,UAAU,uEAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACH,wCAAqBR,UAArB,CADG;;AAAA;AAETD,YAAAA,KAAK,GAAGC,UAAU,CAACS,YAAnB;;AAFS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAD,GAAV;AAKAX,EAAAA,QAAQ,CAAC,WAAD,EAAc,YAAM;AAC1BY,IAAAA,EAAE,CAAC,kCAAD,uEAAqC;AAAA;AAAA;AAAA;AAAA;AACrC;AACAC,8BAAWC,iBAAX,CAA6B,EAA7B;;AACAC,4BAASD,iBAAT,CAA2BX,QAA3B;;AAHqC;AAAA,qBAI/BF,KAAK,CAACe,IAAN,EAJ+B;;AAAA;AAAA;AAAA,qBAO/Bf,KAAK,CAACc,QAAN,CAAeZ,QAAf,CAP+B;;AAAA;AASrC;AACAc,cAAAA,MAAM,CAAChB,KAAK,CAACiB,IAAN,CAAW,CAAX,EAAcd,EAAf,CAAN,CAAyBe,OAAzB,CAAiChB,QAAQ,CAACC,EAA1C;;AAVqC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAArC,GAAF;AAYD,GAbO,CAAR;AAeAJ,EAAAA,QAAQ,CAAC,WAAD,EAAc,YAAM;AAC1BY,IAAAA,EAAE,CAAC,2CAAD,uEAA8C;AAAA;AAAA;AAAA;AAAA;AAAA;AAC9C;AACAC,8BAAWC,iBAAX,CAA6B,CAACX,QAAD,CAA7B;;AAF8C;AAAA,qBAGxCF,KAAK,CAACe,IAAN,EAHwC;;AAAA;AAAA;AAAA,qBAMzBf,KAAK,CAACmB,QAAN,CAAejB,QAAQ,CAACC,EAAxB,CANyB;;AAAA;AAMxCiB,cAAAA,MANwC;AAQ9C;AACAJ,cAAAA,MAAM,CAACI,MAAD,CAAN,CAAeC,aAAf,CAA6BnB,QAA7B;;AAT8C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA9C,GAAF;AAYAS,IAAAA,EAAE,CAAC,+BAAD,uEAAkC;AAAA;AAAA;AAAA;AAAA;AAAA;AAClC;AACAC,8BAAWC,iBAAX,CAA6B,CAACX,QAAD,CAA7B;;AAFkC;AAAA,qBAG5BF,KAAK,CAACe,IAAN,EAH4B;;AAAA;AAAA;AAAA,qBAMbf,KAAK,CAACmB,QAAN,CAAe,yBAAf,CANa;;AAAA;AAM5BC,cAAAA,MAN4B;AAQlC;AACAJ,cAAAA,MAAM,CAACI,MAAD,CAAN,CAAeC,aAAf,CAA6B,EAA7B;;AATkC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAlC,GAAF;AAWD,GAxBO,CAAR;AAyBD,CAzDO,CAAR","sourcesContent":["/*\n *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\").\n *  You may not use this file except in compliance with the License.\n *  A copy of the License is located at\n *\n *  http://aws.amazon.com/apache2.0\n *\n *  or in the \"license\" file accompanying this file. This file is distributed\n *  on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n *  express or implied. See the License for the specific language governing\n *  permissions and limitations under the License.\n */\n\nimport { registerContextItems as registerIndexesStore } from '../IndexesStore';\nimport { getIndexes, addIndex } from '../../../helpers/api';\n\njest.mock('../../../helpers/api');\n\ndescribe('IndexesStore', () => {\n  let store = null;\n  const appContext = {};\n  const newIndex = {\n    id: 'gon_freecss',\n    rev: 2,\n    awsAccountId: 'aws-account-info',\n    description: 'whale island',\n    createdAt: '1999',\n    updatedAt: '2011',\n  };\n\n  beforeEach(async () => {\n    await registerIndexesStore(appContext);\n    store = appContext.indexesStore;\n  });\n\n  describe('add index', () => {\n    it('should successfully add an index', async () => {\n      // BUILD\n      getIndexes.mockResolvedValue([]);\n      addIndex.mockResolvedValue(newIndex);\n      await store.load();\n\n      // OPERATE\n      await store.addIndex(newIndex);\n\n      // CHECK\n      expect(store.list[0].id).toEqual(newIndex.id);\n    });\n  });\n\n  describe('get index', () => {\n    it('should get and return the specified index', async () => {\n      // BUILD\n      getIndexes.mockResolvedValue([newIndex]);\n      await store.load();\n\n      // OPERATE\n      const retVal = await store.getIndex(newIndex.id);\n\n      // CHECK\n      expect(retVal).toMatchObject(newIndex);\n    });\n\n    it('should return an empty object', async () => {\n      // BUILD\n      getIndexes.mockResolvedValue([newIndex]);\n      await store.load();\n\n      // OPERATE\n      const retVal = await store.getIndex('index_that_doesnt_exist');\n\n      // CHECK\n      expect(retVal).toMatchObject({});\n    });\n  });\n});\n"],"file":"IndexesStore.test.js"}