{"version":3,"sources":["../../src/helpers/xhr-upload.js"],"names":["upload","file","url","fields","req","XMLHttpRequest","uploadProgressListeners","uploadProgressCallback","uploadedBytes","forEach","fn","done","Promise","resolve","reject","addEventListener","event","loaded","Error","onreadystatechange","readyState","status","statusText","formData","FormData","Object","entries","name","value","append","open","send","cancel","abort","onProgress","cb","push"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAMA,MAAM,GAAG,SAATA,MAAS,CAACC,IAAD,EAAOC,GAAP,EAA4B;AAAA,MAAhBC,MAAgB,uEAAP,EAAO;AACzC,MAAMC,GAAG,GAAG,IAAIC,cAAJ,EAAZ;AACA,MAAMC,uBAAuB,GAAG,EAAhC;;AACA,MAAMC,sBAAsB,GAAG,SAAzBA,sBAAyB,CAAAC,aAAa,EAAI;AAC9CF,IAAAA,uBAAuB,CAACG,OAAxB,CAAgC,UAAAC,EAAE,EAAI;AACpCA,MAAAA,EAAE,CAACF,aAAD,CAAF;AACD,KAFD;AAGD,GAJD;;AAMA,MAAMG,IAAI,GAAG,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAC5CV,IAAAA,GAAG,CAACJ,MAAJ,CAAWe,gBAAX,CAA4B,UAA5B,EAAwC,UAAAC,KAAK,EAAI;AAC/CT,MAAAA,sBAAsB,CAACS,KAAK,CAACC,MAAN,IAAgB,CAAjB,CAAtB;AACD,KAFD;AAGAb,IAAAA,GAAG,CAACJ,MAAJ,CAAWe,gBAAX,CAA4B,OAA5B,EAAqC,YAAM;AACzCD,MAAAA,MAAM,CAAC,IAAII,KAAJ,CAAU,eAAV,CAAD,CAAN;AACD,KAFD;;AAGAd,IAAAA,GAAG,CAACe,kBAAJ,GAAyB,YAAM;AAC7B,UAAIf,GAAG,CAACgB,UAAJ,KAAmB,CAAvB,EAA0B;AACxB;AACA,YAAIhB,GAAG,CAACiB,MAAJ,KAAe,CAAnB,EAAsB;AACpB;AACAP,UAAAA,MAAM,CAAC,IAAII,KAAJ,CAAU,WAAV,CAAD,CAAN;AACD,SAHD,MAGO,IAAId,GAAG,CAACiB,MAAJ,IAAc,GAAd,IAAqBjB,GAAG,CAACiB,MAAJ,IAAc,GAAvC,EAA4C;AACjD;AACAP,UAAAA,MAAM,CAAC,IAAII,KAAJ,kBAAoBd,GAAG,CAACkB,UAAxB,EAAD,CAAN;AACD,SAHM,MAGA;AACLT,UAAAA,OAAO;AACR;AACF;AACF,KAbD;AAcD,GArBY,CAAb;AAuBA,MAAMU,QAAQ,GAAG,IAAIC,QAAJ,EAAjB;AACAC,EAAAA,MAAM,CAACC,OAAP,CAAevB,MAAf,EAAuBM,OAAvB,CAA+B;AAAA;AAAA,QAAEkB,IAAF;AAAA,QAAQC,KAAR;;AAAA,WAAmBL,QAAQ,CAACM,MAAT,CAAgBF,IAAhB,EAAsBC,KAAtB,CAAnB;AAAA,GAA/B;AACAL,EAAAA,QAAQ,CAACM,MAAT,CAAgB,MAAhB,EAAwB5B,IAAxB,EAA8BA,IAAI,CAAC0B,IAAnC;AAEAvB,EAAAA,GAAG,CAAC0B,IAAJ,CAAS,MAAT,EAAiB5B,GAAjB;AACAE,EAAAA,GAAG,CAAC2B,IAAJ,CAASR,QAAT;AAEA,SAAO;AACLZ,IAAAA,IAAI,EAAJA,IADK;AAELqB,IAAAA,MAFK,oBAEI;AACP5B,MAAAA,GAAG,CAAC6B,KAAJ;AACD,KAJI;AAKLC,IAAAA,UALK,sBAKMC,EALN,EAKU;AACb7B,MAAAA,uBAAuB,CAAC8B,IAAxB,CAA6BD,EAA7B;AACD;AAPI,GAAP;AASD,CAhDD;;eAkDenC,M","sourcesContent":["/*\n *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\").\n *  You may not use this file except in compliance with the License.\n *  A copy of the License is located at\n *\n *  http://aws.amazon.com/apache2.0\n *\n *  or in the \"license\" file accompanying this file. This file is distributed\n *  on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n *  express or implied. See the License for the specific language governing\n *  permissions and limitations under the License.\n */\n\n/**\n * @typedef {Object} UploadHandle\n * @property {Promise<void>} done a Promise that resolves if the upload completes, or rejects if there is an upload error.\n * @property {() => void} cancel cancels the upload by calling XMLHttpRequest.abort().\n * @property {(callback: (uploadedBytes: number) => void) => void} onProgress used to register event listeners for upload progress events\n */\n\n/**\n * Uploads an HTML file object or a blob using XMLHttpRequest.\n *\n * @params {File|Blob} file\n * @params {sring} url\n * @params {Object<string, any>} fields\n * @returns {UploadHandle}\n */\nconst upload = (file, url, fields = {}) => {\n  const req = new XMLHttpRequest();\n  const uploadProgressListeners = [];\n  const uploadProgressCallback = uploadedBytes => {\n    uploadProgressListeners.forEach(fn => {\n      fn(uploadedBytes);\n    });\n  };\n\n  const done = new Promise((resolve, reject) => {\n    req.upload.addEventListener('progress', event => {\n      uploadProgressCallback(event.loaded || 0);\n    });\n    req.upload.addEventListener('error', () => {\n      reject(new Error('Network Error'));\n    });\n    req.onreadystatechange = () => {\n      if (req.readyState === 4) {\n        // Request is DONE\n        if (req.status === 0) {\n          // Request status is UNSENT\n          reject(new Error('Cancelled'));\n        } else if (req.status >= 400 && req.status <= 599) {\n          // Request received 4xx or 5xx error\n          reject(new Error(`Error: ${req.statusText}`));\n        } else {\n          resolve();\n        }\n      }\n    };\n  });\n\n  const formData = new FormData();\n  Object.entries(fields).forEach(([name, value]) => formData.append(name, value));\n  formData.append('file', file, file.name);\n\n  req.open('POST', url);\n  req.send(formData);\n\n  return {\n    done,\n    cancel() {\n      req.abort();\n    },\n    onProgress(cb) {\n      uploadProgressListeners.push(cb);\n    },\n  };\n};\n\nexport default upload;\n"],"file":"xhr-upload.js"}