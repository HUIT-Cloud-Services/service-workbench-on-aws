{"version":3,"sources":["../../src/helpers/externalKeypairService.js"],"names":["EC2","require","SSM","paramStoreRoot","EnvironmentKeypairService","accessKeyId","secretAccessKey","region","ec2","sslEnabled","ssm","id","createKeyPair","KeyName","promise","keyPair","parameterName","putParameter","Name","Type","Value","KeyMaterial","Description","Overwrite","getParameter","WithDecryption","privateKey","Parameter","deleteKeyPair","deleteParameter"],"mappings":";;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,IAAMA,GAAG,GAAGC,OAAO,CAAC,qBAAD,CAAnB;;AACA,IAAMC,GAAG,GAAGD,OAAO,CAAC,qBAAD,CAAnB;;AAEA,IAAME,cAAc,GAAG,MAAvB;;IAEqBC,yB;AACnB,2CAAoE;AAAA,QAAtDC,WAAsD,QAAtDA,WAAsD;AAAA,QAAzCC,eAAyC,QAAzCA,eAAyC;AAAA,2BAAxBC,MAAwB;AAAA,QAAxBA,MAAwB,4BAAf,WAAe;;AAAA;;AAClE,QAAIF,WAAJ,EAAiB;AACf,WAAKG,GAAL,GAAW,IAAIR,GAAJ,CAAQ;AACjBK,QAAAA,WAAW,EAAXA,WADiB;AAEjBC,QAAAA,eAAe,EAAfA,eAFiB;AAGjBC,QAAAA,MAAM,EAANA,MAHiB;AAIjBE,QAAAA,UAAU,EAAE;AAJK,OAAR,CAAX;AAMA,WAAKC,GAAL,GAAW,IAAIR,GAAJ,CAAQ;AACjBG,QAAAA,WAAW,EAAXA,WADiB;AAEjBC,QAAAA,eAAe,EAAfA,eAFiB;AAGjBC,QAAAA,MAAM,EAANA,MAHiB;AAIjBE,QAAAA,UAAU,EAAE;AAJK,OAAR,CAAX;AAMD,KAbD,MAaO;AACL,WAAKD,GAAL,GAAW,IAAIR,GAAJ,CAAQ;AACjBS,QAAAA,UAAU,EAAE;AADK,OAAR,CAAX;AAGA,WAAKC,GAAL,GAAW,IAAIR,GAAJ,CAAQ;AACjBO,QAAAA,UAAU,EAAE;AADK,OAAR,CAAX;AAGD;AACF;;;;;6FAEYE,E;;;;;;;uBACW,KAAKH,GAAL,CAASI,aAAT,CAAuB;AAAEC,kBAAAA,OAAO,EAAEF;AAAX,iBAAvB,EAAwCG,OAAxC,E;;;AAAhBC,gBAAAA,O;AAEAC,gBAAAA,a,cAAoBb,c,2BAA+BQ,E;;uBACnD,KAAKD,GAAL,CACHO,YADG,CACU;AACZC,kBAAAA,IAAI,EAAEF,aADM;AAEZG,kBAAAA,IAAI,EAAE,cAFM;AAGZC,kBAAAA,KAAK,EAAEL,OAAO,CAACM,WAHH;AAIZC,kBAAAA,WAAW,oCAA6BX,EAA7B,CAJC;AAKZY,kBAAAA,SAAS,EAAE;AALC,iBADV,EAQHT,OARG,E;;;iDAUCC,OAAO,CAACF,O;;;;;;;;;;;;;;;;;;;gGAGFF,E;;;;;;AACPK,gBAAAA,a,cAAoBb,c,2BAA+BQ,E;;uBAChC,KAAKD,GAAL,CACtBc,YADsB,CACT;AACZN,kBAAAA,IAAI,EAAEF,aADM;AAEZS,kBAAAA,cAAc,EAAE;AAFJ,iBADS,EAKtBX,OALsB,E;;;AAAnBY,gBAAAA,U;kDAOC;AAAEA,kBAAAA,UAAU,EAAEA,UAAU,CAACC,SAAX,CAAqBP;AAAnC,iB;;;;;;;;;;;;;;;;;;;+FAGIT,E;;;;;;AACLK,gBAAAA,a,cAAoBb,c,2BAA+BQ,E;;uBAEnD,KAAKH,GAAL,CAASoB,aAAT,CAAuB;AAAEf,kBAAAA,OAAO,EAAEF;AAAX,iBAAvB,EAAwCG,OAAxC,E;;;;uBAEA,KAAKJ,GAAL,CACHmB,eADG,CACa;AACfX,kBAAAA,IAAI,EAAEF;AADS,iBADb,EAIHF,OAJG,E;;;kDAMC,I","sourcesContent":["/*\n *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\").\n *  You may not use this file except in compliance with the License.\n *  A copy of the License is located at\n *\n *  http://aws.amazon.com/apache2.0\n *\n *  or in the \"license\" file accompanying this file. This file is distributed\n *  on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n *  express or implied. See the License for the specific language governing\n *  permissions and limitations under the License.\n */\n\nconst EC2 = require('aws-sdk/clients/ec2');\nconst SSM = require('aws-sdk/clients/ssm');\n\nconst paramStoreRoot = 'raas';\n\nexport default class EnvironmentKeypairService {\n  constructor({ accessKeyId, secretAccessKey, region = 'us-east-1' }) {\n    if (accessKeyId) {\n      this.ec2 = new EC2({\n        accessKeyId,\n        secretAccessKey,\n        region,\n        sslEnabled: true,\n      });\n      this.ssm = new SSM({\n        accessKeyId,\n        secretAccessKey,\n        region,\n        sslEnabled: true,\n      });\n    } else {\n      this.ec2 = new EC2({\n        sslEnabled: true,\n      });\n      this.ssm = new SSM({\n        sslEnabled: true,\n      });\n    }\n  }\n\n  async create(id) {\n    const keyPair = await this.ec2.createKeyPair({ KeyName: id }).promise();\n\n    const parameterName = `/${paramStoreRoot}/environments/${id}`;\n    await this.ssm\n      .putParameter({\n        Name: parameterName,\n        Type: 'SecureString',\n        Value: keyPair.KeyMaterial,\n        Description: `ssh key for environment ${id}`,\n        Overwrite: true,\n      })\n      .promise();\n\n    return keyPair.KeyName;\n  }\n\n  async mustFind(id) {\n    const parameterName = `/${paramStoreRoot}/environments/${id}`;\n    const privateKey = await this.ssm\n      .getParameter({\n        Name: parameterName,\n        WithDecryption: true,\n      })\n      .promise();\n\n    return { privateKey: privateKey.Parameter.Value };\n  }\n\n  async delete(id) {\n    const parameterName = `/${paramStoreRoot}/environments/${id}`;\n\n    await this.ec2.deleteKeyPair({ KeyName: id }).promise();\n\n    await this.ssm\n      .deleteParameter({\n        Name: parameterName,\n      })\n      .promise();\n\n    return true;\n  }\n}\n"],"file":"externalKeypairService.js"}