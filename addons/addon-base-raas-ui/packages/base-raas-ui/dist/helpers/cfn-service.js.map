{"version":3,"sources":["../../src/helpers/cfn-service.js"],"names":["_","require","aws","STACK_FAIL","STACK_SUCCESS","CfnService","accessKeyId","secretAccessKey","region","cfn","CloudFormation","sslEnabled","status","includes","stackName","params","StackName","describeStacks","promise","response","stack","get","statusReason","outputs","outputsNormalized","map","item","key","OutputKey","value","OutputValue","description","Description","exportName","ExportName","isDone","isFailed","Error","code","message","cfnParams","templateUrl","input","Parameters","Capabilities","TemplateURL","Tags","Key","Value","createStack","deleteStack","sts","STS","getCallerIdentity"],"mappings":"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","sourcesContent":["/*\n *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\").\n *  You may not use this file except in compliance with the License.\n *  A copy of the License is located at\n *\n *  http://aws.amazon.com/apache2.0\n *\n *  or in the \"license\" file accompanying this file. This file is distributed\n *  on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n *  express or implied. See the License for the specific language governing\n *  permissions and limitations under the License.\n */\n\nconst _ = require('lodash');\nconst aws = require('aws-sdk');\n\nconst STACK_FAIL = [\n  'CREATE_FAILED',\n  'ROLLBACK_FAILED',\n  'DELETE_FAILED',\n  'UPDATE_ROLLBACK_FAILED',\n  'ROLLBACK_COMPLETE',\n  'UPDATE_ROLLBACK_COMPLETE',\n];\nconst STACK_SUCCESS = ['CREATE_COMPLETE', 'DELETE_COMPLETE', 'UPDATE_COMPLETE'];\n\nexport default class CfnService {\n  constructor(accessKeyId, secretAccessKey, region = 'us-east-1') {\n    if (accessKeyId) {\n      this.cfn = new aws.CloudFormation({\n        accessKeyId,\n        secretAccessKey,\n        region,\n        sslEnabled: true,\n      });\n    } else {\n      this.cfn = new aws.CloudFormation({\n        sslEnabled: true,\n      });\n    }\n  }\n\n  isDone(status) {\n    return STACK_FAIL.includes(status) || STACK_SUCCESS.includes(status);\n  }\n\n  static async validateCredentials(accessKeyId, secretAccessKey) {\n    const sts = new aws.STS({\n      accessKeyId,\n      secretAccessKey,\n      sslEnabled: true,\n    });\n\n    return sts.getCallerIdentity().promise();\n  }\n\n  async describeStack(stackName) {\n    const params = { StackName: stackName };\n\n    try {\n      const response = await this.cfn.describeStacks(params).promise();\n      const stack = _.get(response, 'Stacks[0]');\n      const status = _.get(stack, 'StackStatus', 'Unknown');\n      const statusReason = _.get(stack, 'StackStatusReason', 'Unknown');\n      const outputs = _.get(stack, 'Outputs', []);\n      const outputsNormalized = _.map(outputs, item => ({\n        key: item.OutputKey,\n        value: item.OutputValue,\n        description: item.Description,\n        exportName: item.ExportName,\n      }));\n\n      return {\n        status,\n        statusReason,\n        isDone: this.isDone(status),\n        isFailed: STACK_FAIL.includes(status),\n        outputs: outputsNormalized,\n      };\n    } catch (e) {\n      throw new Error(`${e.code}: ${e.message}`);\n    }\n  }\n\n  async createStack(stackName, cfnParams, templateUrl, description = '') {\n    const input = {\n      StackName: stackName,\n      Parameters: cfnParams,\n      Capabilities: ['CAPABILITY_IAM', 'CAPABILITY_NAMED_IAM'],\n      TemplateURL: templateUrl,\n      Tags: [\n        {\n          Key: 'Description',\n          Value: description,\n        },\n      ],\n    };\n\n    return this.cfn.createStack(input).promise();\n  }\n\n  async deleteStack(stackName) {\n    const input = {\n      StackName: stackName,\n    };\n\n    const response = await this.cfn.deleteStack(input).promise();\n\n    return response;\n  }\n}\n"],"file":"cfn-service.js"}