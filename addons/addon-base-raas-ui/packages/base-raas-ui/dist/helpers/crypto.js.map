{"version":3,"sources":["../../src/helpers/crypto.js"],"names":["aesGcmEncrypt","plaintext","password","pwUtf8","TextEncoder","encode","crypto","subtle","digest","pwHash","iv","getRandomValues","Uint8Array","alg","name","importKey","key","ptUtf8","encrypt","ctBuffer","ctArray","Array","from","ctStr","map","byte","String","fromCharCode","join","ctBase64","btoa","ivHex","b","toString","slice","aesGcmDecrypt","ciphertext","match","parseInt","atob","ctUint8","ch","charCodeAt","decrypt","plainBuffer","TextDecoder","decode"],"mappings":"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","sourcesContent":["/*\n *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\").\n *  You may not use this file except in compliance with the License.\n *  A copy of the License is located at\n *\n *  http://aws.amazon.com/apache2.0\n *\n *  or in the \"license\" file accompanying this file. This file is distributed\n *  on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n *  express or implied. See the License for the specific language governing\n *  permissions and limitations under the License.\n */\n\n/**\n * Encrypts plaintext using AES-GCM with supplied password, for decryption with aesGcmDecrypt().\n * https://gist.github.com/chrisveness/43bcda93af9f646d083fad678071b90a\n * MIT lisence\n *\n * @param   {String} plaintext - Plaintext to be encrypted.\n * @param   {String} password - Password to use to encrypt plaintext.\n * @returns {String} Encrypted ciphertext.\n *\n * @example\n *   const ciphertext = await aesGcmEncrypt('my secret text', 'pw');\n *   aesGcmEncrypt('my secret text', 'pw').then(function(ciphertext) { console.log(ciphertext); });\n */\nasync function aesGcmEncrypt(plaintext, password) {\n  const pwUtf8 = new TextEncoder().encode(password); // encode password as UTF-8\n  const pwHash = await crypto.subtle.digest('SHA-256', pwUtf8); // hash the password\n\n  const iv = crypto.getRandomValues(new Uint8Array(12)); // get 96-bit random iv\n\n  const alg = { name: 'AES-GCM', iv }; // specify algorithm to use\n\n  const key = await crypto.subtle.importKey('raw', pwHash, alg, false, ['encrypt']); // generate key from pw\n\n  const ptUtf8 = new TextEncoder().encode(plaintext); // encode plaintext as UTF-8\n  const ctBuffer = await crypto.subtle.encrypt(alg, key, ptUtf8); // encrypt plaintext using key\n\n  const ctArray = Array.from(new Uint8Array(ctBuffer)); // ciphertext as byte array\n  const ctStr = ctArray.map(byte => String.fromCharCode(byte)).join(''); // ciphertext as string\n  const ctBase64 = btoa(ctStr); // encode ciphertext as base64\n\n  const ivHex = Array.from(iv)\n    .map(b => `00${b.toString(16)}`.slice(-2))\n    .join(''); // iv as hex string\n\n  return ivHex + ctBase64; // return iv+ciphertext\n}\n\n/**\n * Decrypts ciphertext encrypted with aesGcmEncrypt() using supplied password.\n * https://gist.github.com/chrisveness/43bcda93af9f646d083fad678071b90a\n * MIT lisence\n *\n * @param   {String} ciphertext - Ciphertext to be decrypted.\n * @param   {String} password - Password to use to decrypt ciphertext.\n * @returns {String} Decrypted plaintext.\n *\n * @example\n *   const plaintext = await aesGcmDecrypt(ciphertext, 'pw');\n *   aesGcmDecrypt(ciphertext, 'pw').then(function(plaintext) { console.log(plaintext); });\n */\nasync function aesGcmDecrypt(ciphertext, password) {\n  const pwUtf8 = new TextEncoder().encode(password); // encode password as UTF-8\n  const pwHash = await crypto.subtle.digest('SHA-256', pwUtf8); // hash the password\n\n  const iv = ciphertext\n    .slice(0, 24)\n    .match(/.{2}/g)\n    .map(byte => parseInt(byte, 16)); // get iv from ciphertext\n\n  const alg = { name: 'AES-GCM', iv: new Uint8Array(iv) }; // specify algorithm to use\n\n  const key = await crypto.subtle.importKey('raw', pwHash, alg, false, ['decrypt']); // use pw to generate key\n\n  const ctStr = atob(ciphertext.slice(24)); // decode base64 ciphertext\n  const ctUint8 = new Uint8Array(ctStr.match(/[\\s\\S]/g).map(ch => ch.charCodeAt(0))); // ciphertext as Uint8Array\n\n  const plainBuffer = await crypto.subtle.decrypt(alg, key, ctUint8); // decrypt ciphertext using key\n  const plaintext = new TextDecoder().decode(plainBuffer); // decode password from UTF-8\n\n  return plaintext; // return the plaintext\n}\n\nexport { aesGcmEncrypt, aesGcmDecrypt };\n"],"file":"crypto.js"}