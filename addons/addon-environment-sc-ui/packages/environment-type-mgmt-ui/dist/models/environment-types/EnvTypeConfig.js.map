{"version":3,"sources":["../../../src/models/environment-types/EnvTypeConfig.js"],"names":["KeyValuePair","types","model","key","value","EnvTypeConfig","id","identifier","name","desc","estimatedCostInfo","allowRoleIds","optional","array","string","denyRoleIds","params","tags","createdAt","createdBy","updatedAt","updatedBy","allowedToUse","actions","self","setEnvTypeConfig","envTypeConfig","views","descHtml","showdown","convert","estimatedCostInfoHtml"],"mappings":";;;;;;;AAeA;;AAfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA,IAAMA,YAAY,GAAGC,qBAAMC,KAAN,CAAY,cAAZ,EAA4B;AAC/CC,EAAAA,GAAG,EAAE,EAD0C;AAE/CC,EAAAA,KAAK,EAAE;AAFwC,CAA5B,CAArB,C,CAKA;AACA;AACA;;;AACA,IAAMC,aAAa,GAAGJ,qBACnBC,KADmB,CACb,eADa,EACI;AACtBI,EAAAA,EAAE,EAAEL,qBAAMM,UADY;AAEtBC,EAAAA,IAAI,EAAE,EAFgB;AAGtBC,EAAAA,IAAI,EAAE,EAHgB;AAItBC,EAAAA,iBAAiB,EAAE,EAJG;AAKtBC,EAAAA,YAAY,EAAEV,qBAAMW,QAAN,CAAeX,qBAAMY,KAAN,CAAYZ,qBAAMa,MAAlB,CAAf,EAA0C,EAA1C,CALQ;AAMtBC,EAAAA,WAAW,EAAEd,qBAAMW,QAAN,CAAeX,qBAAMY,KAAN,CAAYZ,qBAAMa,MAAlB,CAAf,EAA0C,EAA1C,CANS;AAOtBE,EAAAA,MAAM,EAAEf,qBAAMW,QAAN,CAAeX,qBAAMY,KAAN,CAAYb,YAAZ,CAAf,EAA0C,EAA1C,CAPc;AAQtBiB,EAAAA,IAAI,EAAEhB,qBAAMW,QAAN,CAAeX,qBAAMY,KAAN,CAAYb,YAAZ,CAAf,EAA0C,EAA1C,CARgB;AAStBkB,EAAAA,SAAS,EAAE,EATW;AAUtBC,EAAAA,SAAS,EAAE,EAVW;AAWtBC,EAAAA,SAAS,EAAE,EAXW;AAYtBC,EAAAA,SAAS,EAAE,EAZW;AActB;AACA;AACA;AACA;AACAC,EAAAA,YAAY,EAAErB,qBAAMW,QAAN,CAAeX,+BAAf,EAA8B,IAA9B;AAlBQ,CADJ,EAqBnBsB,OArBmB,CAqBX,UAAAC,IAAI;AAAA,SAAK;AAChBC,IAAAA,gBADgB,4BACCC,aADD,EACgB;AAC9B,wCAAcF,IAAd,EAAoBE,aAApB;AACD;AAHe,GAAL;AAAA,CArBO,EA0BnBC,KA1BmB,CA0Bb,UAAAH,IAAI;AAAA,SAAK;AACd,QAAII,QAAJ,GAAe;AACb,UAAMC,QAAQ,GAAG,2BAAOL,IAAP,EAAaK,QAA9B;AACA,aAAOA,QAAQ,CAACC,OAAT,CAAiBN,IAAI,CAACf,IAAtB,CAAP;AACD,KAJa;;AAKd,QAAIsB,qBAAJ,GAA4B;AAC1B,UAAMF,QAAQ,GAAG,2BAAOL,IAAP,EAAaK,QAA9B;AACA,aAAOA,QAAQ,CAACC,OAAT,CAAiBN,IAAI,CAACd,iBAAtB,CAAP;AACD;;AARa,GAAL;AAAA,CA1BS,CAAtB;;;eAqCeL,a","sourcesContent":["/*\n *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\").\n *  You may not use this file except in compliance with the License.\n *  A copy of the License is located at\n *\n *  http://aws.amazon.com/apache2.0\n *\n *  or in the \"license\" file accompanying this file. This file is distributed\n *  on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n *  express or implied. See the License for the specific language governing\n *  permissions and limitations under the License.\n */\n\nimport { types, applySnapshot, getEnv } from 'mobx-state-tree';\n\nconst KeyValuePair = types.model('KeyValuePair', {\n  key: '',\n  value: '',\n});\n\n// ====================================================================================================================================\n// EnvTypeConfig\n// ====================================================================================================================================\nconst EnvTypeConfig = types\n  .model('EnvTypeConfig', {\n    id: types.identifier,\n    name: '',\n    desc: '',\n    estimatedCostInfo: '',\n    allowRoleIds: types.optional(types.array(types.string), []),\n    denyRoleIds: types.optional(types.array(types.string), []),\n    params: types.optional(types.array(KeyValuePair), []),\n    tags: types.optional(types.array(KeyValuePair), []),\n    createdAt: '',\n    createdBy: '',\n    updatedAt: '',\n    updatedBy: '',\n\n    // flag indicating if the env type config is allowed to be used\n    // defaulting this to true as the API only returns those env type configs that are usable\n    // except for admins when include=all is passed in the query param, it returns all env type configs\n    // including the ones the user is not allowed to use when launching an environment\n    allowedToUse: types.optional(types.boolean, true),\n  })\n  .actions(self => ({\n    setEnvTypeConfig(envTypeConfig) {\n      applySnapshot(self, envTypeConfig);\n    },\n  }))\n  .views(self => ({\n    get descHtml() {\n      const showdown = getEnv(self).showdown;\n      return showdown.convert(self.desc);\n    },\n    get estimatedCostInfoHtml() {\n      const showdown = getEnv(self).showdown;\n      return showdown.convert(self.estimatedCostInfo);\n    },\n  }));\n\nexport default EnvTypeConfig;\nexport { EnvTypeConfig };\n"],"file":"EnvTypeConfig.js"}