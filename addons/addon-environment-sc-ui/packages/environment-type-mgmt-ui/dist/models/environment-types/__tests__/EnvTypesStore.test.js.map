{"version":3,"sources":["../../../../src/models/environment-types/__tests__/EnvTypesStore.test.js"],"names":["jest","mock","describe","store","appContext","envTypeCandidatesStore","onEnvTypeCandidateImport","fn","load","beforeEach","envTypesStore","it","newEnvType","id","status","addEnvType","ret","getEnvType","expect","toBeDefined","toBe","createEnvType","mockResolvedValueOnce","list","toHaveBeenCalledWith","existingEnvType","getAllEnvTypes","deleteEnvType","toBeUndefined","length","toHaveBeenCalled"],"mappings":"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","sourcesContent":["/*\n *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\").\n *  You may not use this file except in compliance with the License.\n *  A copy of the License is located at\n *\n *  http://aws.amazon.com/apache2.0\n *\n *  or in the \"license\" file accompanying this file. This file is distributed\n *  on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n *  express or implied. See the License for the specific language governing\n *  permissions and limitations under the License.\n */\n\nimport { getAllEnvTypes, createEnvType } from '../../../helpers/api';\n\nimport { registerContextItems as registerEnvTypesStore } from '../EnvTypesStore';\n\njest.mock('../../../helpers/api');\n\ndescribe('EnvTypesStore', () => {\n  let store = null;\n  const appContext = {\n    envTypeCandidatesStore: {\n      onEnvTypeCandidateImport: jest.fn(),\n      load: jest.fn(),\n    },\n  };\n\n  beforeEach(async () => {\n    await registerEnvTypesStore(appContext);\n    store = appContext.envTypesStore;\n  });\n\n  it('should add a new envType', async () => {\n    // BUILD\n    const newEnvType = {\n      id: 'watson',\n      status: 'approved',\n    };\n    await store.load();\n\n    // OPERATE\n    await store.addEnvType(newEnvType);\n\n    // CHECK\n    const ret = store.getEnvType(newEnvType.id);\n    expect(ret).toBeDefined();\n    expect(ret.id).toBe(newEnvType.id);\n  });\n\n  it('should create a new envType', async () => {\n    // BUILD\n    const newEnvType = {\n      id: 'crick?',\n      status: 'approved',\n    };\n    createEnvType.mockResolvedValueOnce(newEnvType);\n    await store.load();\n\n    // OPERATE\n    await store.createEnvType(newEnvType);\n\n    // CHECK\n    expect(store.list[0].id).toBe(newEnvType.id);\n    expect(appContext.envTypeCandidatesStore.onEnvTypeCandidateImport).toHaveBeenCalledWith(newEnvType.id);\n  });\n\n  it('should remove the existing environment', async () => {\n    // BUILD\n    const existingEnvType = {\n      id: 'or_jennings?',\n      status: 'approved',\n    };\n\n    getAllEnvTypes.mockResolvedValueOnce([existingEnvType]);\n    await store.load();\n    expect(store.list[0]).toBeDefined();\n\n    // OPERATE\n    await store.deleteEnvType(existingEnvType.id);\n\n    // CHECK\n    expect(store.list[0]).toBeUndefined();\n    expect(store.list.length).toBe(0);\n    expect(appContext.envTypeCandidatesStore.load).toHaveBeenCalled();\n  });\n});\n"],"file":"EnvTypesStore.test.js"}