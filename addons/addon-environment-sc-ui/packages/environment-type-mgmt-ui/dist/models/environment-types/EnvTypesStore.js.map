{"version":3,"sources":["../../../src/models/environment-types/EnvTypesStore.js"],"names":["EnvTypesStore","BaseStore","named","props","envTypes","types","optional","map","EnvType","envTypeStores","EnvTypeStore","envTypeConfigsStores","EnvTypeConfigsStore","tickPeriod","actions","self","superCleanup","cleanup","doLoad","runInAction","exiting","newItem","setEnvType","addEnvType","rawEnvType","id","previous","get","put","createEnvType","envType","createdEnvType","createdEnvTypeModel","create","set","appContext","envTypeCandidatesStore","onEnvTypeCandidateImport","deleteEnvType","load","updateEnvType","updatedEnvType","previousEnvType","approveEnvType","getEnvType","rev","updated","revokeEnvType","getEnvTypeStore","envTypeId","entry","getEnvTypeConfigsStore","envTypeConfigsStore","clear","views","list","_","sortBy","c","listApproved","filter","listNotApproved","empty","isEmpty","registerContextItems","envTypesStore"],"mappings":"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","sourcesContent":["/*\n *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\").\n *  You may not use this file except in compliance with the License.\n *  A copy of the License is located at\n *\n *  http://aws.amazon.com/apache2.0\n *\n *  or in the \"license\" file accompanying this file. This file is distributed\n *  on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n *  express or implied. See the License for the specific language governing\n *  permissions and limitations under the License.\n */\n\nimport { getEnv, types } from 'mobx-state-tree';\n\nimport { BaseStore } from '@aws-ee/base-ui/dist/models/BaseStore';\nimport _ from 'lodash';\nimport { consolidateToMap, mapToArray } from '@aws-ee/base-ui/dist/helpers/utils';\nimport { EnvType } from './EnvType';\nimport {\n  getAllEnvTypes,\n  approveEnvType,\n  revokeEnvType,\n  deleteEnvType,\n  createEnvType,\n  updateEnvType,\n} from '../../helpers/api';\nimport { EnvTypeConfigsStore } from './EnvTypeConfigsStore';\nimport { EnvTypeStore } from './EnvTypeStore';\n\n// ==================================================================\n// EnvTypesStore\n// ==================================================================\nconst EnvTypesStore = BaseStore.named('EnvTypesStore')\n  .props({\n    // map of EnvTypes with key = id, value = EnvType MST model instance\n    envTypes: types.optional(types.map(EnvType), {}),\n\n    // map of EnvTypeStores with key = id, value = EnvTypeStore MST model instance\n    envTypeStores: types.optional(types.map(EnvTypeStore), {}),\n\n    // map of EnvTypeConfigsStores with key = id, value = EnvTypeConfigsStore MST model instance\n    envTypeConfigsStores: types.optional(types.map(EnvTypeConfigsStore), {}),\n\n    tickPeriod: 60 * 1000, // 1 minute\n  })\n  .actions(self => {\n    // save the base implementation of cleanup\n    const superCleanup = self.cleanup;\n\n    return {\n      async doLoad() {\n        const envTypes = (await getAllEnvTypes()) || [];\n        self.runInAction(() => {\n          consolidateToMap(self.envTypes, envTypes, (exiting, newItem) => {\n            exiting.setEnvType(newItem);\n          });\n        });\n      },\n\n      addEnvType(rawEnvType) {\n        const id = rawEnvType.id;\n        const previous = self.envTypes.get(id);\n\n        if (!previous) {\n          self.envTypes.put(rawEnvType);\n        } else {\n          previous.setEnvType(rawEnvType);\n        }\n      },\n\n      async createEnvType(envType) {\n        const createdEnvType = await createEnvType(envType);\n        self.runInAction(() => {\n          // TODO replace this with a call to self.addEnvType() above\n          // Add newly created env type to env types map\n          const createdEnvTypeModel = EnvType.create(createdEnvType);\n          self.envTypes.set(createdEnvTypeModel.id, createdEnvTypeModel);\n        });\n        // Addition or deletion of env type impacts env type candidates store\n        // because imported env types are no longer candidates for import\n        // let candidate store know that env type candidate is imported\n        const appContext = getEnv(self);\n        await appContext.envTypeCandidatesStore.onEnvTypeCandidateImport(envType.id);\n      },\n\n      async deleteEnvType(id) {\n        await deleteEnvType(id);\n        self.runInAction(() => {\n          self.envTypes.delete(id);\n        });\n        // Addition or deletion of env type impacts env type candidates store\n        // because delete env types are candidates for import again\n        // reload env type candidates store as well\n        const appContext = getEnv(self);\n        await appContext.envTypeCandidatesStore.load();\n      },\n\n      async updateEnvType(envType) {\n        const updatedEnvType = await updateEnvType(envType);\n        self.runInAction(() => {\n          const previousEnvType = self.envTypes.get(updatedEnvType.id);\n          previousEnvType.setEnvType(updatedEnvType);\n        });\n      },\n\n      async approveEnvType(id) {\n        const previous = self.getEnvType(id);\n        const updated = await approveEnvType(id, previous.rev);\n        previous.setEnvType(updated);\n      },\n\n      async revokeEnvType(id) {\n        const previous = self.getEnvType(id);\n        const updated = await revokeEnvType(id, previous.rev);\n        previous.setEnvType(updated);\n      },\n\n      getEnvTypeStore(envTypeId) {\n        let entry = self.envTypeStores.get(envTypeId);\n        if (!entry) {\n          // Lazily create the store\n          self.envTypeStores.set(envTypeId, EnvTypeStore.create({ envTypeId }));\n          entry = self.envTypeStores.get(envTypeId);\n        }\n\n        return entry;\n      },\n\n      getEnvTypeConfigsStore(envTypeId) {\n        let envTypeConfigsStore = self.envTypeConfigsStores.get(envTypeId);\n        if (!envTypeConfigsStore) {\n          self.envTypeConfigsStores.set(envTypeId, EnvTypeConfigsStore.create({ id: envTypeId }));\n          envTypeConfigsStore = self.envTypeConfigsStores.get(envTypeId);\n        }\n        return envTypeConfigsStore;\n      },\n\n      cleanup: () => {\n        self.envTypes.clear();\n        self.envTypeStores.clear();\n        self.envTypeConfigsStores.clear();\n        superCleanup();\n      },\n    };\n  })\n  .views(self => ({\n    get list() {\n      return _.sortBy(mapToArray(self.envTypes), c => -1 * _.get(c, 'provisioningArtifact.createdTime'));\n    },\n    get listApproved() {\n      return _.filter(self.list, 'isApproved');\n    },\n    get listNotApproved() {\n      return _.filter(self.list, 'isNotApproved');\n    },\n    get empty() {\n      return _.isEmpty(self.list);\n    },\n    getEnvType(id) {\n      return self.envTypes.get(id);\n    },\n  }));\n\nfunction registerContextItems(appContext) {\n  appContext.envTypesStore = EnvTypesStore.create({}, appContext);\n}\n\nexport { EnvTypesStore, registerContextItems };\n"],"file":"EnvTypesStore.js"}