{"version":3,"sources":["../../../src/models/environment-types/EnvTypeCandidatesStore.js"],"names":["EnvTypeCandidatesStore","BaseStore","named","props","envTypeCandidates","types","optional","map","EnvTypeCandidate","tickPeriod","actions","self","superCleanup","cleanup","doLoad","runInAction","exiting","newItem","setEnvTypeCandidate","clear","onEnvTypeCandidateImport","id","envTypeCandidateImported","get","load","views","list","_","sortBy","c","listLatestVersions","filter","listAllVersions","empty","isEmpty","getEnvTypeCandidate","registerContextItems","appContext","envTypeCandidatesStore","create"],"mappings":";;;;;;;;AAeA;;AACA;;AAEA;;AAEA;;AACA;;AACA;;;;;;;;AAEA;AACA;AACA;AACA,IAAMA,sBAAsB,GAAGC,qBAAUC,KAAV,CAAgB,wBAAhB,EAC5BC,KAD4B,CACtB;AACLC,EAAAA,iBAAiB,EAAEC,qBAAMC,QAAN,CAAeD,qBAAME,GAAN,CAAUC,kCAAV,CAAf,EAA4C,EAA5C,CADd;AAELC,EAAAA,UAAU,EAAE,KAAK,IAFZ,CAEkB;;AAFlB,CADsB,EAK5BC,OAL4B,CAKpB,UAAAC,IAAI,EAAI;AACf;AACA,MAAMC,YAAY,GAAGD,IAAI,CAACE,OAA1B;AAEA,SAAO;AACCC,IAAAA,MADD,oBACU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACoB,8CADpB;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA,8BAC6D,EAD7D;;AAAA;AACPV,gBAAAA,iBADO;AAEbO,gBAAAA,IAAI,CAACI,WAAL,CAAiB,YAAM;AACrB,+CAAiBJ,IAAI,CAACP,iBAAtB,EAAyCA,iBAAzC,EAA4D,UAACY,OAAD,EAAUC,OAAV,EAAsB;AAChFD,oBAAAA,OAAO,CAACE,mBAAR,CAA4BD,OAA5B;AACD,mBAFD;AAGD,iBAJD;;AAFa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOd,KARI;AAULJ,IAAAA,OAAO,EAAE,mBAAM;AACbF,MAAAA,IAAI,CAACP,iBAAL,CAAuBe,KAAvB;AACAP,MAAAA,YAAY;AACb,KAbI;AAeCQ,IAAAA,wBAfD,oCAe0BC,EAf1B,EAe8B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACjC;AACA;AACA;AACMC,gBAAAA,wBAJ2B,GAIAX,IAAI,CAACP,iBAAL,CAAuBmB,GAAvB,CAA2BF,EAA3B,CAJA,EAMjC;AACA;AACA;AACA;;AACA,2CAAOC,wBAAP;AAViC;AAAA,uBAY3BX,IAAI,CAACa,IAAL,EAZ2B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAalC;AA5BI,GAAP;AA8BD,CAvC4B,EAwC5BC,KAxC4B,CAwCtB,UAAAd,IAAI;AAAA,SAAK;AACd,QAAIe,IAAJ,GAAW;AACT,aAAOC,mBAAEC,MAAF,CAAS,uBAAWjB,IAAI,CAACP,iBAAhB,CAAT,EAA6C,UAAAyB,CAAC;AAAA,eAAI,CAAC,CAAD,GAAKF,mBAAEJ,GAAF,CAAMM,CAAN,EAAS,kCAAT,CAAT;AAAA,OAA9C,CAAP,CADS,CAET;AACD,KAJa;;AAKd,QAAIC,kBAAJ,GAAyB;AACvB,aAAOH,mBAAEI,MAAF,CAASpB,IAAI,CAACe,IAAd,EAAoB,UAApB,CAAP;AACD,KAPa;;AAQd,QAAIM,eAAJ,GAAsB;AACpB,aAAOrB,IAAI,CAACe,IAAZ;AACD,KAVa;;AAWd,QAAIO,KAAJ,GAAY;AACV,aAAON,mBAAEO,OAAF,CAAUvB,IAAI,CAACe,IAAf,CAAP;AACD,KAba;;AAcdS,IAAAA,mBAdc,+BAcMd,EAdN,EAcU;AACtB,aAAOV,IAAI,CAACP,iBAAL,CAAuBmB,GAAvB,CAA2BF,EAA3B,CAAP;AACD;AAhBa,GAAL;AAAA,CAxCkB,CAA/B;;;;AA0DA,SAASe,oBAAT,CAA8BC,UAA9B,EAA0C;AACxCA,EAAAA,UAAU,CAACC,sBAAX,GAAoCtC,sBAAsB,CAACuC,MAAvB,CAA8B,EAA9B,EAAkCF,UAAlC,CAApC;AACD","sourcesContent":["/*\n *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\").\n *  You may not use this file except in compliance with the License.\n *  A copy of the License is located at\n *\n *  http://aws.amazon.com/apache2.0\n *\n *  or in the \"license\" file accompanying this file. This file is distributed\n *  on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n *  express or implied. See the License for the specific language governing\n *  permissions and limitations under the License.\n */\n\nimport _ from 'lodash';\nimport { detach, types } from 'mobx-state-tree';\n\nimport { BaseStore } from '@aws-ee/base-ui/dist/models/BaseStore';\n\nimport { consolidateToMap, mapToArray } from '@aws-ee/base-ui/dist/helpers/utils';\nimport { getAllEnvTypeCandidatesNotImported } from '../../helpers/api';\nimport { EnvTypeCandidate } from './EnvTypeCandidate';\n\n// ==================================================================\n// EnvTypeCandidatesStore\n// ==================================================================\nconst EnvTypeCandidatesStore = BaseStore.named('EnvTypeCandidatesStore')\n  .props({\n    envTypeCandidates: types.optional(types.map(EnvTypeCandidate), {}),\n    tickPeriod: 60 * 1000, // 1 minute\n  })\n  .actions(self => {\n    // save the base implementation of cleanup\n    const superCleanup = self.cleanup;\n\n    return {\n      async doLoad() {\n        const envTypeCandidates = (await getAllEnvTypeCandidatesNotImported()) || [];\n        self.runInAction(() => {\n          consolidateToMap(self.envTypeCandidates, envTypeCandidates, (exiting, newItem) => {\n            exiting.setEnvTypeCandidate(newItem);\n          });\n        });\n      },\n\n      cleanup: () => {\n        self.envTypeCandidates.clear();\n        superCleanup();\n      },\n\n      async onEnvTypeCandidateImport(id) {\n        // Addition or deletion of env type impacts env type candidates store\n        // because imported env types are no longer candidates for import\n        // reload env type candidates store as well\n        const envTypeCandidateImported = self.envTypeCandidates.get(id);\n\n        // The self.envTypeCandidatesStore.load() will result in envTypeCandidateImported being deleted from the map (i.e., deleted from the tree)\n        // at this point if we are on any view that is referencing envTypeCandidateImported we will get\n        // \"You are trying to read or write to an object that is no longer part of a state tree\" mobx-state-tree error\n        // to avoid this, detach the node first\n        detach(envTypeCandidateImported);\n\n        await self.load();\n      },\n    };\n  })\n  .views(self => ({\n    get list() {\n      return _.sortBy(mapToArray(self.envTypeCandidates), c => -1 * _.get(c, 'provisioningArtifact.createdTime'));\n      // return [];\n    },\n    get listLatestVersions() {\n      return _.filter(self.list, 'isLatest');\n    },\n    get listAllVersions() {\n      return self.list;\n    },\n    get empty() {\n      return _.isEmpty(self.list);\n    },\n    getEnvTypeCandidate(id) {\n      return self.envTypeCandidates.get(id);\n    },\n  }));\nfunction registerContextItems(appContext) {\n  appContext.envTypeCandidatesStore = EnvTypeCandidatesStore.create({}, appContext);\n}\n\nexport { EnvTypeCandidatesStore, registerContextItems };\n"],"file":"EnvTypeCandidatesStore.js"}