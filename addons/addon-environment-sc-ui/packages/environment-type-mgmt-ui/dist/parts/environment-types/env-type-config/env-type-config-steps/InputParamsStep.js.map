{"version":3,"sources":["../../../../../src/parts/environment-types/env-type-config/env-type-config-steps/InputParamsStep.js"],"names":["InputParamsStep","props","handleCfnParamsFormSubmit","cfnParamsForm","cfnParams","each","field","push","key","value","paramsField","form","$","JSON","stringify","onSubmit","_","get","envType","existingParamValues","envTypeConfig","keyPrefix","wizardTempStoreKeyPrefix","sessionStore","set","onCancel","processing","renderFormFields","renderActionButtons","configVarOptions","envTypeConfigVars","envTypeConfigsStore","forEach","v","name","text","content","desc","fields","map","options","uniqBy","BaseEnvTypeConfigStep","action"],"mappings":"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","sourcesContent":["/*\n *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\").\n *  You may not use this file except in compliance with the License.\n *  A copy of the License is located at\n *\n *  http://aws.amazon.com/apache2.0\n *\n *  or in the \"license\" file accompanying this file. This file is distributed\n *  on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n *  express or implied. See the License for the specific language governing\n *  permissions and limitations under the License.\n */\n\nimport _ from 'lodash';\nimport React from 'react';\nimport { observer } from 'mobx-react';\nimport { action, decorate, runInAction } from 'mobx';\nimport { Header, Segment } from 'semantic-ui-react';\n\nimport Form from '@aws-ee/base-ui/dist/parts/helpers/fields/Form';\nimport DropDown from '@aws-ee/base-ui/dist/parts/helpers/fields/DropDown';\n\nimport { sessionStore } from '@aws-ee/base-ui/dist/models/SessionStore';\nimport { getCfnParamsForm } from '../../../../models/forms/CfnParamsForm';\nimport BaseEnvTypeConfigStep from './BaseEnvTypeConfigStep';\n\nclass InputParamsStep extends BaseEnvTypeConfigStep {\n  constructor(props) {\n    super(props);\n    runInAction(() => {\n      const cfnParams = _.get(props.envType, 'params');\n      const existingParamValues = _.get(props.envTypeConfig, 'params');\n\n      const keyPrefix = this.props.wizardTempStoreKeyPrefix;\n      const key = `${keyPrefix}-InputParamsStep`;\n      let cfnParamsForm = sessionStore.get(key);\n      if (!cfnParamsForm) {\n        // Create and save the cfn params form outside of the component (in session store)\n        // to make sure the form values are not wiped out on unmount\n        // without this if the user clicks next and then previous all entered values will be wiped\n        cfnParamsForm = getCfnParamsForm(cfnParams, existingParamValues);\n        sessionStore.set(key, cfnParamsForm);\n      }\n\n      this.cfnParamsForm = cfnParamsForm;\n    });\n  }\n\n  render() {\n    // The cfnParamsForm below is different from \"this.form\".\n    // cfnParamsForm is specifically for the CloudFormation params and the \"this.form\" is for the EnvTypeConfig.\n    // When the inner form \"cfnParamsForm\" is submitted, the values from \"cfnParamsForm\" are read and the field named \"params\" of\n    // the outer EnvTypeConfig form (i.e., \"this.form\") is set as JSON string\n    // See \"handleCfnParamsFormSubmit\" method for details\n    const cfnParamsForm = this.cfnParamsForm;\n    return (\n      <Segment clearing className=\"mt3 p3\">\n        <Form form={cfnParamsForm} onCancel={this.props.onCancel} onSuccess={this.handleCfnParamsFormSubmit}>\n          {({ processing, onCancel }) => (\n            <>\n              {this.renderFormFields({ form: cfnParamsForm, processing, onCancel })}\n              {this.renderActionButtons({ processing, onCancel })}\n            </>\n          )}\n        </Form>\n      </Segment>\n    );\n  }\n\n  handleCfnParamsFormSubmit = cfnParamsForm => {\n    const cfnParams = [];\n    cfnParamsForm.each(field => cfnParams.push({ key: field.key, value: field.value }));\n\n    // Set the params field on the form passed in via props\n    const paramsField = this.form.$('params');\n    paramsField.value = JSON.stringify(cfnParams);\n\n    this.props.onSubmit(this.form);\n  };\n\n  renderFormFields({ form, processing }) {\n    const configVarOptions = [];\n    const envTypeConfigVars = this.props.envTypeConfigsStore.envTypeConfigVars;\n    envTypeConfigVars.forEach(v => {\n      configVarOptions.push({\n        key: v.name,\n        value: `$\\{${v.name}}`,\n        text: `$\\{${v.name}}`,\n        content: <Header as=\"h5\" content={v.name} subheader={v.desc} />,\n      });\n    });\n\n    const fields = [];\n    form.each(field => fields.push(field));\n    return _.map(fields, field => {\n      // if custom literal value was entered instead of selecting from available config vars then field's value may not\n      // be in the available options so adding an option for field.value (without this custom drop down values will not\n      // pre-populate when editing or when navigating to the step again with \"previous\")\n      const options = _.uniqBy(\n        [{ key: field.key, value: field.value, text: field.value }, ...configVarOptions],\n        'value',\n      );\n      return (\n        <DropDown\n          key={field.key}\n          field={field}\n          options={options}\n          disabled={processing}\n          search\n          selection\n          fluid\n          allowAdditions\n          clearable\n        />\n      );\n    });\n  }\n}\n\ndecorate(InputParamsStep, {\n  handleCfnParamsFormSubmit: action,\n});\nexport default observer(InputParamsStep);\n"],"file":"InputParamsStep.js"}