{"version":3,"sources":["../../../../src/parts/environment-types/env-type-config/EnvTypeConfigEditor.js"],"names":["steps","key","title","desc","isComplete","stepComponent","BasicInfoStep","AccessControlStep","InputParamsStep","TagsStep","wizardTempStoreKeyPrefix","clearState","sessionStore","removeStartsWith","EnvTypeConfigEditor","props","renderTitle","envTypConfig","envTypeConfig","isUpdating","isEditAction","name","renderContent","renderStepTabs","renderStepProgress","renderCurrentStep","stepPanes","_","map","wizardModel","step","menuItem","render","renderEnvTypeConfigStep","secondary","pointing","stepAttribs","completed","active","isStepActive","currentStep","handlePreviousClick","previous","handleFormSubmission","form","existingEnvTypeConfig","values","id","estimatedCostInfo","allowRoleIds","denyRoleIds","paramsJsonStr","params","tagsJsonStr","tags","existingParams","existingTags","isEmpty","JSON","parse","updatedTags","fromNameValueToKeyValue","nameValue","value","hasNext","next","envTypeConfigsStore","updateEnvTypeConfig","savedEnvTypeConfig","createEnvTypeConfig","onEnvTypeConfigSaveComplete","undefined","stores","Stores","userRolesStore","s","omit","load","content","hasError","error","stepKey","find","StepComponentClass","get","onCancel","envType","getAction","action","React","Component","computed","observable"],"mappings":";;;;;;;;;AAeA;;AACA;;AACA;;AACA;;AACA;;AAEA;;AACA;;AACA;;AACA;;AACA;;AAEA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,IAAMA,KAAK,GAAG,CACZ;AACEC,EAAAA,GAAG,EAAE,mBADP;AAEEC,EAAAA,KAAK,EAAE,mBAFT;AAGEC,EAAAA,IAAI,EAAE,yBAHR;AAIEC,EAAAA,UAAU,EAAE,KAJd;AAKEC,EAAAA,aAAa,EAAEC;AALjB,CADY,EAQZ;AACEL,EAAAA,GAAG,EAAE,gBADP;AAEEC,EAAAA,KAAK,EAAE,gBAFT;AAGEC,EAAAA,IAAI,EAAE,uBAHR;AAIEC,EAAAA,UAAU,EAAE,KAJd;AAKEC,EAAAA,aAAa,EAAEE;AALjB,CARY,EAeZ;AACEN,EAAAA,GAAG,EAAE,cADP;AAEEC,EAAAA,KAAK,EAAE,kBAFT;AAGEC,EAAAA,IAAI,EAAE,mCAHR;AAIEC,EAAAA,UAAU,EAAE,KAJd;AAKEC,EAAAA,aAAa,EAAEG;AALjB,CAfY,EAsBZ;AACEP,EAAAA,GAAG,EAAE,MADP;AAEEC,EAAAA,KAAK,EAAE,MAFT;AAGEC,EAAAA,IAAI,EAAE,uBAHR;AAIEC,EAAAA,UAAU,EAAE,KAJd;AAKEC,EAAAA,aAAa,EAAEI;AALjB,CAtBY,CAAd;AA8BA,IAAMC,wBAAwB,GAAG,+BAAjC;;AAEA,SAASC,UAAT,GAAsB;AACpBC,6BAAaC,gBAAb,CAA8BH,wBAA9B;AACD;;IAEKI,mB;;;;;AACJ,+BAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,8BAAMA,KAAN;;AADiB,UAkCnBC,WAlCmB,GAkCL,YAAM;AAClB,UAAMC,YAAY,GAAG,MAAKC,aAA1B;;AACA,UAAMC,UAAU,GAAG,MAAKC,YAAL,EAAnB;;AACA,0BACE;AAAK,QAAA,SAAS,EAAC;AAAf,sBACE,gCAAC,uBAAD;AAAQ,QAAA,EAAE,EAAC,IAAX;AAAgB,QAAA,SAAS,EAAC;AAA1B,sBACE,gCAAC,qBAAD;AAAM,QAAA,IAAI,EAAC,UAAX;AAAsB,QAAA,SAAS,EAAC;AAAhC,QADF,eAEE,gCAAC,uBAAD,CAAQ,OAAR;AAAgB,QAAA,SAAS,EAAC;AAA1B,SAAwCD,UAAU,GAAG,MAAH,GAAY,KAA9D,mBAFF,EAGGA,UAAU,iBAAI,gCAAC,uBAAD,CAAQ,SAAR;AAAkB,QAAA,SAAS,EAAC;AAA5B,SAAmCF,YAAY,CAACI,IAAhD,CAHjB,CADF,CADF;AASD,KA9CkB;;AAAA,UAgDnBC,aAhDmB,GAgDH,YAAM;AACpB,UAAMH,UAAU,GAAG,MAAKC,YAAL,EAAnB;;AACA;AAAA;AACE;AACA;AACA,0EACGD,UAAU,GACT,MAAKI,cAAL,EADS,gBAGT,kEACG,MAAKC,kBAAL,EADH,EAEG,MAAKC,iBAAL,EAFH,CAJJ;AAHF;AAcD,KAhEkB;;AAAA,UAkEnBF,cAlEmB,GAkEF,YAAM;AACrB,UAAMG,SAAS,GAAGC,mBAAEC,GAAF,CAAM,MAAKC,WAAL,CAAiB7B,KAAvB,EAA8B,UAAA8B,IAAI;AAAA,eAAK;AACvDC,UAAAA,QAAQ,EAAED,IAAI,CAAC5B,KADwC;AAEvD8B,UAAAA,MAAM,EAAE;AAAA,gCAAM,gCAAC,mBAAD,QAAW;AAAA,qBAAM,MAAKC,uBAAL,CAA6BH,IAAI,CAAC7B,GAAlC,CAAN;AAAA,aAAX,CAAN;AAAA;AAF+C,SAAL;AAAA,OAAlC,CAAlB;;AAIA,0BAAO,gCAAC,oBAAD;AAAK,QAAA,SAAS,EAAC,KAAf;AAAqB,QAAA,IAAI,EAAE;AAAEiC,UAAAA,SAAS,EAAE,IAAb;AAAmBC,UAAAA,QAAQ,EAAE;AAA7B,SAA3B;AAAgE,QAAA,gBAAgB,MAAhF;AAAiF,QAAA,KAAK,EAAET;AAAxF,QAAP;AACD,KAxEkB;;AAAA,UA0EnBF,kBA1EmB,GA0EE,YAAM;AACzB,0BACE,gCAAC,qBAAD,CAAM,KAAN;AAAY,QAAA,OAAO,MAAnB;AAAoB,QAAA,SAAS,EAAC;AAA9B,SACGG,mBAAEC,GAAF,CAAM,MAAKC,WAAL,CAAiB7B,KAAvB,EAA8B,UAAA8B,IAAI,EAAI;AACrC,YAAMM,WAAW,GAAG;AAClBnC,UAAAA,GAAG,EAAE6B,IAAI,CAAC7B,GADQ;AAElBoC,UAAAA,SAAS,EAAEP,IAAI,CAAC1B,UAFE;AAGlBkC,UAAAA,MAAM,EAAE,MAAKT,WAAL,CAAiBU,YAAjB,CAA8BT,IAAI,CAAC7B,GAAnC;AAHU,SAApB;AAKA,4BACE,gCAAC,qBAAD,EAAUmC,WAAV,eACE,gCAAC,qBAAD,CAAM,OAAN,qBACE,gCAAC,qBAAD,CAAM,KAAN,QAAaN,IAAI,CAAC5B,KAAlB,CADF,eAEE,gCAAC,qBAAD,CAAM,WAAN,QAAmB4B,IAAI,CAAC3B,IAAxB,CAFF,CADF,CADF;AAQD,OAdA,CADH,CADF;AAmBD,KA9FkB;;AAAA,UAgGnBsB,iBAhGmB,GAgGC,YAAM;AACxB,aAAO,MAAKQ,uBAAL,CAA6B,MAAKJ,WAAL,CAAiBW,WAAjB,CAA6BvC,GAA1D,CAAP;AACD,KAlGkB;;AAAA,UAiInBwC,mBAjImB,GAiIG,YAAM;AAC1B,YAAKZ,WAAL,CAAiBa,QAAjB;AACD,KAnIkB;;AAAA,UAqInBC,oBArImB;AAAA,yEAqII,iBAAMC,IAAN;AAAA;;AAAA;AAAA;AAAA;AAAA;AACfC,gBAAAA,qBADe,GACS,MAAK3B,aADd;AAEfC,gBAAAA,UAFe,GAEF,MAAKC,YAAL,EAFE;AAAA,+BAajBwB,IAAI,CAACE,MAAL,EAbiB,EAKnBC,EALmB,gBAKnBA,EALmB,EAMnB1B,IANmB,gBAMnBA,IANmB,EAOnBlB,IAPmB,gBAOnBA,IAPmB,EAQnB6C,iBARmB,gBAQnBA,iBARmB,EASnBC,YATmB,gBASnBA,YATmB,EAUnBC,WAVmB,gBAUnBA,WAVmB,EAWXC,aAXW,gBAWnBC,MAXmB,EAYbC,WAZa,gBAYnBC,IAZmB;;AAiBrB,oBAAInC,UAAJ,EAAgB;AACdoC,kBAAAA,cAAc,GAAGV,qBAAqB,CAACO,MAAvC;AACAI,kBAAAA,YAAY,GAAGX,qBAAqB,CAACS,IAArC;AACD,iBApBoB,CAsBrB;;;AACMF,gBAAAA,MAvBe,GAuBN,CAACzB,mBAAE8B,OAAF,CAAUN,aAAV,CAAD,GAA4BO,IAAI,CAACC,KAAL,CAAWR,aAAX,CAA5B,GAAwDI,cAvBlD,EAyBrB;;AACMK,gBAAAA,WA1Be,GA0BDF,IAAI,CAACC,KAAL,CAAWN,WAAW,IAAI,IAA1B,KAAmC,EA1BlC;;AA2BfQ,gBAAAA,uBA3Be,GA2BW,SAA1BA,uBAA0B,CAAAC,SAAS;AAAA,yBAAK;AAAE7D,oBAAAA,GAAG,EAAE6D,SAAS,CAAC7D,GAAV,IAAiB6D,SAAS,CAACzC,IAAlC;AAAwC0C,oBAAAA,KAAK,EAAED,SAAS,CAACC;AAAzD,mBAAL;AAAA,iBA3BpB;;AA4BfT,gBAAAA,IA5Be,GA4BR,CAAC3B,mBAAE8B,OAAF,CAAUJ,WAAV,CAAD,GAA0B1B,mBAAEC,GAAF,CAAMgC,WAAN,EAAmBC,uBAAnB,CAA1B,GAAwEL,YA5BhE;AA8BftC,gBAAAA,aA9Be,qBA+Bf2B,qBAAqB,IAAI,EA/BV;AAgCnBE,kBAAAA,EAAE,EAAFA,EAhCmB;AAiCnB1B,kBAAAA,IAAI,EAAJA,IAjCmB;AAkCnBlB,kBAAAA,IAAI,EAAJA,IAlCmB;AAmCnB6C,kBAAAA,iBAAiB,EAAjBA,iBAnCmB;AAoCnBC,kBAAAA,YAAY,EAAEA,YAAY,IAAI,EApCX;AAqCnBC,kBAAAA,WAAW,EAAEA,WAAW,IAAI,EArCT;AAsCnBE,kBAAAA,MAAM,EAANA,MAtCmB;AAuCnBE,kBAAAA,IAAI,EAAJA;AAvCmB;AAAA;;AAAA,sBA2Cf,CAACnC,UAAD,IAAe,MAAKU,WAAL,CAAiBmC,OA3CjB;AAAA;AAAA;AAAA;;AAAA,iDA+CV,MAAKnC,WAAL,CAAiBoC,IAAjB,EA/CU;;AAAA;AAAA,qBAmDf9C,UAnDe;AAAA;AAAA;AAAA;;AAAA;AAAA,uBAoDU,MAAK+C,mBAAL,CAAyBC,mBAAzB,CAA6CjD,aAA7C,CApDV;;AAAA;AAoDjBkD,gBAAAA,kBApDiB;AAqDjB,iFAAuClD,aAAa,CAACG,IAArD;AArDiB;AAAA;;AAAA;AAAA;AAAA,uBAuDU,MAAK6C,mBAAL,CAAyBG,mBAAzB,CAA6CnD,aAA7C,CAvDV;;AAAA;AAuDjBkD,gBAAAA,kBAvDiB;;AAAA;AAyDnBzD,gBAAAA,UAAU;;AAEV,sBAAKI,KAAL,CAAWuD,2BAAX,CAAuCF,kBAAvC;;AA3DmB,iDA4DZA,kBA5DY;;AAAA;AAAA;AAAA;AA8DnB;;AA9DmB;AAAA,iDAgEdG,SAhEc;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OArIJ;;AAAA;AAAA;AAAA;AAAA;;AAEjB,2BAAY,YAAM;AAChB,YAAKC,MAAL,GAAc,IAAIC,kBAAJ,CAAW,CAAC,MAAKP,mBAAN,EAA2B,MAAKQ,cAAhC,CAAX,CAAd;AACA,YAAK9B,IAAL,GAAY,6CAAqB7B,KAAK,CAACG,aAA3B,CAAZ;AACA,YAAKW,WAAL,GAAmB,0BAAaF,mBAAEC,GAAF,CAAM5B,KAAN,EAAa,UAAA2E,CAAC;AAAA,eAAIhD,mBAAEiD,IAAF,CAAOD,CAAP,EAAU,eAAV,CAAJ;AAAA,OAAd,CAAb,CAAnB;AACD,KAJD;AAFiB;AAOlB;;;;wCAEmB;AAClB,+BAAa,KAAKH,MAAL,CAAYK,IAAZ,EAAb;AACD;;;6BAEQ;AACP,UAAML,MAAM,GAAG,KAAKA,MAApB;AACA,UAAIM,OAAO,GAAG,IAAd;;AACA,UAAIN,MAAM,CAACO,QAAX,EAAqB;AACnBD,QAAAA,OAAO,gBAAG,gCAAC,oBAAD;AAAU,UAAA,KAAK,EAAEN,MAAM,CAACQ,KAAxB;AAA+B,UAAA,SAAS,EAAC;AAAzC,UAAV;AACD,OAFD,MAEO,IAAI,+BAAeR,MAAf,CAAJ,EAA4B;AACjCM,QAAAA,OAAO,gBAAG,gCAAC,oCAAD,OAAV;AACD,OAFM,MAEA,IAAI,6BAAaN,MAAb,CAAJ,EAA0B;AAC/BM,QAAAA,OAAO,GAAG,KAAKxD,aAAL,EAAV;AACD,OAFM,MAEA;AACLwD,QAAAA,OAAO,GAAG,IAAV;AACD;;AAED,0BACE;AAAK,QAAA,SAAS,EAAC;AAAf,SACG,KAAK9D,WAAL,EADH,EAEG8D,OAFH,CADF;AAMD;;;4CAoEuBG,O,EAAS;AAAA;;AAC/B,UAAMnD,IAAI,GAAGH,mBAAEuD,IAAF,CAAOlF,KAAP,EAAc;AAAEC,QAAAA,GAAG,EAAEgF;AAAP,OAAd,CAAb;;AACA,UAAME,kBAAkB,GAAGxD,mBAAEyD,GAAF,CAAMtD,IAAN,EAAY,eAAZ,CAA3B;;AACA,0BACE,gCAAC,kBAAD;AACE,QAAA,IAAI,EAAE,KAAKc,IADb;AAEE,QAAA,WAAW,EAAE,KAAKf,WAFpB;AAGE,QAAA,QAAQ,EAAE,oBAAM;AACdlB,UAAAA,UAAU;;AACV,UAAA,MAAI,CAACI,KAAL,CAAWsE,QAAX;AACD,SANH;AAOE,QAAA,QAAQ,EAAE,KAAK1C,oBAPjB;AAQE,QAAA,aAAa,EAAE,KAAKzB,aARtB;AASE,QAAA,OAAO,EAAE,KAAKoE,OAThB;AAUE,QAAA,mBAAmB,EAAE,KAAKpB,mBAV5B;AAWE,QAAA,UAAU,EAAE,KAAKzB,mBAXnB,CAYE;AACA;AACA;AACA;AACA;AACA;AACA;AAlBF;AAmBE,QAAA,wBAAwB,EAAE/B,wBAnB5B;AAoBE,QAAA,MAAM,EAAE,KAAK6E,SAAL;AApBV,QADF;AAwBD;;;mCAyFc;AACb,aAAO,KAAKA,SAAL,OAAqB,MAA5B;AACD;;;gCAEW;AACV,aAAO,KAAKxE,KAAL,CAAWyE,MAAlB;AACD;;;wBAtByB;AACxB,aAAO,KAAKzE,KAAL,CAAWmD,mBAAlB;AACD;;;wBAEoB;AACnB,aAAO,KAAKnD,KAAL,CAAW2D,cAAlB;AACD;;;wBAEa;AACZ,aAAO,KAAK3D,KAAL,CAAWuE,OAAlB;AACD;;;wBAEmB;AAClB,aAAO,KAAKvE,KAAL,CAAWG,aAAlB;AACD;;;;EAvN+BuE,kBAAMC,S;;AAkOxC,oBAAS5E,mBAAT,EAA8B;AAC5B4D,EAAAA,cAAc,EAAEiB,cADY;AAE5BzB,EAAAA,mBAAmB,EAAEyB,cAFO;AAG5BzE,EAAAA,aAAa,EAAEyE,cAHa;AAI5BL,EAAAA,OAAO,EAAEK,cAJmB;AAM5BhD,EAAAA,oBAAoB,EAAE6C,YANM;AAQ5BhB,EAAAA,MAAM,EAAEoB;AARoB,CAA9B;;eAUe,uBAAO,gBAAP,EAAyB,yBAAS9E,mBAAT,CAAzB,C","sourcesContent":["/*\n *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\").\n *  You may not use this file except in compliance with the License.\n *  A copy of the License is located at\n *\n *  http://aws.amazon.com/apache2.0\n *\n *  or in the \"license\" file accompanying this file. This file is distributed\n *  on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n *  express or implied. See the License for the specific language governing\n *  permissions and limitations under the License.\n */\n\nimport _ from 'lodash';\nimport React from 'react';\nimport { inject, Observer, observer } from 'mobx-react';\nimport { action, computed, decorate, observable, runInAction } from 'mobx';\nimport { Header, Icon, Step, Tab } from 'semantic-ui-react';\n\nimport Stores from '@aws-ee/base-ui/dist/models/Stores';\nimport { swallowError } from '@aws-ee/base-ui/dist/helpers/utils';\nimport ErrorBox from '@aws-ee/base-ui/dist/parts/helpers/ErrorBox';\nimport BasicProgressPlaceholder from '@aws-ee/base-ui/dist/parts/helpers/BasicProgressPlaceholder';\nimport { isStoreLoading, isStoreReady } from '@aws-ee/base-ui/dist/models/BaseStore';\n\nimport { createWizard } from '@aws-ee/base-ui/dist/models/Wizard';\nimport { displayError, displaySuccess } from '@aws-ee/base-ui/dist/helpers/notification';\nimport { sessionStore } from '@aws-ee/base-ui/dist/models/SessionStore';\nimport { getEnvTypeConfigForm } from '../../../models/forms/EnvTypeConfigForm';\nimport BasicInfoStep from './env-type-config-steps/BasicInfoStep';\nimport AccessControlStep from './env-type-config-steps/AccessControlStep';\nimport InputParamsStep from './env-type-config-steps/InputParamsStep';\nimport TagsStep from './env-type-config-steps/TagsStep';\n\nconst steps = [\n  {\n    key: 'basic_information',\n    title: 'Basic Information',\n    desc: 'Enter basic information',\n    isComplete: false,\n    stepComponent: BasicInfoStep,\n  },\n  {\n    key: 'access_control',\n    title: 'Access Control',\n    desc: 'Define who can access',\n    isComplete: false,\n    stepComponent: AccessControlStep,\n  },\n  {\n    key: 'input_params',\n    title: 'Input Parameters',\n    desc: 'Provide AWS CloudFormation Inputs',\n    isComplete: false,\n    stepComponent: InputParamsStep,\n  },\n  {\n    key: 'tags',\n    title: 'Tags',\n    desc: 'Specify Resource Tags',\n    isComplete: false,\n    stepComponent: TagsStep,\n  },\n];\nconst wizardTempStoreKeyPrefix = 'EnvTypeConfigEditor-TempStore';\n\nfunction clearState() {\n  sessionStore.removeStartsWith(wizardTempStoreKeyPrefix);\n}\n\nclass EnvTypeConfigEditor extends React.Component {\n  constructor(props) {\n    super(props);\n    runInAction(() => {\n      this.stores = new Stores([this.envTypeConfigsStore, this.userRolesStore]);\n      this.form = getEnvTypeConfigForm(props.envTypeConfig);\n      this.wizardModel = createWizard(_.map(steps, s => _.omit(s, 'stepComponent')));\n    });\n  }\n\n  componentDidMount() {\n    swallowError(this.stores.load());\n  }\n\n  render() {\n    const stores = this.stores;\n    let content = null;\n    if (stores.hasError) {\n      content = <ErrorBox error={stores.error} className=\"p0 mb3\" />;\n    } else if (isStoreLoading(stores)) {\n      content = <BasicProgressPlaceholder />;\n    } else if (isStoreReady(stores)) {\n      content = this.renderContent();\n    } else {\n      content = null;\n    }\n\n    return (\n      <div className=\"ml3 mt3 mr3 mb4\">\n        {this.renderTitle()}\n        {content}\n      </div>\n    );\n  }\n\n  renderTitle = () => {\n    const envTypConfig = this.envTypeConfig;\n    const isUpdating = this.isEditAction();\n    return (\n      <div className=\"mb3\">\n        <Header as=\"h3\" className=\"color-grey mt1 mb0\">\n          <Icon name=\"settings\" className=\"align-top\" />\n          <Header.Content className=\"left-align\">{isUpdating ? 'Edit' : 'Add'} Configuration</Header.Content>\n          {isUpdating && <Header.Subheader className=\"mt2\">{envTypConfig.name}</Header.Subheader>}\n        </Header>\n      </div>\n    );\n  };\n\n  renderContent = () => {\n    const isUpdating = this.isEditAction();\n    return (\n      // Render as tabs when updating configuration,\n      // Render as wizard when adding configuration\n      <>\n        {isUpdating ? (\n          this.renderStepTabs()\n        ) : (\n          <>\n            {this.renderStepProgress()}\n            {this.renderCurrentStep()}\n          </>\n        )}\n      </>\n    );\n  };\n\n  renderStepTabs = () => {\n    const stepPanes = _.map(this.wizardModel.steps, step => ({\n      menuItem: step.title,\n      render: () => <Observer>{() => this.renderEnvTypeConfigStep(step.key)}</Observer>,\n    }));\n    return <Tab className=\"mt3\" menu={{ secondary: true, pointing: true }} renderActiveOnly panes={stepPanes} />;\n  };\n\n  renderStepProgress = () => {\n    return (\n      <Step.Group ordered className=\"container\">\n        {_.map(this.wizardModel.steps, step => {\n          const stepAttribs = {\n            key: step.key,\n            completed: step.isComplete,\n            active: this.wizardModel.isStepActive(step.key),\n          };\n          return (\n            <Step {...stepAttribs}>\n              <Step.Content>\n                <Step.Title>{step.title}</Step.Title>\n                <Step.Description>{step.desc}</Step.Description>\n              </Step.Content>\n            </Step>\n          );\n        })}\n      </Step.Group>\n    );\n  };\n\n  renderCurrentStep = () => {\n    return this.renderEnvTypeConfigStep(this.wizardModel.currentStep.key);\n  };\n\n  renderEnvTypeConfigStep(stepKey) {\n    const step = _.find(steps, { key: stepKey });\n    const StepComponentClass = _.get(step, 'stepComponent');\n    return (\n      <StepComponentClass\n        form={this.form}\n        wizardModel={this.wizardModel}\n        onCancel={() => {\n          clearState();\n          this.props.onCancel();\n        }}\n        onSubmit={this.handleFormSubmission}\n        envTypeConfig={this.envTypeConfig}\n        envType={this.envType}\n        envTypeConfigsStore={this.envTypeConfigsStore}\n        onPrevious={this.handlePreviousClick}\n        // steps can store temporary information in session store with the following key prefix\n        // see InputParamsStep as an example, it needs to create a different mobx form specifically for cfn params\n        // the values entered for that form will wipe out on next/previous click as the component gets unmounted/mounted\n        // to preserve those values outside of the step component the step component can save the info in session store\n        // with this key prefix\n        // This component (i.e., EnvTypeConfigEditor) will take care of clearing session keys with this prefix upon\n        // completion or cancel\n        wizardTempStoreKeyPrefix={wizardTempStoreKeyPrefix}\n        action={this.getAction()}\n      />\n    );\n  }\n\n  handlePreviousClick = () => {\n    this.wizardModel.previous();\n  };\n\n  handleFormSubmission = async form => {\n    const existingEnvTypeConfig = this.envTypeConfig;\n    const isUpdating = this.isEditAction();\n\n    const {\n      id,\n      name,\n      desc,\n      estimatedCostInfo,\n      allowRoleIds,\n      denyRoleIds,\n      params: paramsJsonStr,\n      tags: tagsJsonStr,\n    } = form.values();\n\n    let existingParams;\n    let existingTags;\n    if (isUpdating) {\n      existingParams = existingEnvTypeConfig.params;\n      existingTags = existingEnvTypeConfig.tags;\n    }\n\n    // The params and tags fields are submitted as JSON string via the form\n    const params = !_.isEmpty(paramsJsonStr) ? JSON.parse(paramsJsonStr) : existingParams;\n\n    // The updatedTags below has [{name,value}] form. Translate it to [{key,value}]\n    const updatedTags = JSON.parse(tagsJsonStr || '[]') || [];\n    const fromNameValueToKeyValue = nameValue => ({ key: nameValue.key || nameValue.name, value: nameValue.value });\n    const tags = !_.isEmpty(tagsJsonStr) ? _.map(updatedTags, fromNameValueToKeyValue) : existingTags;\n\n    const envTypeConfig = {\n      ...(existingEnvTypeConfig || {}),\n      id,\n      name,\n      desc,\n      estimatedCostInfo,\n      allowRoleIds: allowRoleIds || [],\n      denyRoleIds: denyRoleIds || [],\n      params,\n      tags,\n    };\n\n    try {\n      if (!isUpdating && this.wizardModel.hasNext) {\n        // When creating configuration, do not submit to server just yet,\n        // show next screen if there is one\n        // Will submit to server at the end\n        return this.wizardModel.next();\n      }\n\n      let savedEnvTypeConfig;\n      if (isUpdating) {\n        savedEnvTypeConfig = await this.envTypeConfigsStore.updateEnvTypeConfig(envTypeConfig);\n        displaySuccess(`Successfully updated ${envTypeConfig.name} configuration`);\n      } else {\n        savedEnvTypeConfig = await this.envTypeConfigsStore.createEnvTypeConfig(envTypeConfig);\n      }\n      clearState();\n\n      this.props.onEnvTypeConfigSaveComplete(savedEnvTypeConfig);\n      return savedEnvTypeConfig;\n    } catch (error) {\n      displayError(error);\n    }\n    return undefined;\n  };\n\n  get envTypeConfigsStore() {\n    return this.props.envTypeConfigsStore;\n  }\n\n  get userRolesStore() {\n    return this.props.userRolesStore;\n  }\n\n  get envType() {\n    return this.props.envType;\n  }\n\n  get envTypeConfig() {\n    return this.props.envTypeConfig;\n  }\n\n  isEditAction() {\n    return this.getAction() === 'edit';\n  }\n\n  getAction() {\n    return this.props.action;\n  }\n}\n\ndecorate(EnvTypeConfigEditor, {\n  userRolesStore: computed,\n  envTypeConfigsStore: computed,\n  envTypeConfig: computed,\n  envType: computed,\n\n  handleFormSubmission: action,\n\n  stores: observable,\n});\nexport default inject('userRolesStore')(observer(EnvTypeConfigEditor));\n"],"file":"EnvTypeConfigEditor.js"}