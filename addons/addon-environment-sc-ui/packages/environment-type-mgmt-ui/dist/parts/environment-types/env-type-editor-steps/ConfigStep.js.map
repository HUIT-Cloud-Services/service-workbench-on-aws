{"version":3,"sources":["../../../../src/parts/environment-types/env-type-editor-steps/ConfigStep.js"],"names":["ConfigStep","props","showEnvTypeConfigDialog","shouldShowEnvTypeConfigDialog","processing","hideEnvTypeConfigDialog","onNext","wizardModel","onEnvTypeSaveComplete","isImportAction","hasNext","next","_","isFunction","envTypeConfigsStore","load","store","content","error","renderEmpty","renderMain","renderConfigEditorDialog","onCancel","renderEnvTypeConfigs","renderActionButtons","envType","list","listAll","map","envTypeConfig","id","workspaceTypeAction","React","Component","computed","observable","action"],"mappings":"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","sourcesContent":["/*\n *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\").\n *  You may not use this file except in compliance with the License.\n *  A copy of the License is located at\n *\n *  http://aws.amazon.com/apache2.0\n *\n *  or in the \"license\" file accompanying this file. This file is distributed\n *  on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n *  express or implied. See the License for the specific language governing\n *  permissions and limitations under the License.\n */\n\nimport _ from 'lodash';\nimport React from 'react';\nimport { observer } from 'mobx-react';\nimport { Button, Card, Container, Header, Icon, Modal, Segment } from 'semantic-ui-react';\nimport { action, computed, decorate, observable, runInAction } from 'mobx';\nimport { withRouter } from 'react-router-dom';\n\nimport ErrorBox from '@aws-ee/base-ui/dist/parts/helpers/ErrorBox';\nimport {\n  isStoreEmpty,\n  isStoreError,\n  isStoreLoading,\n  isStoreNotEmpty,\n  isStoreReady,\n} from '@aws-ee/base-ui/dist/models/BaseStore';\nimport BasicProgressPlaceholder from '@aws-ee/base-ui/dist/parts/helpers/BasicProgressPlaceholder';\nimport { swallowError } from '@aws-ee/base-ui/dist/helpers/utils';\nimport EnvTypeConfigCard from '../env-type-config/EnvTypeConfigCard';\nimport EnvTypeConfigEditor from '../env-type-config/EnvTypeConfigEditor';\n\nclass ConfigStep extends React.Component {\n  constructor(props) {\n    super(props);\n    runInAction(() => {\n      this.processing = false;\n      this.shouldShowEnvTypeConfigDialog = false;\n    });\n  }\n\n  componentDidMount() {\n    swallowError(this.envTypeConfigsStore.load());\n  }\n\n  render() {\n    const store = this.envTypeConfigsStore;\n    let content;\n    if (isStoreError(store)) {\n      content = <ErrorBox error={store.error} className=\"p0 mb3\" />;\n    } else if (isStoreLoading(store)) {\n      content = <BasicProgressPlaceholder />;\n    } else if (isStoreReady(store) && isStoreEmpty(store)) {\n      content = this.renderEmpty();\n    } else if (isStoreReady(store) && isStoreNotEmpty(store)) {\n      content = this.renderMain();\n    } else {\n      content = null;\n    }\n\n    return <Container className=\"mt3 mb4\">{content}</Container>;\n  }\n\n  renderEmpty() {\n    return (\n      <>\n        {!this.shouldShowEnvTypeConfigDialog && (\n          <Segment placeholder>\n            <Header icon className=\"color-grey\">\n              <Icon name=\"settings\" />\n              No Configurations for this Workspace Type yet\n              <Header.Subheader className=\"mt2\">\n                <p>\n                  Configurations are predefined set of Input Parameter values for the AWS Service Catalog Product. The\n                  configurations are presented as preset options when launching workspaces of this type.\n                </p>\n                <Button basic color=\"blue\" onClick={this.showEnvTypeConfigDialog}>\n                  Add Configuration\n                </Button>\n              </Header.Subheader>\n            </Header>\n          </Segment>\n        )}\n        {this.shouldShowEnvTypeConfigDialog && this.renderConfigEditorDialog()}\n        <div className=\"right-align\">\n          <Button basic color=\"grey\" onClick={this.props.onCancel}>\n            Cancel\n          </Button>\n        </div>\n      </>\n    );\n  }\n\n  renderMain() {\n    return (\n      <>\n        <Segment basic>\n          {!this.shouldShowEnvTypeConfigDialog && (\n            <Button className=\"ml3\" basic color=\"blue\" floated=\"right\" onClick={this.showEnvTypeConfigDialog}>\n              Add Configuration\n            </Button>\n          )}\n          {this.renderEnvTypeConfigs()}\n          {this.shouldShowEnvTypeConfigDialog && this.renderConfigEditorDialog()}\n          {!this.shouldShowEnvTypeConfigDialog && this.renderActionButtons({ onCancel: this.props.onCancel })}\n        </Segment>\n      </>\n    );\n  }\n\n  renderConfigEditorDialog() {\n    // return (\n    //   <EnvTypeConfigEditor onCancel={this.hideEnvTypeConfigDialog} envTypeConfigsStore={this.envTypeConfigsStore} onEnvTypeConfigSaveComplete={this.hideEnvTypeConfigDialog}/>\n    // );\n    const shouldShowEnvTypeConfigDialog = this.shouldShowEnvTypeConfigDialog;\n    return (\n      <Modal\n        closeIcon\n        open={shouldShowEnvTypeConfigDialog}\n        onClose={this.hideEnvTypeConfigDialog}\n        closeOnDimmerClick={false}\n        closeOnEscape={false}\n        size=\"large\"\n      >\n        <EnvTypeConfigEditor\n          onCancel={this.hideEnvTypeConfigDialog}\n          envTypeConfigsStore={this.envTypeConfigsStore}\n          envType={this.props.envType}\n          onEnvTypeConfigSaveComplete={this.hideEnvTypeConfigDialog}\n          action=\"create\"\n        />\n      </Modal>\n    );\n  }\n\n  showEnvTypeConfigDialog = () => {\n    this.shouldShowEnvTypeConfigDialog = true;\n    this.processing = false;\n  };\n\n  hideEnvTypeConfigDialog = () => {\n    if (this.processing) return;\n    this.shouldShowEnvTypeConfigDialog = false;\n  };\n\n  renderEnvTypeConfigs() {\n    const list = this.envTypeConfigsStore.listAll;\n    return (\n      <Card.Group stackable itemsPerRow={3}>\n        {_.map(list, envTypeConfig => {\n          return (\n            <EnvTypeConfigCard\n              key={envTypeConfig.id}\n              envTypeConfig={envTypeConfig}\n              envType={this.props.envType}\n              envTypeConfigsStore={this.envTypeConfigsStore}\n            />\n          );\n        })}\n      </Card.Group>\n    );\n  }\n\n  renderActionButtons({ processing, onCancel }) {\n    return (\n      <div className=\"mt3\">\n        <div className=\"right-align\">\n          <Button basic color=\"grey\" onClick={onCancel}>\n            Cancel\n          </Button>\n          <Button className=\"ml2\" primary content=\"Done\" disabled={processing} onClick={this.onNext} />\n        </div>\n      </div>\n    );\n  }\n\n  isImportAction() {\n    return this.props.workspaceTypeAction === 'import';\n  }\n\n  onNext = async () => {\n    const wizardModel = this.props.wizardModel;\n    const onEnvTypeSaveComplete = this.props.onEnvTypeSaveComplete;\n    if (this.isImportAction() && wizardModel.hasNext) {\n      wizardModel.next();\n    } else if (_.isFunction(onEnvTypeSaveComplete)) {\n      await onEnvTypeSaveComplete();\n    }\n  };\n\n  get envTypeConfigsStore() {\n    return this.props.envTypeConfigsStore;\n  }\n}\ndecorate(ConfigStep, {\n  envTypeConfigsStore: computed,\n\n  processing: observable,\n  shouldShowEnvTypeConfigDialog: observable,\n\n  showEnvTypeConfigDialog: action,\n  hideEnvTypeConfigDialog: action,\n});\n\nexport default withRouter(observer(ConfigStep));\n"],"file":"ConfigStep.js"}