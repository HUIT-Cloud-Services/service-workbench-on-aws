{"version":3,"sources":["../../../src/parts/environment-types/EnvTypeCandidatesList.js"],"names":["EnvTypeCandidatesList","props","handleShowAllVersionsToggle","showAllVersions","handleImportButtonClick","id","goto","encodeURIComponent","envTypeCandidatesStore","load","store","content","error","renderEmpty","list","envTypeCandidatesList","_","isEmpty","renderMain","renderTitle","renderCount","showCount","length","awsServiceCatalogIcon","envMgmtRoleName","map","envTypeCandidate","name","get","__html","descHtml","listAllVersions","listLatestVersions","Component","computed","observable","action"],"mappings":"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","sourcesContent":["/*\n *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\").\n *  You may not use this file except in compliance with the License.\n *  A copy of the License is located at\n *\n *  http://aws.amazon.com/apache2.0\n *\n *  or in the \"license\" file accompanying this file. This file is distributed\n *  on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n *  express or implied. See the License for the specific language governing\n *  permissions and limitations under the License.\n */\n\nimport _ from 'lodash';\nimport React, { Component } from 'react';\nimport { action, computed, decorate, observable, runInAction } from 'mobx';\nimport { inject, observer } from 'mobx-react';\nimport { withRouter } from 'react-router-dom';\nimport { Container, Header, Card, Icon, Divider, Checkbox, Label, Segment, Button, Image } from 'semantic-ui-react';\n\nimport ErrorBox from '@aws-ee/base-ui/dist/parts/helpers/ErrorBox';\nimport BasicProgressPlaceholder from '@aws-ee/base-ui/dist/parts/helpers/BasicProgressPlaceholder';\nimport { swallowError } from '@aws-ee/base-ui/dist/helpers/utils';\nimport {\n  isStoreEmpty,\n  isStoreError,\n  isStoreLoading,\n  isStoreNotEmpty,\n  isStoreReady,\n} from '@aws-ee/base-ui/dist/models/BaseStore';\nimport { gotoFn } from '@aws-ee/base-ui/dist/helpers/routing';\nimport { envMgmtRoleName } from '../../helpers/settings';\nimport awsServiceCatalogIcon from '../../../images/AWS-Service-Catalog.svg';\n\n// expected props\n// - envTypeCandidatesStore (via injection)\nclass EnvTypeCandidatesList extends Component {\n  constructor(props) {\n    super(props);\n    runInAction(() => {\n      this.showAllVersions = false;\n    });\n  }\n\n  componentDidMount() {\n    swallowError(this.envTypeCandidatesStore.load());\n  }\n\n  get envTypeCandidatesStore() {\n    return this.props.envTypeCandidatesStore;\n  }\n\n  render() {\n    const store = this.envTypeCandidatesStore;\n    let content;\n    if (isStoreError(store)) {\n      content = <ErrorBox error={store.error} className=\"p0 mb3\" />;\n    } else if (isStoreLoading(store)) {\n      content = <BasicProgressPlaceholder />;\n    } else if (isStoreReady(store) && isStoreEmpty(store)) {\n      content = this.renderEmpty();\n    } else if (isStoreReady(store) && isStoreNotEmpty(store)) {\n      const list = this.envTypeCandidatesList;\n      if (_.isEmpty(list)) {\n        // The store may not be empty (there may be older versions of the AWS Service Catalog Product)\n        // but if the user selected to show only latest versions that are not imported yet then that list\n        // may be empty so checking for \"isEmpty\" here in addition to \"isStoreEmpty\"\n        // check above\n        content = this.renderEmpty();\n      } else {\n        content = this.renderMain();\n      }\n    } else {\n      content = null;\n    }\n\n    return (\n      <Container className=\"mt3 mb4\">\n        {this.renderTitle()}\n        {content}\n      </Container>\n    );\n  }\n\n  renderTitle() {\n    const renderCount = () => {\n      const store = this.envTypeCandidatesStore;\n      const showCount = isStoreReady(store) && isStoreNotEmpty(store);\n      return (\n        showCount && (\n          <Label circular size=\"medium\">\n            {this.envTypeCandidatesList.length}\n          </Label>\n        )\n      );\n    };\n    return (\n      <div className=\"mb3 flex\">\n        <Header as=\"h3\" className=\"color-grey mt1 mb0 flex-auto\">\n          {/* <Icon name=\"computer\" className=\"align-top\" /> */}\n          <Image src={awsServiceCatalogIcon} />\n          <Header.Content className=\"left-align\">\n            AWS Service Catalog Products\n            {renderCount()}\n          </Header.Content>\n          <Header.Subheader className=\"mt2\">\n            Available AWS Service Catalog Product Versions not imported yet\n          </Header.Subheader>\n        </Header>\n        <div>\n          <Checkbox\n            toggle\n            checked={this.showAllVersions}\n            onClick={() => this.handleShowAllVersionsToggle()}\n            label={this.showAllVersions ? 'All Versions' : 'Latest Versions'}\n          />\n        </div>\n      </div>\n    );\n  }\n\n  handleShowAllVersionsToggle = () => {\n    this.showAllVersions = !this.showAllVersions;\n  };\n\n  handleImportButtonClick = id => {\n    const goto = gotoFn(this);\n    goto(`/workspace-types-management/import/${encodeURIComponent(id)}`);\n  };\n\n  renderEmpty() {\n    return (\n      <Segment placeholder>\n        <Header icon className=\"color-grey\">\n          <Icon name=\"computer\" />\n          No AWS Service Catalog Product Versions available for importing\n          <Header.Subheader className=\"mt2\">\n            Please create AWS Service Catalog Product Version and share the Portfolio with the AWS IAM role{' '}\n            <strong>{envMgmtRoleName}</strong>.\n          </Header.Subheader>\n        </Header>\n      </Segment>\n    );\n  }\n\n  renderMain() {\n    const list = this.envTypeCandidatesList;\n    if (_.isEmpty(list)) {\n      // The store may not be empty (there may be older versions of the AWS Service Catalog Product)\n      // but if the user selected to show only latest versions that are not imported yet then that list\n      // may be empty so checking for \"isEmpty\" here in addition to isStoreEmpty check in the render method\n      return this.renderEmpty();\n    }\n    return (\n      <Card.Group stackable itemsPerRow={3}>\n        {_.map(list, envTypeCandidate => (\n          <Card key={`etc-${envTypeCandidate.id}`} raised className=\"mb3\">\n            <Card.Content>\n              <Header as=\"h4\">{envTypeCandidate.name}</Header>\n              <Card.Meta>{_.get(envTypeCandidate, 'provisioningArtifact.name')}</Card.Meta>\n              <Divider />\n              <Card.Description>\n                <div className=\"mb3 pr1 pl1 pb1\">\n                  {/* Yes, we are doing dangerouslySetInnerHTML, the content was already sanitized by showdownjs */}\n                  {/* eslint-disable-next-line react/no-danger */}\n                  <div dangerouslySetInnerHTML={{ __html: envTypeCandidate.descHtml }} />\n                </div>\n              </Card.Description>\n            </Card.Content>\n            <Card.Content extra>\n              <Button\n                basic\n                icon\n                color=\"blue\"\n                onClick={() => this.handleImportButtonClick(envTypeCandidate.id)}\n                labelPosition=\"right\"\n                floated=\"right\"\n                size=\"mini\"\n              >\n                Import\n                <Icon name=\"arrow down\" />\n              </Button>\n            </Card.Content>\n          </Card>\n        ))}\n      </Card.Group>\n    );\n  }\n\n  get envTypeCandidatesList() {\n    return this.showAllVersions\n      ? this.envTypeCandidatesStore.listAllVersions\n      : this.envTypeCandidatesStore.listLatestVersions;\n  }\n}\n\ndecorate(EnvTypeCandidatesList, {\n  envTypeCandidatesList: computed,\n  envTypeCandidatesStore: computed,\n\n  showAllVersions: observable,\n\n  handleShowAllVersionsToggle: action,\n  handleImportButtonClick: action,\n});\n\nexport default inject('envTypeCandidatesStore')(withRouter(observer(EnvTypeCandidatesList)));\n"],"file":"EnvTypeCandidatesList.js"}