{"version":3,"sources":["../../../src/parts/environment-types/EnvTypesList.js"],"names":["EnvTypesList","props","handleStatusFilterChange","e","value","statusFilter","envTypesStore","load","store","content","error","renderEmpty","list","envTypesList","_","isEmpty","renderMain","renderTitle","renderCount","showCount","length","EnvTypeStatusEnum","isApproved","approved","isNotApproved","notApproved","getEmptyMessage","msg","envMgmtRoleName","map","envType","id","listApproved","listNotApproved","React","Component","computed","observable","action"],"mappings":"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","sourcesContent":["/*\n *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\").\n *  You may not use this file except in compliance with the License.\n *  A copy of the License is located at\n *\n *  http://aws.amazon.com/apache2.0\n *\n *  or in the \"license\" file accompanying this file. This file is distributed\n *  on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n *  express or implied. See the License for the specific language governing\n *  permissions and limitations under the License.\n */\n\nimport _ from 'lodash';\nimport React from 'react';\nimport { action, computed, decorate, observable, runInAction } from 'mobx';\nimport { inject, observer } from 'mobx-react';\nimport { withRouter } from 'react-router-dom';\nimport { Container, Header, Card, Icon, Label, Segment, Radio } from 'semantic-ui-react';\n\nimport ErrorBox from '@aws-ee/base-ui/dist/parts/helpers/ErrorBox';\nimport BasicProgressPlaceholder from '@aws-ee/base-ui/dist/parts/helpers/BasicProgressPlaceholder';\nimport { swallowError } from '@aws-ee/base-ui/dist/helpers/utils';\nimport {\n  isStoreEmpty,\n  isStoreError,\n  isStoreLoading,\n  isStoreNotEmpty,\n  isStoreReady,\n} from '@aws-ee/base-ui/dist/models/BaseStore';\nimport { envMgmtRoleName } from '../../helpers/settings';\nimport * as EnvTypeStatusEnum from '../../models/environment-types/EnvTypeStatusEnum';\nimport EnvTypeCard from './EnvTypeCard';\n\n// expected props\n// - envTypesStore (via injection)\nclass EnvTypesList extends React.Component {\n  constructor(props) {\n    super(props);\n    runInAction(() => {\n      this.statusFilter = '*';\n    });\n  }\n\n  componentDidMount() {\n    swallowError(this.envTypesStore.load());\n  }\n\n  get envTypesStore() {\n    return this.props.envTypesStore;\n  }\n\n  render() {\n    const store = this.envTypesStore;\n    let content;\n    if (isStoreError(store)) {\n      content = <ErrorBox error={store.error} className=\"p0 mb3\" />;\n    } else if (isStoreLoading(store)) {\n      content = <BasicProgressPlaceholder />;\n    } else if (isStoreReady(store) && isStoreEmpty(store)) {\n      content = this.renderEmpty();\n    } else if (isStoreReady(store) && isStoreNotEmpty(store)) {\n      const list = this.envTypesList;\n      if (_.isEmpty(list)) {\n        // The store may not be empty (there may be env types) but if the user selected to show only approved or\n        // not-approved versions then that list may be empty so checking for \"isEmpty\" here in addition to \"isStoreEmpty\"\n        // check above\n        content = this.renderEmpty();\n      } else {\n        content = this.renderMain();\n      }\n    } else {\n      content = null;\n    }\n\n    return (\n      <Container className=\"mt3 mb4\">\n        {this.renderTitle()}\n        {content}\n      </Container>\n    );\n  }\n\n  renderTitle() {\n    const renderCount = () => {\n      const store = this.envTypesStore;\n      const showCount = isStoreReady(store) && isStoreNotEmpty(store);\n      return (\n        showCount && (\n          <Label circular size=\"medium\">\n            {this.envTypesList.length}\n          </Label>\n        )\n      );\n    };\n    return (\n      <div className=\"mb3 flex\">\n        <Header as=\"h3\" className=\"color-grey mt1 mb0 flex-auto\">\n          <Icon name=\"computer\" className=\"align-top\" />\n          <Header.Content className=\"left-align\">\n            Workspace Types\n            {renderCount()}\n          </Header.Content>\n          <Header.Subheader className=\"mt2\">\n            AWS Service Catalog Product Versions imported as Environment Types\n          </Header.Subheader>\n        </Header>\n        <div>\n          <Radio\n            label=\"Approved\"\n            name=\"statusFilter\"\n            checked={EnvTypeStatusEnum.isApproved(this.statusFilter)}\n            value={EnvTypeStatusEnum.approved}\n            onChange={this.handleStatusFilterChange}\n            className=\"mr2\"\n          />\n          <Radio\n            label=\"Not Approved\"\n            name=\"statusFilter\"\n            checked={EnvTypeStatusEnum.isNotApproved(this.statusFilter)}\n            value={EnvTypeStatusEnum.notApproved}\n            onChange={this.handleStatusFilterChange}\n            className=\"mr2\"\n          />\n          <Radio\n            label=\"All\"\n            name=\"statusFilter\"\n            checked={this.statusFilter === '*'}\n            value=\"*\"\n            onChange={this.handleStatusFilterChange}\n            className=\"mr2\"\n          />\n        </div>\n      </div>\n    );\n  }\n\n  handleStatusFilterChange = (e, { value }) => {\n    this.statusFilter = value;\n  };\n\n  renderEmpty() {\n    const getEmptyMessage = () => {\n      let msg;\n      if (EnvTypeStatusEnum.isApproved(this.statusFilter)) {\n        msg = <>No approved Environment Types found</>;\n      } else if (EnvTypeStatusEnum.isNotApproved(this.statusFilter)) {\n        msg = <>No Environments Types found that require approval</>;\n      } else {\n        msg = (\n          <>\n            No AWS Service Catalog Product Versions imported yet\n            <Header.Subheader className=\"mt2\">\n              Start by importing an AWS Service Catalog Product Version as Environment Type. AWS Service Catalog\n              Products that are part of AWS Service Catalog Portfolio shared with AWS IAM role{' '}\n              <strong>{envMgmtRoleName}</strong> are eligible for importing.\n            </Header.Subheader>\n          </>\n        );\n      }\n      return msg;\n    };\n    return (\n      <Segment placeholder>\n        <Header icon className=\"color-grey\">\n          <Icon name=\"computer\" />\n          {getEmptyMessage()}\n        </Header>\n      </Segment>\n    );\n  }\n\n  renderMain() {\n    const list = this.envTypesList;\n    return (\n      <Card.Group stackable itemsPerRow={3}>\n        {_.map(list, envType => {\n          return <EnvTypeCard key={envType.id} envType={envType} envTypesStore={this.envTypesStore} />;\n        })}\n      </Card.Group>\n    );\n  }\n\n  get envTypesList() {\n    let list = [];\n    if (EnvTypeStatusEnum.isApproved(this.statusFilter)) {\n      list = this.envTypesStore.listApproved;\n    } else if (EnvTypeStatusEnum.isNotApproved(this.statusFilter)) {\n      list = this.envTypesStore.listNotApproved;\n    } else {\n      list = this.envTypesStore.list;\n    }\n    return list;\n  }\n}\n\ndecorate(EnvTypesList, {\n  envTypesList: computed,\n  envTypesStore: computed,\n\n  statusFilter: observable,\n\n  handleStatusFilterChange: action,\n});\n\nexport default inject('envTypesStore')(withRouter(observer(EnvTypesList)));\n"],"file":"EnvTypesList.js"}