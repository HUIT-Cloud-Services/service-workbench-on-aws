{"version":3,"sources":["../../../src/models/key-pairs/KeyPairsStore.js"],"names":["_","values","types","consolidateToMap","BaseStore","createKeyPair","getKeyPairs","deleteKeyPair","KeyPair","KeyPairsStore","named","props","keyPairs","optional","map","tickPeriod","actions","self","superCleanup","cleanup","doLoad","runInAction","exiting","newItem","setKeyPair","addKeyPair","raw","id","previous","get","put","createKetPair","keyPair","result","getKeyPair","delete","clear","views","empty","size","total","list","orderBy","listActive","filter","item","status","registerContextItems","appContext","keyPairsStore","create"],"mappings":"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","sourcesContent":["import _ from 'lodash';\nimport { values } from 'mobx';\nimport { types } from 'mobx-state-tree';\nimport { consolidateToMap } from '@aws-ee/base-ui/dist/helpers/utils';\nimport { BaseStore } from '@aws-ee/base-ui/dist/models/BaseStore';\n\nimport { createKeyPair, getKeyPairs, deleteKeyPair } from '../../helpers/api';\nimport { KeyPair } from './KeyPair';\n\n// ==================================================================\n// KeyPairsStore\n// ==================================================================\nconst KeyPairsStore = BaseStore.named('KeyPairsStore')\n  .props({\n    keyPairs: types.optional(types.map(KeyPair), {}),\n    tickPeriod: 30 * 1000, // 30 seconds\n  })\n\n  .actions(self => {\n    // save the base implementation of cleanup\n    const superCleanup = self.cleanup;\n\n    return {\n      async doLoad() {\n        const keyPairs = await getKeyPairs();\n        self.runInAction(() => {\n          consolidateToMap(self.keyPairs, keyPairs, (exiting, newItem) => {\n            exiting.setKeyPair(newItem);\n          });\n        });\n      },\n\n      addKeyPair(raw) {\n        const id = raw.id;\n        const previous = self.keyPairs.get(id);\n\n        if (!previous) {\n          self.keyPairs.put(raw);\n        } else {\n          previous.setKeyPair(raw);\n        }\n      },\n\n      async createKetPair(keyPair) {\n        // keyPair = { name, desc }\n\n        const result = await createKeyPair(keyPair);\n        self.addKeyPair(result);\n        return self.getKeyPair(result.id);\n      },\n\n      async deleteKeyPair(id) {\n        await deleteKeyPair(id);\n        self.runInAction(() => {\n          self.keyPairs.delete(id);\n        });\n      },\n\n      cleanup: () => {\n        self.keyPairs.clear();\n        superCleanup();\n      },\n    };\n  })\n\n  .views(self => ({\n    get empty() {\n      return self.keyPairs.size === 0;\n    },\n\n    get total() {\n      return self.keyPairs.size;\n    },\n\n    get list() {\n      return _.orderBy(values(self.keyPairs), ['createdAt', 'name'], ['desc', 'asc']);\n    },\n\n    get listActive() {\n      return _.filter(self.list, item => item.status === 'active');\n    },\n\n    getKeyPair(id) {\n      return self.keyPairs.get(id);\n    },\n  }));\n\nfunction registerContextItems(appContext) {\n  appContext.keyPairsStore = KeyPairsStore.create({}, appContext);\n}\n\nexport { KeyPairsStore, registerContextItems };\n"],"file":"KeyPairsStore.js"}