/* babel-plugin-inline-import '../templates/ec2-rstudio-instance.cfn.yml' */

/*
 *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License").
 *  You may not use this file except in compliance with the License.
 *  A copy of the License is located at
 *
 *  http://aws.amazon.com/apache2.0
 *
 *  or in the "license" file accompanying this file. This file is distributed
 *  on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 *  express or implied. See the License for the specific language governing
 *  permissions and limitations under the License.
 */
// We are using Babel in this module to allow importing ".cfn.yml" files as plain text instead of parsing them webpack
// "yaml-loader", because in this case we want the text value not the parsed yaml as an object.
const ec2RStudioInstance = "AWSTemplateFormatVersion: 2010-09-09\n\nDescription: Service-Workbench-on-AWS EC2-RStudio\n\nParameters:\n  Namespace:\n    Type: String\n    Description: An environment name that will be prefixed to resource names\n  AmiId:\n    Type: String\n    Description: Amazon Machine Image for the EC2 instance\n  InstanceType:\n    Type: String\n    Description: EC2 instance type to launch\n    Default: t3.xlarge\n  KeyName:\n    Type: String\n    Description: Keypair name for SSH access\n  AccessFromCIDRBlock:\n    Type: String\n    Description: The CIDR used to access the ec2 instances.\n  S3Mounts:\n    Type: String\n    Description: A JSON array of objects with name, bucket, and prefix properties used to mount data\n  IamPolicyDocument:\n    Type: String\n    Description: The IAM policy to be associated with the launched workstation\n  VPC:\n    Description: The VPC in which the EC2 instance will reside\n    Type: AWS::EC2::VPC::Id\n  Subnet:\n    Description: The VPC subnet in which the EC2 instance will reside\n    Type: AWS::EC2::Subnet::Id\n  EnvironmentInstanceFiles:\n    Type: String\n    Description: >-\n      An S3 URI (starting with \"s3://\") that specifies the location of files to be copied to\n      the environment instance, including any bootstrap scripts\n  EncryptionKeyArn:\n    Type: String\n    Description: The ARN of the KMS encryption Key used to encrypt data in the instance\n\nConditions:\n  IamPolicyEmpty: !Equals [!Ref IamPolicyDocument, '{}']\n\nResources:\n  IAMRole:\n    Type: 'AWS::IAM::Role'\n    Properties:\n      RoleName: !Join ['-', [Ref: Namespace, 'ec2-role']]\n      Path: '/'\n      AssumeRolePolicyDocument:\n        Version: '2012-10-17'\n        Statement:\n          - Effect: 'Allow'\n            Principal:\n              Service:\n                - 'ec2.amazonaws.com'\n            Action:\n              - 'sts:AssumeRole'\n      Policies:\n        - !If\n          - IamPolicyEmpty\n          - !Ref 'AWS::NoValue'\n          - PolicyName: !Join ['-', [Ref: Namespace, 's3-studydata-policy']]\n            PolicyDocument: !Ref IamPolicyDocument\n        - PolicyName: !Join ['-', [Ref: Namespace, 's3-bootstrap-script-policy']]\n          PolicyDocument:\n            Version: '2012-10-17'\n            Statement:\n              - Effect: 'Allow'\n                Action: 's3:GetObject'\n                Resource: !Sub\n                  - 'arn:aws:s3:::${S3Location}/*'\n                  # Remove \"s3://\" prefix from EnvironmentInstanceFiles\n                  - S3Location: !Select [1, !Split ['s3://', !Ref EnvironmentInstanceFiles]]\n              - Effect: 'Allow'\n                Action: 's3:ListBucket'\n                Resource: !Sub\n                  - 'arn:aws:s3:::${S3Bucket}'\n                  - S3Bucket: !Select [2, !Split ['/', !Ref EnvironmentInstanceFiles]]\n                Condition:\n                  StringLike:\n                    s3:prefix: !Sub\n                      - '${S3Prefix}/*'\n                      - S3Prefix: !Select [3, !Split ['/', !Ref EnvironmentInstanceFiles]]\n\n  InstanceProfile:\n    Type: 'AWS::IAM::InstanceProfile'\n    Properties:\n      InstanceProfileName: !Join ['-', [Ref: Namespace, 'ec2-profile']]\n      Path: '/'\n      Roles:\n        - Ref: IAMRole\n\n  SecurityGroup:\n    Type: 'AWS::EC2::SecurityGroup'\n    Properties:\n      GroupDescription: EC2 workspace security group\n      SecurityGroupEgress:\n        - IpProtocol: tcp\n          FromPort: 0\n          ToPort: 65535\n          CidrIp: 0.0.0.0/0\n        - IpProtocol: icmp\n          FromPort: -1\n          ToPort: -1\n          CidrIp: !Ref AccessFromCIDRBlock\n      SecurityGroupIngress:\n        - IpProtocol: tcp\n          FromPort: 80\n          ToPort: 80\n          CidrIp: !Ref AccessFromCIDRBlock\n        - IpProtocol: tcp\n          FromPort: 443\n          ToPort: 443\n          CidrIp: !Ref AccessFromCIDRBlock\n      Tags:\n        - Key: Name\n          Value: !Join ['-', [Ref: Namespace, 'ec2-sg']]\n        - Key: Description\n          Value: EC2 workspace security group\n      VpcId: !Ref VPC\n\n  EC2Instance:\n    Type: 'AWS::EC2::Instance'\n    CreationPolicy:\n      ResourceSignal:\n        Timeout: 'PT20M'\n    Properties:\n      ImageId: !Ref AmiId\n      InstanceType: !Ref InstanceType\n      IamInstanceProfile: !Ref InstanceProfile\n      KeyName: !Ref KeyName\n      BlockDeviceMappings:\n        - DeviceName: /dev/xvda\n          Ebs:\n            VolumeSize: 8\n            Encrypted: true\n            KmsKeyId: !Ref EncryptionKeyArn\n      NetworkInterfaces:\n        - AssociatePublicIpAddress: 'true'\n          DeviceIndex: '0'\n          GroupSet:\n            - !Ref SecurityGroup\n          SubnetId: !Ref Subnet\n      Tags:\n        - Key: Name\n          Value: !Join ['-', [Ref: Namespace, 'ec2-rstudio']]\n        - Key: Description\n          Value: EC2 workspace instance\n      UserData:\n        Fn::Base64: !Sub |\n          #!/usr/bin/env bash\n          # Download and execute bootstrap script\n          aws s3 cp \"${EnvironmentInstanceFiles}/get_bootstrap.sh\" \"/tmp\"\n          chmod 500 \"/tmp/get_bootstrap.sh\"\n          /tmp/get_bootstrap.sh \"${EnvironmentInstanceFiles}\" '${S3Mounts}'\n\n          # Signal result to CloudFormation\n          /opt/aws/bin/cfn-signal -e $? --stack \"${AWS::StackName}\" --resource \"EC2Instance\" --region \"${AWS::Region}\"\n\nOutputs:\n  Ec2WorkspaceDnsName:\n    Description: Public DNS name of the EC2 workspace instance\n    Value: !GetAtt [EC2Instance, PublicDnsName]\n\n  Ec2WorkspacePublicIp:\n    Description: Public IP address of the EC2 workspace instance\n    Value: !GetAtt [EC2Instance, PublicIp]\n\n  Ec2WorkspaceInstanceId:\n    Description: Instance Id for the EC2 workspace instance\n    Value: !Ref EC2Instance\n\n  WorkspaceInstanceRoleArn:\n    Description: IAM role assumed by the EC2 workspace instance\n    Value: !GetAtt IAMRole.Arn\n";

/* babel-plugin-inline-import '../templates/ec2-linux-instance.cfn.yml' */
const ec2LinuxInstance = "AWSTemplateFormatVersion: 2010-09-09\n\nDescription: Service-Workbench-on-AWS EC2-Linux\n\nParameters:\n  Namespace:\n    Type: String\n    Description: An environment name that will be prefixed to resource names\n  AmiId:\n    Type: String\n    Description: Amazon Machine Image for the EC2 instance\n  InstanceType:\n    Type: String\n    Description: EC2 instance type to launch\n    Default: t3.xlarge\n  KeyName:\n    Type: String\n    Description: Keypair name for SSH access\n  AccessFromCIDRBlock:\n    Type: String\n    Description: The CIDR used to access the ec2 instances.\n  S3Mounts:\n    Type: String\n    Description: A JSON array of objects with name, bucket, and prefix properties used to mount data\n  IamPolicyDocument:\n    Type: String\n    Description: The IAM policy to be associated with the launched workstation\n  VPC:\n    Description: The VPC in which the EC2 instance will reside\n    Type: AWS::EC2::VPC::Id\n  Subnet:\n    Description: The VPC subnet in which the EC2 instance will reside\n    Type: AWS::EC2::Subnet::Id\n  EnvironmentInstanceFiles:\n    Type: String\n    Description: >-\n      An S3 URI (starting with \"s3://\") that specifies the location of files to be copied to\n      the environment instance, including any bootstrap scripts\n  EncryptionKeyArn:\n    Type: String\n    Description: The ARN of the KMS encryption Key used to encrypt data in the instance\n\nConditions:\n  IamPolicyEmpty: !Equals [!Ref IamPolicyDocument, '{}']\n\nResources:\n  IAMRole:\n    Type: 'AWS::IAM::Role'\n    Properties:\n      RoleName: !Join ['-', [Ref: Namespace, 'ec2-role']]\n      Path: '/'\n      AssumeRolePolicyDocument:\n        Version: '2012-10-17'\n        Statement:\n          - Effect: 'Allow'\n            Principal:\n              Service:\n                - 'ec2.amazonaws.com'\n            Action:\n              - 'sts:AssumeRole'\n      Policies:\n        - !If\n          - IamPolicyEmpty\n          - !Ref 'AWS::NoValue'\n          - PolicyName: !Join ['-', [Ref: Namespace, 's3-studydata-policy']]\n            PolicyDocument: !Ref IamPolicyDocument\n        - PolicyName: !Join ['-', [Ref: Namespace, 's3-bootstrap-script-policy']]\n          PolicyDocument:\n            Version: '2012-10-17'\n            Statement:\n              - Effect: 'Allow'\n                Action: 's3:GetObject'\n                Resource: !Sub\n                  - 'arn:aws:s3:::${S3Location}/*'\n                  # Remove \"s3://\" prefix from EnvironmentInstanceFiles\n                  - S3Location: !Select [1, !Split ['s3://', !Ref EnvironmentInstanceFiles]]\n              - Effect: 'Allow'\n                Action: 's3:ListBucket'\n                Resource: !Sub\n                  - 'arn:aws:s3:::${S3Bucket}'\n                  - S3Bucket: !Select [2, !Split ['/', !Ref EnvironmentInstanceFiles]]\n                Condition:\n                  StringLike:\n                    s3:prefix: !Sub\n                      - '${S3Prefix}/*'\n                      - S3Prefix: !Select [3, !Split ['/', !Ref EnvironmentInstanceFiles]]\n\n  InstanceProfile:\n    Type: 'AWS::IAM::InstanceProfile'\n    Properties:\n      InstanceProfileName: !Join ['-', [Ref: Namespace, 'ec2-profile']]\n      Path: '/'\n      Roles:\n        - Ref: IAMRole\n\n  SecurityGroup:\n    Type: 'AWS::EC2::SecurityGroup'\n    Properties:\n      GroupDescription: EC2 workspace security group\n      SecurityGroupEgress:\n        - IpProtocol: tcp\n          FromPort: 0\n          ToPort: 65535\n          CidrIp: 0.0.0.0/0\n        - IpProtocol: icmp\n          FromPort: -1\n          ToPort: -1\n          CidrIp: !Ref AccessFromCIDRBlock\n      SecurityGroupIngress:\n        - IpProtocol: tcp\n          FromPort: 22\n          ToPort: 22\n          CidrIp: !Ref AccessFromCIDRBlock\n        - IpProtocol: tcp\n          FromPort: 80\n          ToPort: 80\n          CidrIp: !Ref AccessFromCIDRBlock\n        - IpProtocol: tcp\n          FromPort: 443\n          ToPort: 443\n          CidrIp: !Ref AccessFromCIDRBlock\n      Tags:\n        - Key: Name\n          Value: !Join ['-', [Ref: Namespace, 'ec2-sg']]\n        - Key: Description\n          Value: EC2 workspace security group\n      VpcId: !Ref VPC\n\n  EC2Instance:\n    Type: 'AWS::EC2::Instance'\n    CreationPolicy:\n      ResourceSignal:\n        Timeout: 'PT20M'\n    Properties:\n      ImageId: !Ref AmiId\n      InstanceType: !Ref InstanceType\n      IamInstanceProfile: !Ref InstanceProfile\n      KeyName: !Ref KeyName\n      BlockDeviceMappings:\n        - DeviceName: /dev/xvda\n          Ebs:\n            VolumeSize: 8\n            Encrypted: true\n            KmsKeyId: !Ref EncryptionKeyArn\n      NetworkInterfaces:\n        - AssociatePublicIpAddress: 'true'\n          DeviceIndex: '0'\n          GroupSet:\n            - !Ref SecurityGroup\n          SubnetId: !Ref Subnet\n      Tags:\n        - Key: Name\n          Value: !Join ['-', [Ref: Namespace, 'ec2-linux']]\n        - Key: Description\n          Value: EC2 workspace instance\n      UserData:\n        Fn::Base64: !Sub |\n          #!/usr/bin/env bash\n          # Download and execute bootstrap script\n          aws s3 cp \"${EnvironmentInstanceFiles}/get_bootstrap.sh\" \"/tmp\"\n          chmod 500 \"/tmp/get_bootstrap.sh\"\n          /tmp/get_bootstrap.sh \"${EnvironmentInstanceFiles}\" '${S3Mounts}'\n\n          # Signal result to CloudFormation\n          /opt/aws/bin/cfn-signal -e $? --stack \"${AWS::StackName}\" --resource \"EC2Instance\" --region \"${AWS::Region}\"\n\nOutputs:\n  Ec2WorkspaceDnsName:\n    Description: Public DNS name of the EC2 workspace instance\n    Value: !GetAtt [EC2Instance, PublicDnsName]\n\n  Ec2WorkspacePublicIp:\n    Description: Public IP address of the EC2 workspace instance\n    Value: !GetAtt [EC2Instance, PublicIp]\n\n  Ec2WorkspaceInstanceId:\n    Description: Instance Id for the EC2 workspace instance\n    Value: !Ref EC2Instance\n\n  WorkspaceInstanceRoleArn:\n    Description: IAM role assumed by the EC2 workspace instance\n    Value: !GetAtt IAMRole.Arn\n";

/* babel-plugin-inline-import '../templates/ec2-windows-instance.cfn.yml' */
const ec2WindowsInstance = "AWSTemplateFormatVersion: 2010-09-09\n\nDescription: Service-Workbench-on-AWS EC2-Windows\n\nParameters:\n  Namespace:\n    Type: String\n    Description: An environment name that will be prefixed to resource names\n  AmiId:\n    Type: String\n    Description: Amazon Machine Image for the EC2 instance\n  InstanceType:\n    Type: String\n    Description: EC2 instance type to launch\n    Default: t3.xlarge\n  KeyName:\n    Type: String\n    Description: Keypair name for admin password encryption/decryption\n  AccessFromCIDRBlock:\n    Type: String\n    Description: The CIDR used to access the ec2 instances.\n  VPC:\n    Description: The VPC in which the EC2 instance will reside\n    Type: AWS::EC2::VPC::Id\n  Subnet:\n    Description: The VPC subnet in which the EC2 instance will reside\n    Type: AWS::EC2::Subnet::Id\n  EncryptionKeyArn:\n    Type: String\n    Description: The ARN of the KMS encryption Key used to encrypt data in the instance\n\nResources:\n  IAMRole:\n    Type: 'AWS::IAM::Role'\n    Properties:\n      RoleName: !Join ['-', [Ref: Namespace, 'ec2-role']]\n      Path: '/'\n      AssumeRolePolicyDocument:\n        Version: '2012-10-17'\n        Statement:\n          - Effect: 'Allow'\n            Principal:\n              Service:\n                - 'ec2.amazonaws.com'\n            Action:\n              - 'sts:AssumeRole'\n      Policies:\n        - PolicyName: !Join ['-', [Ref: Namespace, 's3-policy']]\n          PolicyDocument:\n            Version: '2012-10-17'\n            Statement:\n              - Effect: 'Allow'\n                Action:\n                  - 's3:*'\n                Resource:\n                  - '*'\n\n  InstanceProfile:\n    Type: 'AWS::IAM::InstanceProfile'\n    Properties:\n      InstanceProfileName: !Join ['-', [Ref: Namespace, 'ec2-profile']]\n      Path: '/'\n      Roles:\n        - Ref: IAMRole\n\n  SecurityGroup:\n    Type: 'AWS::EC2::SecurityGroup'\n    Properties:\n      GroupDescription: EC2 workspace security group\n      SecurityGroupEgress:\n        - IpProtocol: tcp\n          FromPort: 0\n          ToPort: 65535\n          CidrIp: 0.0.0.0/0\n        - IpProtocol: icmp\n          FromPort: -1\n          ToPort: -1\n          CidrIp: !Ref AccessFromCIDRBlock\n      SecurityGroupIngress:\n        - IpProtocol: tcp\n          FromPort: 3389\n          ToPort: 3389\n          CidrIp: !Ref AccessFromCIDRBlock\n        - IpProtocol: tcp\n          FromPort: 80\n          ToPort: 80\n          CidrIp: !Ref AccessFromCIDRBlock\n        - IpProtocol: tcp\n          FromPort: 443\n          ToPort: 443\n          CidrIp: !Ref AccessFromCIDRBlock\n      Tags:\n        - Key: Name\n          Value: !Join ['-', [Ref: Namespace, 'ec2-sg']]\n        - Key: Description\n          Value: EC2 workspace security group\n      VpcId: !Ref VPC\n\n  EC2Instance:\n    Type: 'AWS::EC2::Instance'\n    CreationPolicy:\n      ResourceSignal:\n        Timeout: 'PT20M'\n    Properties:\n      ImageId: !Ref AmiId\n      InstanceType: !Ref InstanceType\n      IamInstanceProfile: !Ref InstanceProfile\n      KeyName: !Ref KeyName\n      BlockDeviceMappings:\n        - DeviceName: /dev/sda1\n          Ebs:\n            VolumeSize: 30\n            Encrypted: true\n            KmsKeyId: !Ref EncryptionKeyArn\n      NetworkInterfaces:\n        - AssociatePublicIpAddress: 'true'\n          DeviceIndex: '0'\n          GroupSet:\n            - !Ref SecurityGroup\n          SubnetId: !Ref Subnet\n      Tags:\n        - Key: Name\n          Value: !Join ['-', [Ref: Namespace, 'ec2-windows']]\n        - Key: Description\n          Value: EC2 workspace instance\n      UserData:\n        Fn::Base64: !Sub |\n          <powershell>\n          cmd /c \"exit 0\" # Automatically return success; remove this line if actual bootstrapping logic is added\n          cfn-signal.exe -e $lastexitcode --stack ${AWS::StackId} --resource EC2Instance --region ${AWS::Region}\n          </powershell>\n\nOutputs:\n  Ec2WorkspaceDnsName:\n    Description: Public DNS name of the EC2 workspace instance\n    Value: !GetAtt [EC2Instance, PublicDnsName]\n\n  Ec2WorkspacePublicIp:\n    Description: Public IP address of the EC2 workspace instance\n    Value: !GetAtt [EC2Instance, PublicIp]\n\n  Ec2WorkspaceInstanceId:\n    Description: Instance Id for the EC2 workspace instance\n    Value: !Ref EC2Instance\n\n  WorkspaceInstanceRoleArn:\n    Description: IAM role assumed by the EC2 workspace instance\n    Value: !GetAtt IAMRole.Arn\n";

/* babel-plugin-inline-import '../templates/sagemaker-notebook-instance.cfn.yml' */
const sagemakerInstance = "AWSTemplateFormatVersion: 2010-09-09\n\nDescription: Service-Workbench-on-AWS SageMaker-Jupyter\n\nParameters:\n  Namespace:\n    Type: String\n    Description: An environment name that will be prefixed to resource names\n  InstanceType:\n    Type: String\n    Description: EC2 instance type to launch\n    Default: ml.t3.xlarge\n  VPC:\n    Description: VPC for EMR nodes.\n    Type: AWS::EC2::VPC::Id\n  Subnet:\n    Description: Subnet for EMR nodes, from the VPC selected above\n    Type: AWS::EC2::Subnet::Id\n  S3Mounts:\n    Type: String\n    Description: A JSON array of objects with name, bucket and prefix properties used to mount data\n  IamPolicyDocument:\n    Type: String\n    Description: The IAM policy to be associated with the launched workstation\n  EnvironmentInstanceFiles:\n    Type: String\n    Description: >-\n      An S3 URI (starting with \"s3://\") that specifies the location of files to be copied to\n      the environment instance, including any bootstrap scripts\n  EncryptionKeyArn:\n    Type: String\n    Description: The ARN of the KMS encryption Key used to encrypt data in the notebook\n\nConditions:\n  IamPolicyEmpty: !Equals [!Ref IamPolicyDocument, '{}']\n\nResources:\n  SecurityGroup:\n    Type: AWS::EC2::SecurityGroup\n    Properties:\n      GroupDescription: SageMaker Notebook Instance\n      VpcId:\n        Ref: VPC\n\n  IAMRole:\n    Type: 'AWS::IAM::Role'\n    Properties:\n      RoleName: !Join ['-', [Ref: Namespace, 'sagemaker-notebook-role']]\n      Path: '/'\n      AssumeRolePolicyDocument:\n        Version: '2012-10-17'\n        Statement:\n          - Effect: 'Allow'\n            Principal:\n              Service:\n                - 'sagemaker.amazonaws.com'\n            Action:\n              - 'sts:AssumeRole'\n      Policies:\n        - !If\n          - IamPolicyEmpty\n          - !Ref 'AWS::NoValue'\n          - PolicyName: !Join ['-', [Ref: Namespace, 's3-studydata-policy']]\n            PolicyDocument: !Ref IamPolicyDocument\n        - PolicyName: !Join ['-', [Ref: Namespace, 's3-bootstrap-script-policy']]\n          PolicyDocument:\n            Version: '2012-10-17'\n            Statement:\n              - Effect: 'Allow'\n                Action: 's3:GetObject'\n                Resource: !Sub\n                  - 'arn:aws:s3:::${S3Location}/*'\n                  # Remove \"s3://\" prefix from EnvironmentInstanceFiles\n                  - S3Location: !Select [1, !Split ['s3://', !Ref EnvironmentInstanceFiles]]\n              - Effect: 'Allow'\n                Action: 's3:ListBucket'\n                Resource: !Sub\n                  - 'arn:aws:s3:::${S3Bucket}'\n                  - S3Bucket: !Select [2, !Split ['/', !Ref EnvironmentInstanceFiles]]\n                Condition:\n                  StringLike:\n                    s3:prefix: !Sub\n                      - '${S3Prefix}/*'\n                      - S3Prefix: !Select [3, !Split ['/', !Ref EnvironmentInstanceFiles]]\n\n        - PolicyName: cw-logs\n          PolicyDocument:\n            Statement:\n              Effect: Allow\n              Action:\n                - logs:CreateLogStream\n                - logs:DescribeLogStreams\n                - logs:PutLogEvents\n                - logs:CreateLogGroup\n              Resource:\n                - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/sagemaker/*\n  # TODO: Consider also passing DefaultCodeRepository to allow persisting notebook data\n  BasicNotebookInstance:\n    Type: 'AWS::SageMaker::NotebookInstance'\n    Properties:\n      InstanceType: !Ref InstanceType\n      RoleArn: !GetAtt IAMRole.Arn\n      SubnetId: !Ref Subnet\n      SecurityGroupIds:\n        - !Ref SecurityGroup\n      LifecycleConfigName: !GetAtt BasicNotebookInstanceLifecycleConfig.NotebookInstanceLifecycleConfigName\n      KmsKeyId: !Ref EncryptionKeyArn\n\n  BasicNotebookInstanceLifecycleConfig:\n    Type: 'AWS::SageMaker::NotebookInstanceLifecycleConfig'\n    Properties:\n      OnStart:\n        - Content:\n            Fn::Base64: !Sub |\n              #!/usr/bin/env bash\n              # Download and execute bootstrap script\n              aws s3 cp \"${EnvironmentInstanceFiles}/get_bootstrap.sh\" \"/tmp\"\n              chmod 500 \"/tmp/get_bootstrap.sh\"\n              /tmp/get_bootstrap.sh \"${EnvironmentInstanceFiles}\" '${S3Mounts}'\n\nOutputs:\n  NotebookInstanceName:\n    Description: The name of the SageMaker notebook instance.\n    Value: !GetAtt [BasicNotebookInstance, NotebookInstanceName]\n\n  WorkspaceInstanceRoleArn:\n    Description: IAM role assumed by the SageMaker workspace instance\n    Value: !GetAtt IAMRole.Arn\n";

/* babel-plugin-inline-import '../templates/emr-cluster.cfn.yml' */
const emrCluster = "AWSTemplateFormatVersion: 2010-09-09\n\nDescription: Service-Workbench-on-AWS EMR-Hail-Jupyter\n\nMetadata:\n  AWS::CloudFormation::Interface:\n    ParameterGroups:\n      - Label:\n          default: EMR Options\n        Parameters:\n          - Namespace\n          - KeyName\n          - VPC\n          - Subnet\n          - CoreNodeCount\n          - DiskSizeGB\n          - MasterInstanceType\n          - WorkerInstanceType\n          - WorkerBidPrice\n          - AccessFromCIDRBlock\n          - AmiId\n      - Label:\n          default: Tags\n        Parameters:\n          - NameTag\n          - OwnerTag\n          - PurposeTag\n\nParameters:\n  Namespace:\n    Type: String\n    Description: An environment name that will be prefixed to resource names\n  KeyName:\n    Description: SSH key pair to use for EMR node login\n    Type: AWS::EC2::KeyPair::KeyName\n  VPC:\n    Description: VPC for EMR nodes.\n    Type: AWS::EC2::VPC::Id\n  Subnet:\n    Description: Subnet for EMR nodes, from the VPC selected above\n    Type: AWS::EC2::Subnet::Id\n  CoreNodeCount:\n    Description: Number of core nodes to provision (1-80)\n    Type: Number\n    MinValue: '1'\n    MaxValue: '80'\n    Default: '5'\n  DiskSizeGB:\n    Description: EBS Volume size (GB) for each node\n    Type: Number\n    MinValue: '10'\n    MaxValue: '1000'\n    Default: '20'\n  MasterInstanceType:\n    Type: String\n    Default: m5.xlarge\n    Description: EMR node ec2 instance type.\n  WorkerInstanceType:\n    Type: String\n    Default: m5.xlarge\n    Description: EMR node ec2 instance type.\n  Market:\n    Type: String\n    Default: ON_DEMAND\n    Description: Which market to purchase workers on - ON_DEMAND or SPOT.\n  WorkerBidPrice:\n    Type: String\n    Description: Bid price for the worker spot nodes. This is only applicable when Market = SPOT. Specify 0 for Market = ON_DEMAND.\n  AccessFromCIDRBlock:\n    Type: String\n    MinLength: 9\n    Description: Restrict WebUI access to specified address or range\n  AmiId:\n    Type: String\n    Description: Ami Id to use for the cluster\n  EnvironmentInstanceFiles:\n    Type: String\n    Description: >-\n      An S3 URI (starting with \"s3://\") that specifies the location of files to be copied to\n      the environment instance, including any bootstrap scripts\n  S3Mounts:\n    Type: String\n    Description: A JSON array of objects with name, bucket and prefix properties used to mount data\n  IamPolicyDocument:\n    Type: String\n    Description: The IAM policy to be associated with the launched workstation\n  EncryptionKeyArn:\n    Type: String\n    Description: The ARN of the KMS encryption Key used to encrypt data in the cluster\n\nConditions:\n  IamPolicyEmpty: !Equals [!Ref IamPolicyDocument, '{}']\n  IsOnDemandCondition: !Equals [!Ref Market, ON_DEMAND]\n\nResources:\n  # TODO: Use one bucket for EMR logs per account, so shift deployment to account on-boarding and pass here as param\n  LogBucket:\n    Type: AWS::S3::Bucket\n    DeletionPolicy: Retain\n    Properties:\n      PublicAccessBlockConfiguration: # Block all public access configuration for the S3 bucket\n        BlockPublicAcls: true\n        BlockPublicPolicy: true\n        IgnorePublicAcls: true\n        RestrictPublicBuckets: true\n\n  MasterSecurityGroup:\n    Type: AWS::EC2::SecurityGroup\n    Properties:\n      GroupDescription: Jupyter\n      VpcId:\n        Ref: VPC\n      SecurityGroupIngress:\n        - IpProtocol: tcp\n          FromPort: 8192\n          ToPort: 8192\n          CidrIp:\n            Ref: AccessFromCIDRBlock\n\n  InstanceProfile:\n    Properties:\n      Path: '/'\n      Roles:\n        - Ref: Ec2Role\n    Type: AWS::IAM::InstanceProfile\n\n  Ec2Role:\n    Type: 'AWS::IAM::Role'\n    Properties:\n      RoleName: !Join ['-', [Ref: Namespace, 'ec2-role']]\n      Path: '/'\n      AssumeRolePolicyDocument:\n        Version: '2012-10-17'\n        Statement:\n          - Effect: 'Allow'\n            Principal:\n              Service:\n                - 'ec2.amazonaws.com'\n            Action:\n              - 'sts:AssumeRole'\n      Policies:\n        - !If\n          - IamPolicyEmpty\n          - !Ref 'AWS::NoValue'\n          - PolicyName: !Join ['-', [Ref: Namespace, 's3-studydata-policy']]\n            PolicyDocument: !Ref IamPolicyDocument\n        - PolicyName: !Join ['-', [Ref: Namespace, 's3-bootstrap-script-policy']]\n          PolicyDocument:\n            Version: '2012-10-17'\n            Statement:\n              - Effect: 'Allow'\n                Action: 's3:GetObject'\n                Resource:\n                  - 'arn:aws:s3:::us-east-1.elasticmapreduce/bootstrap-actions/run-if'\n                  - !Sub\n                    - 'arn:aws:s3:::${S3Location}/*'\n                    # Remove \"s3://\" prefix from EnvironmentInstanceFiles\n                    - S3Location: !Select [1, !Split ['s3://', !Ref EnvironmentInstanceFiles]]\n              - Effect: 'Allow'\n                Action: 's3:ListBucket'\n                Resource: !Sub\n                  - 'arn:aws:s3:::${S3Bucket}'\n                  - S3Bucket: !Select [2, !Split ['/', !Ref EnvironmentInstanceFiles]]\n                Condition:\n                  StringLike:\n                    s3:prefix: !Sub\n                      - '${S3Prefix}/*'\n                      - S3Prefix: !Select [3, !Split ['/', !Ref EnvironmentInstanceFiles]]\n\n  ServiceRole:\n    Type: AWS::IAM::Role\n    Properties:\n      Path: '/'\n      AssumeRolePolicyDocument:\n        Statement:\n          - Action:\n              - sts:AssumeRole\n            Effect: Allow\n            Principal:\n              Service:\n                - elasticmapreduce.amazonaws.com\n        Version: '2012-10-17'\n      ManagedPolicyArns:\n        - arn:aws:iam::aws:policy/service-role/AmazonElasticMapReduceRole\n\n  EmrSecurityConfiguration:\n    Type: AWS::EMR::SecurityConfiguration\n    Properties:\n      SecurityConfiguration:\n        {\n          'EncryptionConfiguration':\n            {\n              'AtRestEncryptionConfiguration':\n                {\n                  'LocalDiskEncryptionConfiguration':\n                    {\n                      'EncryptionKeyProviderType': 'AwsKms',\n                      'AwsKmsKey': { 'Ref': 'EncryptionKeyArn' },\n                      'EnableEbsEncryption': true,\n                    },\n                },\n              'EnableInTransitEncryption': false,\n              'EnableAtRestEncryption': true,\n            },\n        }\n\n  # TODO: customise jupyter password from launch ui\n  # TODO: Add security configuration to cluster\n  # TODO: Can we make the jupyter use https?\n  # TODO: Also change notebook owner to hadoop on launch\n  EmrCluster:\n    Type: AWS::EMR::Cluster\n    Properties:\n      Applications:\n        - Name: Hadoop\n        - Name: Hive\n        - Name: Spark\n      BootstrapActions:\n        - Name: Run-Python-Jupyter\n          ScriptBootstrapAction:\n            Path: s3://us-east-1.elasticmapreduce/bootstrap-actions/run-if\n            Args:\n              - 'instance.isMaster=true'\n              - '/opt/hail-on-AWS-spot-instances/src/jupyter_run.sh'\n        - Name: Mount-S3-Resources\n          ScriptBootstrapAction:\n            Path: !Sub '${EnvironmentInstanceFiles}/get_bootstrap.sh'\n            Args:\n              - !Ref EnvironmentInstanceFiles\n              - !Ref S3Mounts\n      CustomAmiId:\n        Ref: AmiId\n      Configurations:\n        - Classification: spark\n          ConfigurationProperties:\n            maximizeResourceAllocation: true\n        - Classification: yarn-site\n          ConfigurationProperties:\n            yarn.nodemanager.vmem-check-enabled: false\n        - Classification: spark-defaults\n          ConfigurationProperties:\n            spark.hadoop.io.compression.codecs: 'org.apache.hadoop.io.compress.DefaultCodec,is.hail.io.compress.BGzipCodec,org.apache.hadoop.io.compress.GzipCodec'\n            spark.serializer: 'org.apache.spark.serializer.KryoSerializer'\n            spark.hadoop.parquet.block.size: '1099511627776'\n            spark.sql.files.maxPartitionBytes: '1099511627776'\n            spark.sql.files.openCostInBytes: '1099511627776'\n          Configurations: []\n      Instances:\n        AdditionalMasterSecurityGroups:\n          - Fn::GetAtt:\n              - MasterSecurityGroup\n              - GroupId\n        Ec2KeyName:\n          Ref: KeyName\n        Ec2SubnetId:\n          Ref: Subnet\n        MasterInstanceGroup:\n          InstanceCount: 1\n          InstanceType:\n            Ref: MasterInstanceType\n        CoreInstanceGroup: !If\n          - IsOnDemandCondition\n          - InstanceCount:\n              Ref: CoreNodeCount\n            InstanceType:\n              Ref: WorkerInstanceType\n            Market:\n              Ref: Market\n            EbsConfiguration:\n              EbsOptimized: true\n              EbsBlockDeviceConfigs:\n                - VolumeSpecification:\n                    SizeInGB:\n                      Ref: DiskSizeGB\n                    VolumeType: gp2\n          - InstanceCount:\n              Ref: CoreNodeCount\n            InstanceType:\n              Ref: WorkerInstanceType\n            Market:\n              Ref: Market\n            BidPrice:\n              Ref: WorkerBidPrice\n            EbsConfiguration:\n              EbsOptimized: true\n              EbsBlockDeviceConfigs:\n                - VolumeSpecification:\n                    SizeInGB:\n                      Ref: DiskSizeGB\n                    VolumeType: gp2\n      JobFlowRole:\n        Ref: InstanceProfile\n      Name: !Sub '${Namespace}-emr'\n      Tags: # Add Name tag so EC2 instances are easily identifiable\n        - Key: Name\n          Value: !Sub '${Namespace}-emr'\n      ServiceRole:\n        Ref: ServiceRole\n      ReleaseLabel: emr-5.27.0\n      # This has to be true because we assume a new user each time.\n      VisibleToAllUsers: true\n      SecurityConfiguration: !Ref EmrSecurityConfiguration\n      LogUri: !Sub 's3://${LogBucket}'\n\nOutputs:\n  JupyterUrl:\n    Description: Open Jupyter on your new EMR cluster\n    Value: !Sub 'http://${EmrCluster.MasterPublicDNS}:8192'\n  LogBucket:\n    Description: EMR Scratch data and Logs bucket\n    Value: !Ref LogBucket\n  WorkspaceInstanceRoleArn:\n    Description: IAM role assumed by the EMR workspace instances\n    Value: !GetAtt Ec2Role.Arn\n";

/* babel-plugin-inline-import '../templates/onboard-account.cfn.yml' */
const onboardAccount = "AWSTemplateFormatVersion: 2010-09-09\n\nDescription: Service-Workbench-on-AWS Research-Account\n\nParameters:\n  Namespace:\n    Type: String\n    Description: An environment name that will be prefixed to resource names\n\n  CentralAccountId:\n    Type: String\n    Description: The account id of the main AWS account where the solution is deployed.\n\n  ExternalId:\n    Type: String\n    Description: A unique ID used to identify this account\n\n  VpcCidr:\n    Description: Please enter the IP range (CIDR notation) for this VPC\n    Type: String\n    Default: 10.0.0.0/16\n\n  ApiHandlerArn:\n    Type: String\n    Description: The arn of apiHandler role\n\n  WorkflowRoleArn:\n    Type: String\n    Description: The arn of workflowRunner role\n\n  # Generous subnet allocation of 8192 addresses (ie room for a few concurrent EMR clusters)\n  # ending at 10.0.31.255\n  VpcPublicSubnet1Cidr:\n    Description: Please enter the IP range (CIDR notation) for the public subnet in the 1st Availability Zone\n    Type: String\n    Default: 10.0.0.0/19\n\n  LaunchConstraintRolePrefix:\n    Description: Role name prefix to use when creating a launch constraint role in the on-boarded account\n    Type: String\n    Default: '*'\n\n  LaunchConstraintPolicyPrefix:\n    Description: Customer managed policy name prefix to use when creating a launch constraint role in the on-boarded account\n    Type: String\n    Default: '*'\n\nMetadata:\n  AWS::CloudFormation::Interface:\n    ParameterGroups:\n      - Label:\n          default: Shared Configuration\n        Parameters:\n          - Namespace\n      - Label:\n          default: Account Configuration\n        Parameters:\n          - CentralAccountId\n          - ExternalId\n      - Label:\n          default: Deployment Configuration\n        Parameters:\n          - VpcCidr\n          - VpcPublicSubnet1Cidr\n\nResources:\n  # A role used for launching environments using AWS Service Catalog\n  # This is the role that code (ApiHandlerLambda and WorkflowLoopRunnerLambda) in central account\n  # assumes before performing any AWS Service Catalog interactions in this account (the on-boarded account)\n  # for launching environments.\n  # Equivalent role for central account is created by \"main/solution/backend/config/infra/cloudformation.yml\"\n  CrossAccountRoleEnvMgmt:\n    Type: 'AWS::IAM::Role'\n    Properties:\n      RoleName: !Join ['-', [Ref: Namespace, 'xacc-env-mgmt']]\n      Path: '/'\n      AssumeRolePolicyDocument:\n        Version: '2012-10-17'\n        Statement:\n          - Effect: 'Allow'\n            Principal:\n              AWS:\n                - !Join [':', ['arn:aws:iam:', Ref: CentralAccountId, 'root']]\n                - !Ref ApiHandlerArn\n                - !Ref WorkflowRoleArn\n            Action:\n              - 'sts:AssumeRole'\n            Condition:\n              StringEquals:\n                sts:ExternalId: !Ref ExternalId\n      ManagedPolicyArns:\n        - arn:aws:iam::aws:policy/AWSServiceCatalogAdminFullAccess\n      Policies:\n        - PolicyName: ec2-access\n          PolicyDocument:\n            Statement:\n              Effect: Allow\n              Action:\n                - ec2:CreateKeyPair\n                - ec2:DeleteKeyPair\n                - ec2:GetPasswordData\n                - ec2:ModifyImageAttribute\n                - ec2:DescribeImages\n                - ec2:DescribeInstances\n                - ec2-instance-connect:SendSSHPublicKey\n              Resource: '*'\n        - PolicyName: ssm-access\n          PolicyDocument:\n            Statement:\n              Effect: Allow\n              Action:\n                - ssm:PutParameter\n                - ssm:GetParameter\n                - ssm:GetParameters\n                - ssm:DeleteParameter\n              Resource: '*'\n        - PolicyName: cost-explorer-access\n          PolicyDocument:\n            Statement:\n              Effect: Allow\n              Action:\n                - ce:*\n              Resource: '*'\n        - PolicyName: s3-access\n          PolicyDocument:\n            Statement:\n              Effect: Allow\n              Action:\n                - s3:*\n              Resource: '*'\n        - PolicyName: sagemaker-access\n          PolicyDocument:\n            Statement:\n              Effect: Allow\n              Action:\n                - sagemaker:*\n              Resource: '*'\n        - PolicyName: iam-role-access\n          PolicyDocument:\n            Statement:\n              - Effect: Allow\n                Action:\n                  - iam:GetRole\n                  - iam:CreateRole\n                  - iam:TagRole\n                  - iam:GetRolePolicy\n                  - iam:PutRolePolicy\n                  - iam:DeleteRolePolicy\n                  - iam:ListRolePolicies\n                  - iam:ListAttachedRolePolicies\n                  - iam:UpdateAssumeRolePolicy\n                  - iam:UpdateRoleDescription\n                  - iam:AttachRolePolicy\n                  - iam:DetachRolePolicy\n                Resource:\n                  - !Sub 'arn:${AWS::Partition}:iam::${AWS::AccountId}:role/${LaunchConstraintRolePrefix}'\n              - Effect: Allow\n                Action:\n                  - iam:CreatePolicy\n                  - iam:GetPolicy\n                  - iam:GetPolicyVersion\n                  - iam:ListPolicyVersions\n                  - iam:DeletePolicy\n                  - iam:DeletePolicyVersion\n                Resource:\n                  - !Sub 'arn:${AWS::Partition}:iam::${AWS::AccountId}:policy/${LaunchConstraintPolicyPrefix}'\n\n  # TODO lock these permissions down further\n  CrossAccountExecutionRole:\n    Type: 'AWS::IAM::Role'\n    Properties:\n      RoleName: !Join ['-', [Ref: Namespace, 'cross-account-role']]\n      Path: '/'\n      AssumeRolePolicyDocument:\n        Version: '2012-10-17'\n        Statement:\n          - Effect: 'Allow'\n            Principal:\n              AWS:\n                - !Join [':', ['arn:aws:iam:', Ref: CentralAccountId, 'root']]\n                - !Ref ApiHandlerArn\n                - !Ref WorkflowRoleArn\n            Action:\n              - 'sts:AssumeRole'\n            Condition:\n              StringEquals:\n                sts:ExternalId: !Ref ExternalId\n      Policies:\n        - PolicyName: cfn-access\n          PolicyDocument:\n            Version: '2012-10-17'\n            Statement:\n              - Effect: Allow\n                Action:\n                  - cloudformation:CreateStack\n                  - cloudformation:DeleteStack\n                  - cloudformation:DescribeStacks\n                  - cloudformation:DescribeStackEvents\n                Resource: '*'\n        - PolicyName: sagemaker-access\n          PolicyDocument:\n            Statement:\n              Effect: Allow\n              Action:\n                - sagemaker:*\n              Resource: '*'\n        - PolicyName: iam-role-access\n          PolicyDocument:\n            Statement:\n              Effect: Allow\n              Action:\n                - iam:GetRole\n                - iam:CreateRole\n                - iam:TagRole\n                - iam:GetRolePolicy\n                - iam:PutRolePolicy\n                - iam:DeleteRolePolicy\n                - iam:DeleteRole\n                - iam:PassRole\n              Resource:\n                - !Sub 'arn:aws:iam::${AWS::AccountId}:role/analysis-*'\n        - PolicyName: iam-instance-profile-access\n          PolicyDocument:\n            Statement:\n              Effect: Allow\n              Action:\n                - iam:AddRoleToInstanceProfile\n                - iam:CreateInstanceProfile\n                - iam:GetInstanceProfile\n                - iam:DeleteInstanceProfile\n                - iam:RemoveRoleFromInstanceProfile\n              Resource:\n                - !Sub 'arn:aws:iam::${AWS::AccountId}:instance-profile/analysis-*'\n        - PolicyName: iam-role-service-policy-access\n          PolicyDocument:\n            Statement:\n              Effect: Allow\n              Action:\n                - iam:AttachRolePolicy\n                - iam:DetachRolePolicy\n              Resource:\n                - !Sub 'arn:aws:iam::${AWS::AccountId}:role/analysis-*'\n              Condition:\n                ArnLike:\n                  iam:PolicyARN: arn:aws:iam::aws:policy/service-role/AmazonElasticMapReduceRole\n        - PolicyName: iam-service-linked-role-create-access\n          PolicyDocument:\n            Statement:\n              Effect: Allow\n              Action:\n                - iam:CreateServiceLinkedRole\n                - iam:PutRolePolicy\n              Resource: arn:aws:iam::*:role/aws-service-role/elasticmapreduce.amazonaws.com*/AWSServiceRoleForEMRCleanup*\n              Condition:\n                StringLike:\n                  iam:AWSServiceName:\n                    - elasticmapreduce.amazonaws.com\n                    - elasticmapreduce.amazonaws.com.cn\n        - PolicyName: cost-explorer-access\n          PolicyDocument:\n            Statement:\n              Effect: Allow\n              Action:\n                - ce:*\n              Resource: '*'\n        - PolicyName: budget-access\n          PolicyDocument:\n            Statement:\n              Effect: Allow\n              Action:\n                - budgets:ViewBudget\n                - budgets:ModifyBudget\n              Resource: '*'\n        - PolicyName: s3-access\n          PolicyDocument:\n            Statement:\n              Effect: Allow\n              Action:\n                - s3:*\n              Resource: '*'\n        - PolicyName: ec2-access\n          PolicyDocument:\n            Statement:\n              Effect: Allow\n              Action:\n                - ec2:*\n              Resource: '*'\n        - PolicyName: ssm-access\n          PolicyDocument:\n            Statement:\n              Effect: Allow\n              Action:\n                - ssm:*\n              Resource: '*'\n        - PolicyName: emr-access\n          PolicyDocument:\n            Statement:\n              Effect: Allow\n              Action:\n                - elasticmapreduce:*\n              Resource: '*'\n\n  # VPC for launching EMR clusters into\n  # Just one AZ as we're aiming for transient low-cost clusters rather than HA\n  VPC:\n    Type: AWS::EC2::VPC\n    Properties:\n      CidrBlock: !Ref VpcCidr\n      EnableDnsSupport: true\n      EnableDnsHostnames: true\n      Tags:\n        - Key: Name\n          Value: !Sub ${Namespace} vpc\n\n  InternetGateway:\n    Type: AWS::EC2::InternetGateway\n    Properties:\n      Tags:\n        - Key: Name\n          Value: !Sub ${Namespace} igw\n\n  InternetGatewayAttachment:\n    Type: AWS::EC2::VPCGatewayAttachment\n    Properties:\n      InternetGatewayId: !Ref InternetGateway\n      VpcId: !Ref VPC\n\n  PublicSubnet1:\n    Type: AWS::EC2::Subnet\n    Properties:\n      VpcId: !Ref VPC\n      AvailabilityZone: !Select [0, !GetAZs ]\n      CidrBlock: !Ref VpcPublicSubnet1Cidr\n      MapPublicIpOnLaunch: true\n      Tags:\n        - Key: Name\n          Value: !Sub ${Namespace} public subnet 1\n\n  PublicRouteTable:\n    Type: AWS::EC2::RouteTable\n    Properties:\n      VpcId: !Ref VPC\n      Tags:\n        - Key: Name\n          Value: !Sub ${Namespace} public routes\n\n  DefaultPublicRoute:\n    Type: AWS::EC2::Route\n    DependsOn: InternetGatewayAttachment\n    Properties:\n      RouteTableId: !Ref PublicRouteTable\n      DestinationCidrBlock: 0.0.0.0/0\n      GatewayId: !Ref InternetGateway\n\n  PublicSubnet1RouteTableAssociation:\n    Type: AWS::EC2::SubnetRouteTableAssociation\n    Properties:\n      RouteTableId: !Ref PublicRouteTable\n      SubnetId: !Ref PublicSubnet1\n\n  EncryptionKey:\n    Type: AWS::KMS::Key\n    Properties:\n      Description: 'This is the key used to secure resources in this account'\n      EnableKeyRotation: True\n      KeyPolicy:\n        Version: '2012-10-17'\n        Statement:\n          - Sid: Allow root access\n            Effect: 'Allow'\n            Principal:\n              AWS: !Sub arn:aws:iam::${AWS::AccountId}:root\n            Action:\n              - 'kms:*'\n            Resource: '*'\n          - Sid: Allow use of the key by this account\n            Effect: 'Allow'\n            Principal:\n              AWS: '*'\n            Action:\n              - 'kms:DescribeKey'\n              - 'kms:Encrypt'\n              - 'kms:Decrypt'\n              - 'kms:ReEncrypt*'\n              - 'kms:GenerateDataKey'\n              - 'kms:GenerateDataKeyWithoutPlaintext'\n              - 'kms:CreateGrant'\n              - 'kms:RevokeGrant'\n            Resource: '*'\n            Condition:\n              StringEquals:\n                kms:CallerAccount: !Ref 'AWS::AccountId'\n\n  EncryptionKeyAlias:\n    Type: AWS::KMS::Alias\n    Properties:\n      AliasName: !Join ['', ['alias/', Ref: Namespace, '-encryption-key']]\n      TargetKeyId: !Ref EncryptionKey\n\nOutputs:\n  CrossAccountEnvMgmtRoleArn:\n    Description: The arn of the cross account role for environment management using AWS Service Catalog\n    Value: !GetAtt [CrossAccountRoleEnvMgmt, Arn]\n\n  CrossAccountExecutionRoleArn:\n    Description: The arn of the cross account role.\n    Value: !GetAtt [CrossAccountExecutionRole, Arn]\n\n  VPC:\n    Description: VPC ID\n    Value: !Ref VPC\n\n  VpcPublicSubnet1:\n    Description: A reference to the public subnet in the 1st Availability Zone\n    Value: !Ref PublicSubnet1\n\n  EncryptionKeyArn:\n    Description: KMS Encryption Key Arn\n    Value: !GetAtt [EncryptionKey, Arn]\n";

/* babel-plugin-inline-import '../templates/storage-gateway/network-infrastructure.cfn.yml' */
const storageGatewayNetworkInfra = "AWSTemplateFormatVersion: 2010-09-09\n\nDescription: Service-Workbench-on-AWS Networking Infrastructure for Storage Gateway\n\nParameters:\n  Namespace:\n    Type: String\n    Description: An environment name that will be prefixed to resource names\n    Default: jeetend\n  VpcCidr:\n    Description: Please enter the IP range (CIDR notation) for this VPC\n    Type: String\n    Default: 10.0.0.0/16\n  VpcPublicSubnet1Cidr:\n    Description: Please enter the IP range (CIDR notation) for the public subnet in the 1st Availability Zone\n    Type: String\n    Default: 10.0.0.0/19\n  AmiId:\n    Type: String\n    Description: Amazon Machine Image for the EC2 instance\n  InstanceType:\n    Type: String\n    Description: EC2 instance type to launch\n    Default: m5.xlarge\n\nMetadata:\n  AWS::CloudFormation::Interface:\n    ParameterGroups:\n      - Label:\n          default: Shared Configuration\n        Parameters:\n          - Namespace\n      - Label:\n          default: Deployment Configuration\n        Parameters:\n          - VpcCidr\n          - VpcPublicSubnet1Cidr\n\nResources:\n  IAMRole:\n    Type: 'AWS::IAM::Role'\n    Properties:\n      RoleName: !Join ['-', [Ref: Namespace, 'ec2-storage-gateway-role']]\n      Path: '/'\n      AssumeRolePolicyDocument:\n        Version: '2012-10-17'\n        Statement:\n          - Effect: 'Allow'\n            Principal:\n              Service:\n                - 'ec2.amazonaws.com'\n            Action:\n              - 'sts:AssumeRole'\n\n  InstanceProfile:\n    Type: 'AWS::IAM::InstanceProfile'\n    Properties:\n      InstanceProfileName: !Join ['-', [Ref: Namespace, 'ec2-storage-gateway-profile']]\n      Path: '/'\n      Roles:\n        - Ref: IAMRole\n\n  VPC:\n    Type: AWS::EC2::VPC\n    Properties:\n      CidrBlock: !Ref VpcCidr\n      EnableDnsSupport: true\n      EnableDnsHostnames: true\n      Tags:\n        - Key: Name\n          Value: !Sub ${Namespace} vpc\n\n  InternetGateway:\n    Type: AWS::EC2::InternetGateway\n    Properties:\n      Tags:\n        - Key: Name\n          Value: !Sub ${Namespace} igw\n\n  InternetGatewayAttachment:\n    Type: AWS::EC2::VPCGatewayAttachment\n    Properties:\n      InternetGatewayId: !Ref InternetGateway\n      VpcId: !Ref VPC\n\n  PublicSubnet1:\n    Type: AWS::EC2::Subnet\n    Properties:\n      VpcId: !Ref VPC\n      AvailabilityZone: !Select [0, !GetAZs ]\n      CidrBlock: !Ref VpcPublicSubnet1Cidr\n      MapPublicIpOnLaunch: true\n      Tags:\n        - Key: Name\n          Value: !Sub ${Namespace} public subnet 1\n\n  PublicRouteTable:\n    Type: AWS::EC2::RouteTable\n    Properties:\n      VpcId: !Ref VPC\n      Tags:\n        - Key: Name\n          Value: !Sub ${Namespace} public routes\n\n  DefaultPublicRoute:\n    Type: AWS::EC2::Route\n    DependsOn: InternetGatewayAttachment\n    Properties:\n      RouteTableId: !Ref PublicRouteTable\n      DestinationCidrBlock: 0.0.0.0/0\n      GatewayId: !Ref InternetGateway\n\n  PublicSubnet1RouteTableAssociation:\n    Type: AWS::EC2::SubnetRouteTableAssociation\n    Properties:\n      RouteTableId: !Ref PublicRouteTable\n      SubnetId: !Ref PublicSubnet1\n\n  SecurityGroup:\n    Type: 'AWS::EC2::SecurityGroup'\n    Properties:\n      GroupDescription: EC2 workspace security group\n      Tags:\n        - Key: Name\n          Value: !Join ['-', [Ref: Namespace, 'ec2-storage-gateway']]\n        - Key: Description\n          Value: EC2 workspace security group\n      VpcId: !Ref VPC\n      SecurityGroupEgress:\n        - IpProtocol: tcp\n          FromPort: 0\n          ToPort: 65535\n          CidrIp: 0.0.0.0/0\n\n  EC2Instance:\n    Type: 'AWS::EC2::Instance'\n    CreationPolicy:\n      ResourceSignal:\n        Timeout: 'PT20M'\n    Properties:\n      ImageId: !Ref AmiId\n      InstanceType: !Ref InstanceType\n      IamInstanceProfile: !Ref InstanceProfile\n      NetworkInterfaces:\n        - AssociatePublicIpAddress: 'true'\n          DeviceIndex: '0'\n          GroupSet:\n            - !Ref SecurityGroup\n          SubnetId: !Ref PublicSubnet1\n      Tags:\n        - Key: Name\n          Value: !Join ['-', [Ref: Namespace, 'ec2-storage-gateway-linux']]\n        - Key: Description\n          Value: EC2 workspace instance\n      UserData:\n        Fn::Base64: !Sub |\n          #!/usr/bin/env bash\n          # Signal result to CloudFormation\n          /opt/aws/bin/cfn-signal -e $? --stack \"${AWS::StackName}\" --resource \"EC2Instance\" --region \"${AWS::Region}\"\n\n  VolumeAttach:\n    Type: 'AWS::EC2::VolumeAttachment'\n    Properties:\n      Device: /dev/sdc\n      InstanceId: !Ref EC2Instance\n      VolumeId: !Ref CacheVolume\n\n  CacheVolume:\n    Type: 'AWS::EC2::Volume'\n    Properties:\n      AvailabilityZone: !GetAtt\n        - EC2Instance\n        - AvailabilityZone\n      Size: 150\n      VolumeType: gp2\n      Tags:\n        - Key: Name\n          Value: !Join ['-', [Ref: Namespace, 'ec2-storage-gateway-volume']]\n\n  ElasticIP:\n    Type: AWS::EC2::EIP\n    Properties:\n      InstanceId: !Ref EC2Instance\n\nOutputs:\n  VPC:\n    Description: VPC ID\n    Value: !Ref VPC\n\n  VpcPublicSubnet1:\n    Description: A reference to the public subnet in the 1st Availability Zone\n    Value: !Ref PublicSubnet1\n\n  EC2Instance:\n    Description: EC2 ID\n    Value: !Ref EC2Instance\n\n  ElasticIP:\n    Description: Elastic IP\n    Value: !Ref ElasticIP\n\n  CacheVolume:\n    Description: EC2 Volume\n    Value: !Ref CacheVolume\n\n  SecurityGroup:\n    Description: Security Group\n    Value: !Ref SecurityGroup\n\n  EC2RoleArn:\n    Description: EC2 Role Arn\n    Value: !GetAtt [IAMRole, Arn]\n\n  Region:\n    Description: AWS Region\n    Value: !Ref \"AWS::Region\"";

const add = (name, yaml) => ({
  name,
  yaml
}); // The order is important, add your templates here


const templates = [add('ec2-rstudio-instance', ec2RStudioInstance), add('ec2-linux-instance', ec2LinuxInstance), add('ec2-windows-instance', ec2WindowsInstance), add('sagemaker-notebook-instance', sagemakerInstance), add('emr-cluster', emrCluster), add('onboard-account', onboardAccount), add('storage-gateway-network-infra', storageGatewayNetworkInfra)];

async function registerCfnTemplates(registry) {
  // eslint-disable-next-line no-restricted-syntax
  for (const template of templates) {
    await registry.add(template); // eslint-disable-line no-await-in-loop
  }
}

module.exports = {
  registerCfnTemplates
};
//# sourceMappingURL=cfn-templates-plugin.js.map