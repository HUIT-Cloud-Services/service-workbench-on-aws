{
  "service": {
    "service": "va-swb-backend",
    "serviceObject": {
      "name": "va-swb-backend"
    },
    "provider": {
      "stage": "dev",
      "variableSyntax": "\\$\\{((((self|opt|deep|cf):)|file)((?!\\$\\{).)+?)}",
      "name": "aws",
      "runtime": "nodejs12.x",
      "region": "us-east-1",
      "profile": "galileo-common",
      "stackName": "e2etest-va-swb-backend",
      "deploymentBucket": "684277579687-e2etest-va-swb-artifacts",
      "stackTags": {
        "Name": "e2etest-va-swb-backend"
      },
      "versionFunctions": false,
      "logs": {
        "restApi": {
          "format": "{\"authorizer.principalId\":\"$context.authorizer.principalId\",\"error.message\":\"$context.error.message\",\"extendedRequestId\":\"$context.extendedRequestId\",\"httpMethod\":\"$context.httpMethod\",\"identity.sourceIp\":\"$context.identity.sourceIp\",\"integration.error\":\"$context.integration.error\",\"integration.integrationStatus\":\"$context.integration.integrationStatus\",\"integration.latency\":\"$context.integration.latency\",\"integration.requestId\":\"$context.integration.requestId\",\"integration.status\":\"$context.integration.status\",\"path\":\"$context.path\",\"requestId\":\"$context.requestId\",\"responseLatency\":\"$context.responseLatency\",\"responseLength\":\"$context.responseLength\",\"stage\":\"$context.stage\",\"status\":\"$context.status\"}",
          "executionLogging": false
        }
      },
      "environment": {
        "APP_ENV_TYPE": "e2eTest",
        "APP_ENV_NAME": "e2etest",
        "APP_AWS_REGION": "us-east-1",
        "APP_SOLUTION_NAME": "swb",
        "APP_DB_PREFIX": "e2etest-va-swb"
      },
      "deploymentBucketObject": {
        "name": "684277579687-e2etest-va-swb-artifacts",
        "serverSideEncryption": "AES256"
      },
      "remoteFunctionData": null,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "Service-Workbench-on-AWS 1.0.0 swb e2etest Backend",
        "Resources": {
          "AuthenticationLayerHandlerLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/va-swb-backend-e2etest-authenticationLayerHandler"
            }
          },
          "OpenDataScrapeHandlerLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/va-swb-backend-e2etest-openDataScrapeHandler"
            }
          },
          "EnvStatusPollHandlerLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/va-swb-backend-e2etest-envStatusPollHandler"
            }
          },
          "ApiHandlerLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/va-swb-backend-e2etest-apiHandler"
            }
          },
          "WorkflowLoopRunnerLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/va-swb-backend-e2etest-workflowLoopRunner"
            }
          },
          "AuthenticationLayerHandlerLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "684277579687-e2etest-va-swb-artifacts",
                "S3Key": "serverless/va-swb-backend/e2etest/1611872248807-2021-01-28T22:17:28.807Z/authenticationLayerHandler.zip"
              },
              "FunctionName": "va-swb-backend-e2etest-authenticationLayerHandler",
              "Handler": "src/lambdas/authentication-layer-handler/handler.handler",
              "MemorySize": 1024,
              "Role": {
                "Fn::GetAtt": [
                  "RoleAuthenticationLayerHandler",
                  "Arn"
                ]
              },
              "Runtime": "nodejs12.x",
              "Timeout": 6,
              "Description": "Handles the authentication layer for API handlers.",
              "Tags": [
                {
                  "Key": "Name",
                  "Value": "e2etest-va-swb-backend"
                }
              ],
              "Environment": {
                "Variables": {
                  "APP_ENV_TYPE": "e2eTest",
                  "APP_ENV_NAME": "e2etest",
                  "APP_AWS_REGION": "us-east-1",
                  "APP_SOLUTION_NAME": "swb",
                  "APP_DB_PREFIX": "e2etest-va-swb",
                  "APP_PARAM_STORE_JWT_SECRET": "/e2etest/swb/jwt/secret",
                  "APP_JWT_OPTIONS": "{\"algorithm\":\"HS256\",\"expiresIn\":\"2 days\"}"
                }
              }
            },
            "DependsOn": [
              "AuthenticationLayerHandlerLogGroup",
              "RoleAuthenticationLayerHandler"
            ]
          },
          "OpenDataScrapeHandlerLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "684277579687-e2etest-va-swb-artifacts",
                "S3Key": "serverless/va-swb-backend/e2etest/1611872248807-2021-01-28T22:17:28.807Z/openDataScrapeHandler.zip"
              },
              "FunctionName": "va-swb-backend-e2etest-openDataScrapeHandler",
              "Handler": "src/lambdas/open-data-scrape-handler/handler.handler",
              "MemorySize": 1024,
              "Role": {
                "Fn::GetAtt": [
                  "RoleOpenDataScrapeHandler",
                  "Arn"
                ]
              },
              "Runtime": "nodejs12.x",
              "Timeout": 6,
              "Description": "Handles scraping the metadata from the AWS open data registry.",
              "Tags": [
                {
                  "Key": "Name",
                  "Value": "e2etest-va-swb-backend"
                }
              ],
              "Environment": {
                "Variables": {
                  "APP_ENV_TYPE": "e2eTest",
                  "APP_ENV_NAME": "e2etest",
                  "APP_AWS_REGION": "us-east-1",
                  "APP_SOLUTION_NAME": "swb",
                  "APP_DB_PREFIX": "e2etest-va-swb",
                  "APP_DB_STUDIES_CATEGORY_INDEX": "CategoryIndex",
                  "APP_STUDY_DATA_BUCKET_NAME": "684277579687-e2etest-va-swb-studydata"
                }
              }
            },
            "DependsOn": [
              "OpenDataScrapeHandlerLogGroup",
              "RoleOpenDataScrapeHandler"
            ]
          },
          "EnvStatusPollHandlerLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "684277579687-e2etest-va-swb-artifacts",
                "S3Key": "serverless/va-swb-backend/e2etest/1611872248807-2021-01-28T22:17:28.807Z/envStatusPollHandler.zip"
              },
              "FunctionName": "va-swb-backend-e2etest-envStatusPollHandler",
              "Handler": "src/lambdas/env-status-poll-handler/handler.handler",
              "MemorySize": 1024,
              "Role": {
                "Fn::GetAtt": [
                  "RoleApiHandler",
                  "Arn"
                ]
              },
              "Runtime": "nodejs12.x",
              "Timeout": 900,
              "Description": "Handles status polling for sc environments",
              "Tags": [
                {
                  "Key": "Name",
                  "Value": "e2etest-va-swb-backend"
                }
              ],
              "Environment": {
                "Variables": {
                  "APP_ENV_TYPE": "e2eTest",
                  "APP_ENV_NAME": "e2etest",
                  "APP_AWS_REGION": "us-east-1",
                  "APP_SOLUTION_NAME": "swb",
                  "APP_DB_PREFIX": "e2etest-va-swb"
                }
              }
            },
            "DependsOn": [
              "EnvStatusPollHandlerLogGroup",
              "RoleApiHandler"
            ]
          },
          "ApiHandlerLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "684277579687-e2etest-va-swb-artifacts",
                "S3Key": "serverless/va-swb-backend/e2etest/1611872248807-2021-01-28T22:17:28.807Z/apiHandler.zip"
              },
              "FunctionName": "va-swb-backend-e2etest-apiHandler",
              "Handler": "src/lambdas/api-handler/handler.handler",
              "MemorySize": 1024,
              "Role": {
                "Fn::GetAtt": [
                  "RoleApiHandler",
                  "Arn"
                ]
              },
              "Runtime": "nodejs12.x",
              "Timeout": 6,
              "Description": "The API handler for all /api/* APIs",
              "Tags": [
                {
                  "Key": "Name",
                  "Value": "e2etest-va-swb-backend"
                }
              ],
              "Environment": {
                "Variables": {
                  "APP_ENV_TYPE": "e2eTest",
                  "APP_ENV_NAME": "e2etest",
                  "APP_AWS_REGION": "us-east-1",
                  "APP_SOLUTION_NAME": "swb",
                  "APP_DB_PREFIX": "e2etest-va-swb",
                  "APP_HOSTED_ZONE_ID": "NotSetAsCustomDomainDisabled",
                  "APP_DOMAIN_NAME": "",
                  "APP_WEBSITE_URL": "https://d1nzolgo88wuwt.cloudfront.net",
                  "APP_CORS_ALLOW_LIST": "[\"https://d1nzolgo88wuwt.cloudfront.net\"]",
                  "APP_CORS_ALLOW_LIST_LOCAL": "[\"http://localhost:3000\"]",
                  "APP_PARAM_STORE_JWT_SECRET": "/e2etest/swb/jwt/secret",
                  "APP_JWT_OPTIONS": "{\"algorithm\":\"HS256\",\"expiresIn\":\"2 days\"}",
                  "APP_SM_WORKFLOW": "arn:aws:states:us-east-1:684277579687:stateMachine:e2etest-va-swb-workflow",
                  "APP_PARAM_STORE_ROOT": "e2etest/swb",
                  "APP_EC2_RSTUDIO_AMI_PREFIX": "e2etest-va-swb-EC2-RSTUDIO-AMI",
                  "APP_EC2_LINUX_AMI_PREFIX": "e2etest-va-swb-EC2-LINUX-AMI",
                  "APP_EC2_WINDOWS_AMI_PREFIX": "e2etest-va-swb-EC2-WINDOWS-AMI",
                  "APP_EMR_AMI_PREFIX": "e2etest-va-swb-EMR-AMI",
                  "APP_DB_STUDIES_CATEGORY_INDEX": "CategoryIndex",
                  "APP_STUDY_DATA_BUCKET_NAME": "684277579687-e2etest-va-swb-studydata",
                  "APP_WORKFLOW_ROLE_ARN": "arn:aws:iam::684277579687:role/e2etest-va-swb-WorkflowLoopRunner",
                  "APP_API_HANDLER_ARN": "arn:aws:iam::684277579687:role/e2etest-va-swb-ApiHandler",
                  "APP_EXTERNAL_CFN_TEMPLATES_BUCKET_NAME": "684277579687-e2etest-va-swb-external-templates",
                  "APP_ENVIRONMENT_INSTANCE_FILES": "s3://684277579687-e2etest-va-swb-environments-bootstrap-scripts/environment-files",
                  "APP_STUDY_DATA_KMS_KEY_ALIAS": "684277579687-e2etest-va-swb/s3/studydata",
                  "APP_STUDY_DATA_KMS_KEY_ARN": "arn:aws:kms:us-east-1:684277579687:alias/684277579687-e2etest-va-swb/s3/studydata",
                  "APP_STUDY_DATA_KMS_POLICY_WORKSPACE_SID": "Allow workspace environments to retrieve S3 objects",
                  "APP_ENV_MGMT_ROLE_ARN": {
                    "Fn::Sub": "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/e2etest-va-swb-EnvMgmt"
                  },
                  "APP_LAUNCH_CONSTRAINT_ROLE_PREFIX": "e2etest-va-swb-*",
                  "APP_LAUNCH_CONSTRAINT_POLICY_PREFIX": "*",
                  "APP_ENV_TYPE_CONFIGS_BUCKET_NAME": "684277579687-e2etest-va-swb-env-type-configs"
                }
              }
            },
            "DependsOn": [
              "ApiHandlerLogGroup",
              "RoleApiHandler"
            ]
          },
          "WorkflowLoopRunnerLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "684277579687-e2etest-va-swb-artifacts",
                "S3Key": "serverless/va-swb-backend/e2etest/1611872248807-2021-01-28T22:17:28.807Z/workflowLoopRunner.zip"
              },
              "FunctionName": "va-swb-backend-e2etest-workflowLoopRunner",
              "Handler": "src/lambdas/workflow-loop-runner/handler.handler",
              "MemorySize": 1024,
              "Role": {
                "Fn::GetAtt": [
                  "RoleWorkflowLoopRunner",
                  "Arn"
                ]
              },
              "Runtime": "nodejs12.x",
              "Timeout": 900,
              "Description": "The workflow loop runner, it is expected to be invoked by AWS Step Functions and not directly",
              "Tags": [
                {
                  "Key": "Name",
                  "Value": "e2etest-va-swb-backend"
                }
              ],
              "Environment": {
                "Variables": {
                  "APP_ENV_TYPE": "e2eTest",
                  "APP_ENV_NAME": "e2etest",
                  "APP_AWS_REGION": "us-east-1",
                  "APP_SOLUTION_NAME": "swb",
                  "APP_DB_PREFIX": "e2etest-va-swb",
                  "APP_SM_WORKFLOW": "arn:aws:states:us-east-1:684277579687:stateMachine:e2etest-va-swb-workflow",
                  "APP_PARAM_STORE_ROOT": "e2etest/swb",
                  "APP_PARAM_STORE_JWT_SECRET": "/e2etest/swb/jwt/secret",
                  "APP_JWT_OPTIONS": "{\"algorithm\":\"HS256\",\"expiresIn\":\"2 days\"}",
                  "APP_DB_STUDIES_CATEGORY_INDEX": "CategoryIndex",
                  "APP_STUDY_DATA_BUCKET_NAME": "684277579687-e2etest-va-swb-studydata",
                  "APP_ARTIFACTS_BUCKET_NAME": "684277579687-e2etest-va-swb-artifacts",
                  "APP_ENVIRONMENT_INSTANCE_FILES": "s3://684277579687-e2etest-va-swb-environments-bootstrap-scripts/environment-files",
                  "APP_STUDY_DATA_KMS_KEY_ALIAS": "684277579687-e2etest-va-swb/s3/studydata",
                  "APP_STUDY_DATA_KMS_KEY_ARN": {
                    "Fn::Sub": "arn:aws:kms:${AWS::Region}:${AWS::AccountId}:alias/684277579687-e2etest-va-swb/s3/studydata"
                  },
                  "APP_STUDY_DATA_KMS_POLICY_WORKSPACE_SID": "Allow workspace environments to retrieve S3 objects",
                  "APP_ENV_MGMT_ROLE_ARN": {
                    "Fn::Sub": "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/e2etest-va-swb-EnvMgmt"
                  },
                  "APP_LAUNCH_CONSTRAINT_ROLE_PREFIX": "e2etest-va-swb-*",
                  "APP_LAUNCH_CONSTRAINT_POLICY_PREFIX": "*",
                  "APP_ENV_TYPE_CONFIGS_BUCKET_NAME": "684277579687-e2etest-va-swb-env-type-configs",
                  "APP_HOSTED_ZONE_ID": "NotSetAsCustomDomainDisabled",
                  "APP_DOMAIN_NAME": ""
                }
              }
            },
            "DependsOn": [
              "WorkflowLoopRunnerLogGroup",
              "RoleWorkflowLoopRunner"
            ]
          },
          "OpenDataScrapeHandlerEventsRuleSchedule1": {
            "Type": "AWS::Events::Rule",
            "Properties": {
              "ScheduleExpression": "rate(1 day)",
              "State": "ENABLED",
              "Description": "Invokes the lambda function that scrapes the awslabs/open-data-registry to find new studies and insert them into DynamoDB.",
              "Targets": [
                {
                  "Arn": {
                    "Fn::GetAtt": [
                      "OpenDataScrapeHandlerLambdaFunction",
                      "Arn"
                    ]
                  },
                  "Id": "openDataScrapeHandlerSchedule"
                }
              ]
            }
          },
          "OpenDataScrapeHandlerLambdaPermissionEventsRuleSchedule1": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "OpenDataScrapeHandlerLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "events.amazonaws.com",
              "SourceArn": {
                "Fn::GetAtt": [
                  "OpenDataScrapeHandlerEventsRuleSchedule1",
                  "Arn"
                ]
              }
            }
          },
          "EnvStatusPollHandlerEventsRuleSchedule1": {
            "Type": "AWS::Events::Rule",
            "Properties": {
              "ScheduleExpression": "rate(3 minutes)",
              "State": "ENABLED",
              "Description": "Invokes the lambda function that polls and synchronize environment status.",
              "Targets": [
                {
                  "Arn": {
                    "Fn::GetAtt": [
                      "EnvStatusPollHandlerLambdaFunction",
                      "Arn"
                    ]
                  },
                  "Id": "envStatusPollHandlerSchedule"
                }
              ]
            }
          },
          "EnvStatusPollHandlerLambdaPermissionEventsRuleSchedule1": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "EnvStatusPollHandlerLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "events.amazonaws.com",
              "SourceArn": {
                "Fn::GetAtt": [
                  "EnvStatusPollHandlerEventsRuleSchedule1",
                  "Arn"
                ]
              }
            }
          },
          "ApiGatewayRestApi": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
              "Name": "e2etest-va-swb-backend",
              "EndpointConfiguration": {
                "Types": [
                  "EDGE"
                ]
              },
              "Policy": ""
            }
          },
          "ApiGatewayResourceApi": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "api",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceApiAuthentication": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceApi"
              },
              "PathPart": "authentication",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceApiAuthenticationPublic": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceApiAuthentication"
              },
              "PathPart": "public",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceApiAuthenticationPublicProvider": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceApiAuthenticationPublic"
              },
              "PathPart": "provider",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceApiAuthenticationPublicProviderConfigs": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceApiAuthenticationPublicProvider"
              },
              "PathPart": "configs",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceApiAuthenticationIdDashtokens": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceApiAuthentication"
              },
              "PathPart": "id-tokens",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceApiProxyVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceApi"
              },
              "PathPart": "{proxy+}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodApiAuthenticationPublicProviderConfigsOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".*\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceApiAuthenticationPublicProviderConfigs"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodApiAuthenticationIdDashtokensOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".*\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceApiAuthenticationIdDashtokens"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodApiOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,DELETE,PUT,POST,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".*\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceApi"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodApiProxyVarOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,DELETE,PUT,POST,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".*\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceApiProxyVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodApiAuthenticationPublicProviderConfigsGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceApiAuthenticationPublicProviderConfigs"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "ApiHandlerLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodApiAuthenticationIdDashtokensPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceApiAuthenticationIdDashtokens"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "ApiHandlerLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodApiGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceApi"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "CUSTOM",
              "AuthorizerId": {
                "Ref": "AuthenticationLayerHandlerApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "ApiHandlerLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": "AuthenticationLayerHandlerApiGatewayAuthorizer"
          },
          "ApiGatewayMethodApiProxyVarGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceApiProxyVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "CUSTOM",
              "AuthorizerId": {
                "Ref": "AuthenticationLayerHandlerApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "ApiHandlerLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": "AuthenticationLayerHandlerApiGatewayAuthorizer"
          },
          "ApiGatewayMethodApiPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceApi"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "CUSTOM",
              "AuthorizerId": {
                "Ref": "AuthenticationLayerHandlerApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "ApiHandlerLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": "AuthenticationLayerHandlerApiGatewayAuthorizer"
          },
          "ApiGatewayMethodApiProxyVarPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceApiProxyVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "CUSTOM",
              "AuthorizerId": {
                "Ref": "AuthenticationLayerHandlerApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "ApiHandlerLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": "AuthenticationLayerHandlerApiGatewayAuthorizer"
          },
          "ApiGatewayMethodApiPut": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "PUT",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceApi"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "CUSTOM",
              "AuthorizerId": {
                "Ref": "AuthenticationLayerHandlerApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "ApiHandlerLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": "AuthenticationLayerHandlerApiGatewayAuthorizer"
          },
          "ApiGatewayMethodApiProxyVarPut": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "PUT",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceApiProxyVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "CUSTOM",
              "AuthorizerId": {
                "Ref": "AuthenticationLayerHandlerApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "ApiHandlerLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": "AuthenticationLayerHandlerApiGatewayAuthorizer"
          },
          "ApiGatewayMethodApiDelete": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "DELETE",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceApi"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "CUSTOM",
              "AuthorizerId": {
                "Ref": "AuthenticationLayerHandlerApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "ApiHandlerLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": "AuthenticationLayerHandlerApiGatewayAuthorizer"
          },
          "ApiGatewayMethodApiProxyVarDelete": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "DELETE",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceApiProxyVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "CUSTOM",
              "AuthorizerId": {
                "Ref": "AuthenticationLayerHandlerApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "ApiHandlerLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": "AuthenticationLayerHandlerApiGatewayAuthorizer"
          },
          "AuthenticationLayerHandlerApiGatewayAuthorizer": {
            "Type": "AWS::ApiGateway::Authorizer",
            "Properties": {
              "IdentitySource": "method.request.header.Authorization",
              "Name": "authenticationLayerHandler",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "AuthorizerUri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "AuthenticationLayerHandlerLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              },
              "Type": "TOKEN"
            }
          },
          "ApiGatewayDeployment1611872216743": {
            "Type": "AWS::ApiGateway::Deployment",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "StageName": "e2etest"
            },
            "DependsOn": [
              "ApiGatewayMethodApiAuthenticationPublicProviderConfigsOptions",
              "ApiGatewayMethodApiAuthenticationIdDashtokensOptions",
              "ApiGatewayMethodApiOptions",
              "ApiGatewayMethodApiProxyVarOptions",
              "ApiGatewayMethodApiAuthenticationPublicProviderConfigsGet",
              "ApiGatewayMethodApiAuthenticationIdDashtokensPost",
              "ApiGatewayMethodApiGet",
              "ApiGatewayMethodApiProxyVarGet",
              "ApiGatewayMethodApiPost",
              "ApiGatewayMethodApiProxyVarPost",
              "ApiGatewayMethodApiPut",
              "ApiGatewayMethodApiProxyVarPut",
              "ApiGatewayMethodApiDelete",
              "ApiGatewayMethodApiProxyVarDelete"
            ]
          },
          "ApiHandlerLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ApiHandlerLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "AuthenticationLayerHandlerLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "AuthenticationLayerHandlerLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "ApiGatewayLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/api-gateway/va-swb-backend-e2etest"
            }
          },
          "CustomApiGatewayAccountCloudWatchRole": {
            "Type": "Custom::ApiGatewayAccountRole",
            "Version": 1,
            "Properties": {
              "ServiceToken": {
                "Fn::GetAtt": [
                  "CustomDashresourceDashapigwDashcwDashroleLambdaFunction",
                  "Arn"
                ]
              }
            }
          },
          "IamRoleCustomResourcesLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "e2etest",
                        "va-swb-backend",
                        "custom-resources-lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Resource": {
                          "Fn::Join": [
                            ":",
                            [
                              "arn",
                              {
                                "Ref": "AWS::Partition"
                              },
                              "iam:",
                              {
                                "Ref": "AWS::AccountId"
                              },
                              "role/*"
                            ]
                          ]
                        },
                        "Action": [
                          "iam:AttachRolePolicy",
                          "iam:CreateRole",
                          "iam:ListAttachedRolePolicies",
                          "iam:PassRole"
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Resource": {
                          "Fn::Join": [
                            ":",
                            [
                              "arn",
                              {
                                "Ref": "AWS::Partition"
                              },
                              "apigateway:*::/account"
                            ]
                          ]
                        },
                        "Action": [
                          "apigateway:GET",
                          "apigateway:PATCH"
                        ]
                      }
                    ]
                  }
                }
              ]
            }
          },
          "CustomDashresourceDashapigwDashcwDashroleLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "684277579687-e2etest-va-swb-artifacts",
                "S3Key": "serverless/va-swb-backend/e2etest/1611872248807-2021-01-28T22:17:28.807Z/custom-resources.zip"
              },
              "FunctionName": "va-swb-backend-e2etest-custom-resource-apigw-cw-role",
              "Handler": "apiGatewayCloudWatchRole/handler.handler",
              "MemorySize": 1024,
              "Runtime": "nodejs12.x",
              "Timeout": 180,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleCustomResourcesLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "IamRoleCustomResourcesLambdaExecution"
            ]
          },
          "StudyDataBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketName": "684277579687-e2etest-va-swb-studydata",
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "aws:kms",
                      "KMSMasterKeyID": {
                        "Fn::GetAtt": [
                          "StudyDataEncryptionKey",
                          "Arn"
                        ]
                      }
                    }
                  }
                ]
              },
              "OwnershipControls": {
                "Rules": [
                  {
                    "ObjectOwnership": "BucketOwnerPreferred"
                  }
                ]
              },
              "LoggingConfiguration": {
                "DestinationBucketName": "684277579687-e2etest-va-swb-logging",
                "LogFilePrefix": "studydata/"
              },
              "VersioningConfiguration": {
                "Status": "Enabled"
              },
              "CorsConfiguration": {
                "CorsRules": [
                  {
                    "AllowedOrigins": [
                      "https://d1nzolgo88wuwt.cloudfront.net",
                      {
                        "Fn::If": [
                          "IsDev",
                          "http://localhost:3000",
                          {
                            "Ref": "AWS::NoValue"
                          }
                        ]
                      }
                    ],
                    "AllowedMethods": [
                      "POST"
                    ],
                    "ExposedHeaders": [
                      "ETag"
                    ]
                  }
                ]
              },
              "PublicAccessBlockConfiguration": {
                "BlockPublicAcls": true,
                "BlockPublicPolicy": true,
                "IgnorePublicAcls": true,
                "RestrictPublicBuckets": true
              }
            }
          },
          "StudyDataBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "StudyDataBucket"
              },
              "PolicyDocument": {
                "Version": "2012-10-17",
                "Id": "PutObjectPolicy",
                "Statement": [
                  {
                    "Sid": "Deny object uploads not using default encryption settings",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Action": "s3:PutObject",
                    "Resource": {
                      "Fn::Join": [
                        "/",
                        [
                          {
                            "Fn::GetAtt": [
                              "StudyDataBucket",
                              "Arn"
                            ]
                          },
                          "*"
                        ]
                      ]
                    },
                    "Condition": {
                      "Null": {
                        "s3:x-amz-server-side-encryption": false
                      },
                      "StringNotEqualsIfExists": {
                        "s3:x-amz-server-side-encryption": "aws:kms"
                      }
                    }
                  },
                  {
                    "Sid": "Deny object uploads not using default encryption settings",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Action": "s3:PutObject",
                    "Resource": {
                      "Fn::Join": [
                        "/",
                        [
                          {
                            "Fn::GetAtt": [
                              "StudyDataBucket",
                              "Arn"
                            ]
                          },
                          "*"
                        ]
                      ]
                    },
                    "Condition": {
                      "StringNotEquals": {
                        "s3:x-amz-server-side-encryption": "aws:kms"
                      },
                      "StringNotEqualsIfExists": {
                        "s3:x-amz-server-side-encryption-aws-kms-key-id": {
                          "Fn::GetAtt": [
                            "StudyDataEncryptionKey",
                            "Arn"
                          ]
                        }
                      }
                    }
                  },
                  {
                    "Sid": "Deny requests that do not use TLS",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Action": "s3:*",
                    "Resource": {
                      "Fn::Join": [
                        "/",
                        [
                          {
                            "Fn::GetAtt": [
                              "StudyDataBucket",
                              "Arn"
                            ]
                          },
                          "*"
                        ]
                      ]
                    },
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  },
                  {
                    "Sid": "Deny requests that do not use SigV4",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Action": "s3:*",
                    "Resource": {
                      "Fn::Join": [
                        "/",
                        [
                          {
                            "Fn::GetAtt": [
                              "StudyDataBucket",
                              "Arn"
                            ]
                          },
                          "*"
                        ]
                      ]
                    },
                    "Condition": {
                      "StringNotEquals": {
                        "s3:signatureversion": "AWS4-HMAC-SHA256"
                      }
                    }
                  }
                ]
              }
            }
          },
          "StudyDataEncryptionKey": {
            "Type": "AWS::KMS::Key",
            "Properties": {
              "Description": "Master key used to encrypt objects stored in the 684277579687-e2etest-va-swb-studydata bucket",
              "KeyPolicy": {
                "Version": "2012-10-17",
                "Id": "study-data-kms-policy",
                "Statement": [
                  {
                    "Sid": "Allow root",
                    "Effect": "Allow",
                    "Principal": {
                      "AWS": [
                        {
                          "Fn::Sub": "arn:aws:iam::${AWS::AccountId}:root"
                        }
                      ]
                    },
                    "Action": [
                      "kms:*"
                    ],
                    "Resource": "*"
                  },
                  {
                    "Sid": "Allow API access to create object and update policy for new workspaces",
                    "Effect": "Allow",
                    "Principal": {
                      "AWS": [
                        {
                          "Fn::GetAtt": [
                            "RoleApiHandler",
                            "Arn"
                          ]
                        }
                      ]
                    },
                    "Action": [
                      "kms:GenerateDataKey",
                      "kms:DescribeKey",
                      "kms:GetKeyPolicy",
                      "kms:PutKeyPolicy"
                    ],
                    "Resource": "*"
                  },
                  {
                    "Sid": "Allow workflows to update key policy for new workspaces",
                    "Effect": "Allow",
                    "Principal": {
                      "AWS": [
                        {
                          "Fn::GetAtt": [
                            "RoleWorkflowLoopRunner",
                            "Arn"
                          ]
                        }
                      ]
                    },
                    "Action": [
                      "kms:DescribeKey",
                      "kms:GetKeyPolicy",
                      "kms:PutKeyPolicy"
                    ],
                    "Resource": "*"
                  }
                ]
              }
            }
          },
          "StudyDataEncryptionKeyAlias": {
            "Type": "AWS::KMS::Alias",
            "Properties": {
              "AliasName": "alias/684277579687-e2etest-va-swb/s3/studydata",
              "TargetKeyId": {
                "Ref": "StudyDataEncryptionKey"
              }
            }
          },
          "ExternalCfnTemplatesBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketName": "684277579687-e2etest-va-swb-external-templates",
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              },
              "LoggingConfiguration": {
                "DestinationBucketName": "684277579687-e2etest-va-swb-logging",
                "LogFilePrefix": "external-cfn-templates/"
              },
              "PublicAccessBlockConfiguration": {
                "BlockPublicAcls": true,
                "BlockPublicPolicy": true,
                "IgnorePublicAcls": true,
                "RestrictPublicBuckets": true
              }
            }
          },
          "ExternalCfnTemplatesBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ExternalCfnTemplatesBucket"
              },
              "PolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Sid": "Deny requests that do not use TLS",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Action": "s3:*",
                    "Resource": {
                      "Fn::Join": [
                        "/",
                        [
                          {
                            "Fn::GetAtt": [
                              "ExternalCfnTemplatesBucket",
                              "Arn"
                            ]
                          },
                          "*"
                        ]
                      ]
                    },
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  },
                  {
                    "Sid": "Deny requests that do not use SigV4",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Action": "s3:*",
                    "Resource": {
                      "Fn::Join": [
                        "/",
                        [
                          {
                            "Fn::GetAtt": [
                              "ExternalCfnTemplatesBucket",
                              "Arn"
                            ]
                          },
                          "*"
                        ]
                      ]
                    },
                    "Condition": {
                      "StringNotEquals": {
                        "s3:signatureversion": "AWS4-HMAC-SHA256"
                      }
                    }
                  }
                ]
              }
            }
          },
          "EnvironmentsBootstrapBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketName": "684277579687-e2etest-va-swb-environments-bootstrap-scripts",
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              },
              "PublicAccessBlockConfiguration": {
                "BlockPublicAcls": true,
                "BlockPublicPolicy": true,
                "IgnorePublicAcls": true,
                "RestrictPublicBuckets": true
              }
            }
          },
          "EnvironmentsBootstrapBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "EnvironmentsBootstrapBucket"
              },
              "PolicyDocument": {
                "Version": "2012-10-17",
                "Id": "PutObjectPolicy",
                "Statement": [
                  {
                    "Sid": "Deny requests that do not use TLS",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Action": "s3:*",
                    "Resource": {
                      "Fn::Join": [
                        "/",
                        [
                          {
                            "Fn::GetAtt": [
                              "EnvironmentsBootstrapBucket",
                              "Arn"
                            ]
                          },
                          "*"
                        ]
                      ]
                    },
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  },
                  {
                    "Sid": "Deny requests that do not use SigV4",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Action": "s3:*",
                    "Resource": {
                      "Fn::Join": [
                        "/",
                        [
                          {
                            "Fn::GetAtt": [
                              "EnvironmentsBootstrapBucket",
                              "Arn"
                            ]
                          },
                          "*"
                        ]
                      ]
                    },
                    "Condition": {
                      "StringNotEquals": {
                        "s3:signatureversion": "AWS4-HMAC-SHA256"
                      }
                    }
                  }
                ]
              }
            }
          },
          "EnvTypeConfigsBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketName": "684277579687-e2etest-va-swb-env-type-configs",
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              },
              "PublicAccessBlockConfiguration": {
                "BlockPublicAcls": true,
                "BlockPublicPolicy": true,
                "IgnorePublicAcls": true,
                "RestrictPublicBuckets": true
              }
            }
          },
          "EnvTypeConfigsBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "EnvTypeConfigsBucket"
              },
              "PolicyDocument": {
                "Version": "2012-10-17",
                "Id": "PutObjectPolicy",
                "Statement": [
                  {
                    "Sid": "Deny requests that do not use TLS",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Action": "s3:*",
                    "Resource": {
                      "Fn::Join": [
                        "/",
                        [
                          {
                            "Fn::GetAtt": [
                              "EnvTypeConfigsBucket",
                              "Arn"
                            ]
                          },
                          "*"
                        ]
                      ]
                    },
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  },
                  {
                    "Sid": "Deny requests that do not use SigV4",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Action": "s3:*",
                    "Resource": {
                      "Fn::Join": [
                        "/",
                        [
                          {
                            "Fn::GetAtt": [
                              "EnvTypeConfigsBucket",
                              "Arn"
                            ]
                          },
                          "*"
                        ]
                      ]
                    },
                    "Condition": {
                      "StringNotEquals": {
                        "s3:signatureversion": "AWS4-HMAC-SHA256"
                      }
                    }
                  }
                ]
              }
            }
          },
          "RoleAuthenticationLayerHandler": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": "lambda.amazonaws.com"
                    },
                    "Action": "sts:AssumeRole"
                  }
                ]
              },
              "ManagedPolicyArns": [
                "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
              ],
              "Policies": [
                {
                  "PolicyName": "db-access",
                  "PolicyDocument": {
                    "Statement": {
                      "Effect": "Allow",
                      "Action": [
                        "dynamodb:DeleteItem",
                        "dynamodb:GetItem",
                        "dynamodb:PutItem",
                        "dynamodb:Query",
                        "dynamodb:Scan",
                        "dynamodb:UpdateItem"
                      ],
                      "Resource": [
                        {
                          "Fn::GetAtt": [
                            "PasswordsDb",
                            "Arn"
                          ]
                        },
                        {
                          "Fn::GetAtt": [
                            "UsersDb",
                            "Arn"
                          ]
                        },
                        {
                          "Fn::Sub": "${UsersDb.Arn}/index/*"
                        },
                        {
                          "Fn::GetAtt": [
                            "AuthenticationProviderTypesDb",
                            "Arn"
                          ]
                        },
                        {
                          "Fn::GetAtt": [
                            "AuthenticationProviderConfigsDb",
                            "Arn"
                          ]
                        },
                        {
                          "Fn::GetAtt": [
                            "RevokedTokensDb",
                            "Arn"
                          ]
                        },
                        {
                          "Fn::GetAtt": [
                            "UserRolesDb",
                            "Arn"
                          ]
                        }
                      ]
                    }
                  }
                },
                {
                  "PolicyName": "param-store-access",
                  "PolicyDocument": {
                    "Statement": {
                      "Effect": "Allow",
                      "Action": [
                        "ssm:GetParameter"
                      ],
                      "Resource": {
                        "Fn::Sub": "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/e2etest/swb/*"
                      }
                    }
                  }
                }
              ]
            }
          },
          "RoleApiHandler": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "RoleName": "e2etest-va-swb-ApiHandler",
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": "lambda.amazonaws.com"
                    },
                    "Action": "sts:AssumeRole"
                  }
                ]
              },
              "ManagedPolicyArns": [
                "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
              ],
              "Policies": [
                {
                  "PolicyName": "db-access",
                  "PolicyDocument": {
                    "Statement": {
                      "Effect": "Allow",
                      "Action": [
                        "dynamodb:DeleteItem",
                        "dynamodb:GetItem",
                        "dynamodb:BatchGetItem",
                        "dynamodb:PutItem",
                        "dynamodb:Query",
                        "dynamodb:Scan",
                        "dynamodb:UpdateItem"
                      ],
                      "Resource": [
                        {
                          "Fn::GetAtt": [
                            "AuthenticationProviderTypesDb",
                            "Arn"
                          ]
                        },
                        {
                          "Fn::GetAtt": [
                            "AuthenticationProviderConfigsDb",
                            "Arn"
                          ]
                        },
                        {
                          "Fn::GetAtt": [
                            "RevokedTokensDb",
                            "Arn"
                          ]
                        },
                        {
                          "Fn::GetAtt": [
                            "UsersDb",
                            "Arn"
                          ]
                        },
                        {
                          "Fn::Sub": "${UsersDb.Arn}/index/*"
                        },
                        {
                          "Fn::GetAtt": [
                            "PasswordsDb",
                            "Arn"
                          ]
                        },
                        {
                          "Fn::GetAtt": [
                            "LocksDb",
                            "Arn"
                          ]
                        },
                        {
                          "Fn::GetAtt": [
                            "StudiesDb",
                            "Arn"
                          ]
                        },
                        {
                          "Fn::GetAtt": [
                            "StudyPermissionsDb",
                            "Arn"
                          ]
                        },
                        {
                          "Fn::Join": [
                            "",
                            [
                              {
                                "Fn::GetAtt": [
                                  "StudiesDb",
                                  "Arn"
                                ]
                              },
                              "/index/*"
                            ]
                          ]
                        },
                        {
                          "Fn::GetAtt": [
                            "StepTemplatesDb",
                            "Arn"
                          ]
                        },
                        {
                          "Fn::GetAtt": [
                            "WorkflowTemplatesDb",
                            "Arn"
                          ]
                        },
                        {
                          "Fn::GetAtt": [
                            "WorkflowTemplateDraftsDb",
                            "Arn"
                          ]
                        },
                        {
                          "Fn::Join": [
                            "",
                            [
                              {
                                "Fn::GetAtt": [
                                  "WorkflowTemplateDraftsDb",
                                  "Arn"
                                ]
                              },
                              "/index/*"
                            ]
                          ]
                        },
                        {
                          "Fn::GetAtt": [
                            "WorkflowsDb",
                            "Arn"
                          ]
                        },
                        {
                          "Fn::GetAtt": [
                            "WorkflowDraftsDb",
                            "Arn"
                          ]
                        },
                        {
                          "Fn::Join": [
                            "",
                            [
                              {
                                "Fn::GetAtt": [
                                  "WorkflowDraftsDb",
                                  "Arn"
                                ]
                              },
                              "/index/*"
                            ]
                          ]
                        },
                        {
                          "Fn::GetAtt": [
                            "WorkflowInstancesDb",
                            "Arn"
                          ]
                        },
                        {
                          "Fn::Join": [
                            "",
                            [
                              {
                                "Fn::GetAtt": [
                                  "WorkflowInstancesDb",
                                  "Arn"
                                ]
                              },
                              "/index/*"
                            ]
                          ]
                        },
                        {
                          "Fn::GetAtt": [
                            "WfAssignmentsDb",
                            "Arn"
                          ]
                        },
                        {
                          "Fn::Join": [
                            "",
                            [
                              {
                                "Fn::GetAtt": [
                                  "WfAssignmentsDb",
                                  "Arn"
                                ]
                              },
                              "/index/*"
                            ]
                          ]
                        },
                        {
                          "Fn::GetAtt": [
                            "StudiesDb",
                            "Arn"
                          ]
                        },
                        {
                          "Fn::GetAtt": [
                            "StudyPermissionsDb",
                            "Arn"
                          ]
                        },
                        {
                          "Fn::Join": [
                            "",
                            [
                              {
                                "Fn::GetAtt": [
                                  "StudiesDb",
                                  "Arn"
                                ]
                              },
                              "/index/*"
                            ]
                          ]
                        },
                        {
                          "Fn::GetAtt": [
                            "EnvironmentsDb",
                            "Arn"
                          ]
                        },
                        {
                          "Fn::GetAtt": [
                            "EnvironmentsScDb",
                            "Arn"
                          ]
                        },
                        {
                          "Fn::Join": [
                            "",
                            [
                              {
                                "Fn::GetAtt": [
                                  "EnvironmentsScDb",
                                  "Arn"
                                ]
                              },
                              "/index/*"
                            ]
                          ]
                        },
                        {
                          "Fn::GetAtt": [
                            "EnvironmentsTypesDb",
                            "Arn"
                          ]
                        },
                        {
                          "Fn::GetAtt": [
                            "UserRolesDb",
                            "Arn"
                          ]
                        },
                        {
                          "Fn::GetAtt": [
                            "AwsAccountsDb",
                            "Arn"
                          ]
                        },
                        {
                          "Fn::GetAtt": [
                            "IndexesDb",
                            "Arn"
                          ]
                        },
                        {
                          "Fn::GetAtt": [
                            "CostApiCachesDb",
                            "Arn"
                          ]
                        },
                        {
                          "Fn::GetAtt": [
                            "ProjectsDb",
                            "Arn"
                          ]
                        },
                        {
                          "Fn::GetAtt": [
                            "AccountsDb",
                            "Arn"
                          ]
                        },
                        {
                          "Fn::GetAtt": [
                            "KeyPairsDb",
                            "Arn"
                          ]
                        },
                        {
                          "Fn::Join": [
                            "",
                            [
                              {
                                "Fn::GetAtt": [
                                  "KeyPairsDb",
                                  "Arn"
                                ]
                              },
                              "/index/*"
                            ]
                          ]
                        },
                        {
                          "Fn::GetAtt": [
                            "StorageGatewayDb",
                            "Arn"
                          ]
                        }
                      ]
                    }
                  }
                },
                {
                  "PolicyName": "param-store-access",
                  "PolicyDocument": {
                    "Statement": {
                      "Effect": "Allow",
                      "Action": [
                        "ssm:GetParameter"
                      ],
                      "Resource": [
                        {
                          "Fn::Sub": "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/e2etest/swb/*"
                        },
                        {
                          "Fn::Sub": "arn:aws:ssm:${AWS::Region}:*:parameter/aws/service/storagegateway/ami/FILE_S3/latest"
                        }
                      ]
                    }
                  }
                },
                {
                  "PolicyName": "storage-gateway-access",
                  "PolicyDocument": {
                    "Statement": {
                      "Effect": "Allow",
                      "Action": [
                        "storagegateway:CreateNFSFileShare",
                        "storagegateway:ListFileShares",
                        "storagegateway:DescribeNFSFileShares",
                        "storagegateway:UpdateNFSFileShare"
                      ],
                      "Resource": "*"
                    }
                  }
                },
                {
                  "PolicyName": "iam-pass-role",
                  "PolicyDocument": {
                    "Statement": {
                      "Effect": "Allow",
                      "Action": [
                        "iam:PassRole"
                      ],
                      "Resource": "*"
                    }
                  }
                },
                {
                  "PolicyName": "step-functions-invocation",
                  "PolicyDocument": {
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "states:StartExecution"
                        ],
                        "Resource": [
                          {
                            "Ref": "SMWorkflow"
                          }
                        ]
                      }
                    ]
                  }
                },
                {
                  "PolicyName": "s3-access",
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "s3:*"
                        ],
                        "Resource": [
                          "arn:aws:s3:::684277579687-e2etest-va-swb-studydata/*"
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "s3:ListBucket"
                        ],
                        "Resource": [
                          "arn:aws:s3:::684277579687-e2etest-va-swb-studydata"
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "kms:GenerateDataKey"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:aws:kms:${AWS::Region}:${AWS::AccountId}:alias/684277579687-e2etest-va-swb/s3/studydata"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "s3:*"
                        ],
                        "Resource": [
                          "arn:aws:s3:::684277579687-e2etest-va-swb-external-templates/*"
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "s3:GetBucketPolicy",
                          "s3:PutBucketPolicy"
                        ],
                        "Resource": [
                          "arn:aws:s3:::684277579687-e2etest-va-swb-environments-bootstrap-scripts",
                          "arn:aws:s3:::684277579687-e2etest-va-swb-studydata"
                        ]
                      }
                    ]
                  }
                },
                {
                  "PolicyName": "env-type-configs-s3-access",
                  "PolicyDocument": {
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "s3:GetObject",
                          "s3:PutObject",
                          "s3:DeleteObject"
                        ],
                        "Resource": [
                          "arn:aws:s3:::684277579687-e2etest-va-swb-env-type-configs/*"
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "s3:ListBucket",
                          "s3:HeadBucket"
                        ],
                        "Resource": [
                          "arn:aws:s3:::684277579687-e2etest-va-swb-env-type-configs"
                        ]
                      }
                    ]
                  }
                },
                {
                  "PolicyName": "sagemaker-access",
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "sagemaker:CreatePresignedNotebookInstanceUrl"
                        ],
                        "Resource": [
                          "*"
                        ]
                      }
                    ]
                  }
                },
                {
                  "PolicyName": "ec2-access",
                  "PolicyDocument": {
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "ec2:*"
                        ],
                        "Resource": "*"
                      }
                    ]
                  }
                },
                {
                  "PolicyName": "cost-explorer",
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "ce:*"
                        ],
                        "Resource": "*"
                      }
                    ]
                  }
                },
                {
                  "PolicyName": "assume-role",
                  "PolicyDocument": {
                    "Statement": {
                      "Action": [
                        "sts:AssumeRole",
                        "sts:GetCallerIdentity"
                      ],
                      "Effect": "Allow",
                      "Resource": "*"
                    }
                  }
                },
                {
                  "PolicyName": "study-kms-policy-update",
                  "PolicyDocument": {
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "kms:DescribeKey",
                          "kms:GetKeyPolicy",
                          "kms:PutKeyPolicy"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:aws:kms:${AWS::Region}:${AWS::AccountId}:alias/684277579687-e2etest-va-swb/s3/studydata"
                          }
                        ]
                      }
                    ]
                  }
                }
              ]
            }
          },
          "RoleWorkflowLoopRunner": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "RoleName": "e2etest-va-swb-WorkflowLoopRunner",
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": "lambda.amazonaws.com"
                    },
                    "Action": "sts:AssumeRole"
                  }
                ]
              },
              "ManagedPolicyArns": [
                "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
              ],
              "Policies": [
                {
                  "PolicyName": "db-access",
                  "PolicyDocument": {
                    "Statement": {
                      "Effect": "Allow",
                      "Action": [
                        "dynamodb:DeleteItem",
                        "dynamodb:GetItem",
                        "dynamodb:BatchGetItem",
                        "dynamodb:PutItem",
                        "dynamodb:Query",
                        "dynamodb:Scan",
                        "dynamodb:UpdateItem"
                      ],
                      "Resource": [
                        {
                          "Fn::GetAtt": [
                            "PasswordsDb",
                            "Arn"
                          ]
                        },
                        {
                          "Fn::GetAtt": [
                            "UsersDb",
                            "Arn"
                          ]
                        },
                        {
                          "Fn::GetAtt": [
                            "LocksDb",
                            "Arn"
                          ]
                        },
                        {
                          "Fn::GetAtt": [
                            "StepTemplatesDb",
                            "Arn"
                          ]
                        },
                        {
                          "Fn::GetAtt": [
                            "WorkflowTemplatesDb",
                            "Arn"
                          ]
                        },
                        {
                          "Fn::GetAtt": [
                            "WorkflowTemplateDraftsDb",
                            "Arn"
                          ]
                        },
                        {
                          "Fn::Join": [
                            "",
                            [
                              {
                                "Fn::GetAtt": [
                                  "WorkflowTemplateDraftsDb",
                                  "Arn"
                                ]
                              },
                              "/index/*"
                            ]
                          ]
                        },
                        {
                          "Fn::GetAtt": [
                            "WorkflowsDb",
                            "Arn"
                          ]
                        },
                        {
                          "Fn::GetAtt": [
                            "WorkflowDraftsDb",
                            "Arn"
                          ]
                        },
                        {
                          "Fn::Join": [
                            "",
                            [
                              {
                                "Fn::GetAtt": [
                                  "WorkflowDraftsDb",
                                  "Arn"
                                ]
                              },
                              "/index/*"
                            ]
                          ]
                        },
                        {
                          "Fn::GetAtt": [
                            "WorkflowInstancesDb",
                            "Arn"
                          ]
                        },
                        {
                          "Fn::Join": [
                            "",
                            [
                              {
                                "Fn::GetAtt": [
                                  "WorkflowInstancesDb",
                                  "Arn"
                                ]
                              },
                              "/index/*"
                            ]
                          ]
                        },
                        {
                          "Fn::GetAtt": [
                            "WfAssignmentsDb",
                            "Arn"
                          ]
                        },
                        {
                          "Fn::Join": [
                            "",
                            [
                              {
                                "Fn::GetAtt": [
                                  "WfAssignmentsDb",
                                  "Arn"
                                ]
                              },
                              "/index/*"
                            ]
                          ]
                        },
                        {
                          "Fn::GetAtt": [
                            "EnvironmentsDb",
                            "Arn"
                          ]
                        },
                        {
                          "Fn::GetAtt": [
                            "EnvironmentsScDb",
                            "Arn"
                          ]
                        },
                        {
                          "Fn::Join": [
                            "",
                            [
                              {
                                "Fn::GetAtt": [
                                  "EnvironmentsScDb",
                                  "Arn"
                                ]
                              },
                              "/index/*"
                            ]
                          ]
                        },
                        {
                          "Fn::GetAtt": [
                            "EnvironmentsTypesDb",
                            "Arn"
                          ]
                        },
                        {
                          "Fn::GetAtt": [
                            "StudiesDb",
                            "Arn"
                          ]
                        },
                        {
                          "Fn::GetAtt": [
                            "ProjectsDb",
                            "Arn"
                          ]
                        },
                        {
                          "Fn::GetAtt": [
                            "StudyPermissionsDb",
                            "Arn"
                          ]
                        },
                        {
                          "Fn::GetAtt": [
                            "IndexesDb",
                            "Arn"
                          ]
                        },
                        {
                          "Fn::GetAtt": [
                            "ProjectsDb",
                            "Arn"
                          ]
                        },
                        {
                          "Fn::GetAtt": [
                            "AccountsDb",
                            "Arn"
                          ]
                        },
                        {
                          "Fn::GetAtt": [
                            "AwsAccountsDb",
                            "Arn"
                          ]
                        },
                        {
                          "Fn::GetAtt": [
                            "AuthenticationProviderTypesDb",
                            "Arn"
                          ]
                        },
                        {
                          "Fn::GetAtt": [
                            "AuthenticationProviderConfigsDb",
                            "Arn"
                          ]
                        },
                        {
                          "Fn::GetAtt": [
                            "RevokedTokensDb",
                            "Arn"
                          ]
                        },
                        {
                          "Fn::Join": [
                            "",
                            [
                              {
                                "Fn::GetAtt": [
                                  "StudiesDb",
                                  "Arn"
                                ]
                              },
                              "/index/*"
                            ]
                          ]
                        },
                        {
                          "Fn::GetAtt": [
                            "IndexesDb",
                            "Arn"
                          ]
                        },
                        {
                          "Fn::GetAtt": [
                            "CostApiCachesDb",
                            "Arn"
                          ]
                        },
                        {
                          "Fn::GetAtt": [
                            "UserRolesDb",
                            "Arn"
                          ]
                        },
                        {
                          "Fn::GetAtt": [
                            "StorageGatewayDb",
                            "Arn"
                          ]
                        }
                      ]
                    }
                  }
                },
                {
                  "PolicyName": "param-store-access",
                  "PolicyDocument": {
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "ssm:GetParameter"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/e2etest/swb/*"
                          },
                          {
                            "Fn::Sub": "arn:aws:ssm:${AWS::Region}:*:parameter/aws/service/storagegateway/ami/FILE_S3/latest"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "ssm:PutParameter",
                          "ssm:DeleteParameter"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/e2etest/swb/*"
                          }
                        ]
                      }
                    ]
                  }
                },
                {
                  "PolicyName": "dns-record-access",
                  "PolicyDocument": {
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "route53:ChangeResourceRecordSets"
                        ],
                        "Resource": "arn:aws:route53:::hostedzone/NotSetAsCustomDomainDisabled"
                      }
                    ]
                  }
                },
                {
                  "PolicyName": "ec2-access",
                  "PolicyDocument": {
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "ec2:*"
                        ],
                        "Resource": "*"
                      }
                    ]
                  }
                },
                {
                  "PolicyName": "storage-gateway",
                  "PolicyDocument": {
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "storagegateway:ActivateGateway",
                          "storagegateway:ListLocalDisks",
                          "storagegateway:AddCache",
                          "storagegateway:DeleteGateway",
                          "storagegateway:CreateNFSFileShare",
                          "storagegateway:ListFileShares",
                          "storagegateway:DescribeNFSFileShares",
                          "storagegateway:UpdateNFSFileShare"
                        ],
                        "Resource": "*"
                      }
                    ]
                  }
                },
                {
                  "PolicyName": "study-s3-policy-update",
                  "PolicyDocument": {
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "s3:GetBucketPolicy",
                          "s3:PutBucketPolicy"
                        ],
                        "Resource": [
                          "arn:aws:s3:::684277579687-e2etest-va-swb-studydata",
                          "arn:aws:s3:::684277579687-e2etest-va-swb-artifacts",
                          "arn:aws:s3:::684277579687-e2etest-va-swb-environments-bootstrap-scripts"
                        ]
                      }
                    ]
                  }
                },
                {
                  "PolicyName": "study-kms-policy-update",
                  "PolicyDocument": {
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "kms:DescribeKey",
                          "kms:GetKeyPolicy",
                          "kms:PutKeyPolicy"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:aws:kms:${AWS::Region}:${AWS::AccountId}:alias/684277579687-e2etest-va-swb/s3/studydata"
                          }
                        ]
                      }
                    ]
                  }
                },
                {
                  "PolicyName": "cfn-access",
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "cloudformation:CreateStack",
                          "cloudformation:DeleteStack",
                          "cloudformation:DescribeStacks"
                        ],
                        "Resource": "*"
                      }
                    ]
                  }
                },
                {
                  "PolicyName": "assume-role",
                  "PolicyDocument": {
                    "Statement": {
                      "Action": "sts:AssumeRole",
                      "Effect": "Allow",
                      "Resource": "*"
                    }
                  }
                },
                {
                  "PolicyName": "env-type-configs-s3-access",
                  "PolicyDocument": {
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "s3:GetObject",
                          "s3:PutObject",
                          "s3:DeleteObject"
                        ],
                        "Resource": [
                          "arn:aws:s3:::684277579687-e2etest-va-swb-env-type-configs/*"
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "s3:ListBucket",
                          "s3:HeadBucket"
                        ],
                        "Resource": [
                          "arn:aws:s3:::684277579687-e2etest-va-swb-env-type-configs"
                        ]
                      }
                    ]
                  }
                }
              ]
            }
          },
          "RoleStepFunctionsWorkflow": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": {
                        "Fn::Sub": "states.${AWS::Region}.amazonaws.com"
                      }
                    },
                    "Action": "sts:AssumeRole"
                  }
                ]
              },
              "ManagedPolicyArns": [
                "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
              ],
              "Policies": [
                {
                  "PolicyName": "lambda",
                  "PolicyDocument": {
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": "lambda:InvokeFunction",
                        "Resource": [
                          {
                            "Fn::GetAtt": [
                              "WorkflowLoopRunnerLambdaFunction",
                              "Arn"
                            ]
                          }
                        ]
                      }
                    ]
                  }
                }
              ]
            }
          },
          "RoleOpenDataScrapeHandler": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": "lambda.amazonaws.com"
                    },
                    "Action": "sts:AssumeRole"
                  }
                ]
              },
              "ManagedPolicyArns": [
                "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
              ],
              "Policies": [
                {
                  "PolicyName": "db-access",
                  "PolicyDocument": {
                    "Statement": {
                      "Effect": "Allow",
                      "Action": [
                        "dynamodb:DeleteItem",
                        "dynamodb:GetItem",
                        "dynamodb:PutItem",
                        "dynamodb:Query",
                        "dynamodb:Scan",
                        "dynamodb:UpdateItem"
                      ],
                      "Resource": [
                        {
                          "Fn::GetAtt": [
                            "StudiesDb",
                            "Arn"
                          ]
                        }
                      ]
                    }
                  }
                }
              ]
            }
          },
          "RoleEnvStatusPollHandler": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": "lambda.amazonaws.com"
                    },
                    "Action": "sts:AssumeRole"
                  }
                ]
              },
              "ManagedPolicyArns": [
                "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
              ],
              "Policies": [
                {
                  "PolicyName": "db-environment-access",
                  "PolicyDocument": {
                    "Statement": {
                      "Effect": "Allow",
                      "Action": [
                        "dynamodb:GetItem",
                        "dynamodb:Query",
                        "dynamodb:Scan",
                        "dynamodb:UpdateItem"
                      ],
                      "Resource": [
                        {
                          "Fn::GetAtt": [
                            "EnvironmentsScDb",
                            "Arn"
                          ]
                        },
                        {
                          "Fn::Join": [
                            "",
                            [
                              {
                                "Fn::GetAtt": [
                                  "EnvironmentsScDb",
                                  "Arn"
                                ]
                              },
                              "/index/*"
                            ]
                          ]
                        }
                      ]
                    }
                  }
                },
                {
                  "PolicyName": "db-scan",
                  "PolicyDocument": {
                    "Statement": {
                      "Effect": "Allow",
                      "Action": [
                        "dynamodb:Scan"
                      ],
                      "Resource": [
                        {
                          "Fn::GetAtt": [
                            "IndexesDb",
                            "Arn"
                          ]
                        },
                        {
                          "Fn::GetAtt": [
                            "ProjectsDb",
                            "Arn"
                          ]
                        },
                        {
                          "Fn::GetAtt": [
                            "AwsAccountsDb",
                            "Arn"
                          ]
                        }
                      ]
                    }
                  }
                },
                {
                  "PolicyName": "assume-role",
                  "PolicyDocument": {
                    "Statement": {
                      "Action": "sts:AssumeRole",
                      "Effect": "Allow",
                      "Resource": "*"
                    }
                  }
                }
              ]
            }
          },
          "RoleEnvMgmt": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "RoleName": "e2etest-va-swb-EnvMgmt",
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "AWS": {
                        "Fn::Sub": "${AWS::AccountId}"
                      }
                    },
                    "Action": "sts:AssumeRole"
                  }
                ]
              },
              "ManagedPolicyArns": [
                "arn:aws:iam::aws:policy/AWSServiceCatalogAdminFullAccess"
              ],
              "Policies": [
                {
                  "PolicyName": "ec2-access",
                  "PolicyDocument": {
                    "Statement": {
                      "Action": [
                        "ec2:CreateKeyPair",
                        "ec2:DeleteKeyPair",
                        "ec2:GetPasswordData",
                        "ec2:ModifyImageAttribute",
                        "ec2:DescribeImages",
                        "ec2:DescribeInstances",
                        "ec2-instance-connect:SendSSHPublicKey"
                      ],
                      "Effect": "Allow",
                      "Resource": "*"
                    }
                  }
                },
                {
                  "PolicyName": "param-store-access",
                  "PolicyDocument": {
                    "Statement": {
                      "Effect": "Allow",
                      "Action": [
                        "ssm:PutParameter",
                        "ssm:GetParameter",
                        "ssm:GetParameters",
                        "ssm:DeleteParameter"
                      ],
                      "Resource": {
                        "Fn::Sub": "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/e2etest/swb/*"
                      }
                    }
                  }
                },
                {
                  "PolicyName": "cfn-read-access",
                  "PolicyDocument": {
                    "Statement": {
                      "Effect": "Allow",
                      "Action": [
                        "s3:GetObject"
                      ],
                      "Resource": [
                        "*"
                      ]
                    }
                  }
                },
                {
                  "PolicyName": "iam-role-access",
                  "PolicyDocument": {
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "iam:GetRole",
                          "iam:CreateRole",
                          "iam:TagRole",
                          "iam:GetRolePolicy",
                          "iam:PutRolePolicy",
                          "iam:DeleteRolePolicy",
                          "iam:ListRolePolicies",
                          "iam:ListAttachedRolePolicies",
                          "iam:UpdateAssumeRolePolicy",
                          "iam:UpdateRoleDescription",
                          "iam:AttachRolePolicy",
                          "iam:DetachRolePolicy"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/e2etest-va-swb-*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "iam:CreatePolicy",
                          "iam:GetPolicy",
                          "iam:GetPolicyVersion",
                          "iam:ListPolicyVersions",
                          "iam:DeletePolicy",
                          "iam:DeletePolicyVersion"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:iam::${AWS::AccountId}:policy/*"
                          }
                        ]
                      }
                    ]
                  }
                }
              ]
            }
          },
          "SMWorkflow": {
            "Type": "AWS::StepFunctions::StateMachine",
            "Properties": {
              "StateMachineName": "e2etest-va-swb-workflow",
              "DefinitionString": {
                "Fn::Sub": "{\n  \"Comment\": \"Workflow State Machine\",\n  \"StartAt\": \"WorkflowLoopRunner\",\n  \"Version\": \"1.0\",\n  \"States\": {\n    \"WorkflowLoopRunner\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"${WorkflowLoopRunnerLambdaFunction.Arn}\",\n      \"ResultPath\": \"$.loop\",\n      \"Next\": \"MakeAChoice\",\n      \"Catch\": [{\n        \"ErrorEquals\": [\"States.ALL\"],\n        \"ResultPath\": \"$.error\",\n        \"Next\": \"Failed\"\n      }]\n    },\n    \"MakeAChoice\": {\n      \"Type\": \"Choice\",\n      \"Choices\": [{\n        \"Variable\": \"$.loop.shouldWait\",\n        \"NumericEquals\": 1,\n        \"Next\": \"LetsWait\"\n      }, {\n        \"Variable\": \"$.loop.shouldLoop\",\n        \"NumericEquals\": 1,\n        \"Next\": \"WorkflowLoopRunner\"\n      }, {\n        \"Variable\": \"$.loop.shouldPass\",\n        \"NumericEquals\": 1,\n        \"Next\": \"Passed\"\n      }, {\n        \"Variable\": \"$.loop.shouldFail\",\n        \"NumericEquals\": 1,\n        \"Next\": \"Failed\"\n      }],\n      \"Default\": \"Failed\"\n    },\n    \"LetsWait\": {\n      \"Type\": \"Wait\",\n      \"SecondsPath\": \"$.loop.wait\",\n      \"Next\": \"WorkflowLoopRunner\"\n    },\n    \"Passed\": {\n      \"Type\": \"Pass\",\n      \"End\": true\n    },\n    \"Failed\": {\n      \"Type\": \"Fail\"\n    }\n  }\n}\n"
              },
              "RoleArn": {
                "Fn::GetAtt": [
                  "RoleStepFunctionsWorkflow",
                  "Arn"
                ]
              }
            }
          },
          "PasswordsDb": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "e2etest-va-swb-Passwords",
              "AttributeDefinitions": [
                {
                  "AttributeName": "username",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "username",
                  "KeyType": "HASH"
                }
              ],
              "BillingMode": "PAY_PER_REQUEST"
            }
          },
          "UserApiKeysDb": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "e2etest-va-swb-UserApiKeys",
              "AttributeDefinitions": [
                {
                  "AttributeName": "id",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "uid",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "id",
                  "KeyType": "HASH"
                }
              ],
              "BillingMode": "PAY_PER_REQUEST",
              "GlobalSecondaryIndexes": [
                {
                  "IndexName": "ByUID",
                  "KeySchema": [
                    {
                      "AttributeName": "uid",
                      "KeyType": "HASH"
                    }
                  ],
                  "Projection": {
                    "ProjectionType": "ALL"
                  }
                }
              ]
            }
          },
          "UsersDb": {
            "Type": "AWS::DynamoDB::Table",
            "DependsOn": "PasswordsDb",
            "Properties": {
              "TableName": "e2etest-va-swb-Users",
              "AttributeDefinitions": [
                {
                  "AttributeName": "uid",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "username",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "ns",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "uid",
                  "KeyType": "HASH"
                }
              ],
              "BillingMode": "PAY_PER_REQUEST",
              "GlobalSecondaryIndexes": [
                {
                  "IndexName": "Principal",
                  "KeySchema": [
                    {
                      "AttributeName": "username",
                      "KeyType": "HASH"
                    },
                    {
                      "AttributeName": "ns",
                      "KeyType": "RANGE"
                    }
                  ],
                  "Projection": {
                    "ProjectionType": "ALL"
                  }
                }
              ]
            }
          },
          "AuthenticationProviderTypesDb": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "e2etest-va-swb-AuthenticationProviderTypes",
              "AttributeDefinitions": [
                {
                  "AttributeName": "type",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "type",
                  "KeyType": "HASH"
                }
              ],
              "BillingMode": "PAY_PER_REQUEST"
            }
          },
          "AuthenticationProviderConfigsDb": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "e2etest-va-swb-AuthenticationProviderConfigs",
              "AttributeDefinitions": [
                {
                  "AttributeName": "id",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "id",
                  "KeyType": "HASH"
                }
              ],
              "BillingMode": "PAY_PER_REQUEST"
            }
          },
          "RevokedTokensDb": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "e2etest-va-swb-RevokedTokens",
              "AttributeDefinitions": [
                {
                  "AttributeName": "id",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "id",
                  "KeyType": "HASH"
                }
              ],
              "TimeToLiveSpecification": {
                "AttributeName": "ttl",
                "Enabled": true
              },
              "BillingMode": "PAY_PER_REQUEST"
            }
          },
          "LocksDb": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "e2etest-va-swb-Locks",
              "AttributeDefinitions": [
                {
                  "AttributeName": "id",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "id",
                  "KeyType": "HASH"
                }
              ],
              "TimeToLiveSpecification": {
                "AttributeName": "ttl",
                "Enabled": true
              },
              "BillingMode": "PAY_PER_REQUEST"
            }
          },
          "StudiesDb": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "e2etest-va-swb-Studies",
              "AttributeDefinitions": [
                {
                  "AttributeName": "id",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "category",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "id",
                  "KeyType": "HASH"
                }
              ],
              "BillingMode": "PAY_PER_REQUEST",
              "GlobalSecondaryIndexes": [
                {
                  "IndexName": "CategoryIndex",
                  "KeySchema": [
                    {
                      "AttributeName": "category",
                      "KeyType": "HASH"
                    }
                  ],
                  "Projection": {
                    "ProjectionType": "ALL"
                  }
                }
              ]
            }
          },
          "StepTemplatesDb": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "e2etest-va-swb-StepTemplates",
              "AttributeDefinitions": [
                {
                  "AttributeName": "id",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "ver",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "id",
                  "KeyType": "HASH"
                },
                {
                  "AttributeName": "ver",
                  "KeyType": "RANGE"
                }
              ],
              "BillingMode": "PAY_PER_REQUEST"
            }
          },
          "WorkflowTemplatesDb": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "e2etest-va-swb-WorkflowTemplates",
              "AttributeDefinitions": [
                {
                  "AttributeName": "id",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "ver",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "id",
                  "KeyType": "HASH"
                },
                {
                  "AttributeName": "ver",
                  "KeyType": "RANGE"
                }
              ],
              "BillingMode": "PAY_PER_REQUEST"
            }
          },
          "WorkflowsDb": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "e2etest-va-swb-Workflows",
              "AttributeDefinitions": [
                {
                  "AttributeName": "id",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "ver",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "id",
                  "KeyType": "HASH"
                },
                {
                  "AttributeName": "ver",
                  "KeyType": "RANGE"
                }
              ],
              "BillingMode": "PAY_PER_REQUEST"
            }
          },
          "WorkflowTemplateDraftsDb": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "e2etest-va-swb-WorkflowTemplateDrafts",
              "AttributeDefinitions": [
                {
                  "AttributeName": "id",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "uid",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "id",
                  "KeyType": "HASH"
                }
              ],
              "BillingMode": "PAY_PER_REQUEST",
              "GlobalSecondaryIndexes": [
                {
                  "IndexName": "ByUID",
                  "KeySchema": [
                    {
                      "AttributeName": "uid",
                      "KeyType": "HASH"
                    }
                  ],
                  "Projection": {
                    "ProjectionType": "ALL"
                  }
                }
              ]
            }
          },
          "WorkflowDraftsDb": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "e2etest-va-swb-WorkflowDrafts",
              "AttributeDefinitions": [
                {
                  "AttributeName": "id",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "uid",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "id",
                  "KeyType": "HASH"
                }
              ],
              "BillingMode": "PAY_PER_REQUEST",
              "GlobalSecondaryIndexes": [
                {
                  "IndexName": "ByUID",
                  "KeySchema": [
                    {
                      "AttributeName": "uid",
                      "KeyType": "HASH"
                    }
                  ],
                  "Projection": {
                    "ProjectionType": "ALL"
                  }
                }
              ]
            }
          },
          "WorkflowInstancesDb": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "e2etest-va-swb-WorkflowInstances",
              "AttributeDefinitions": [
                {
                  "AttributeName": "id",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "createdAt",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "wf",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "id",
                  "KeyType": "HASH"
                }
              ],
              "TimeToLiveSpecification": {
                "AttributeName": "ttl",
                "Enabled": true
              },
              "BillingMode": "PAY_PER_REQUEST",
              "GlobalSecondaryIndexes": [
                {
                  "IndexName": "WorkflowIndex",
                  "KeySchema": [
                    {
                      "AttributeName": "wf",
                      "KeyType": "HASH"
                    },
                    {
                      "AttributeName": "createdAt",
                      "KeyType": "RANGE"
                    }
                  ],
                  "Projection": {
                    "ProjectionType": "ALL"
                  }
                }
              ]
            }
          },
          "WfAssignmentsDb": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "e2etest-va-swb-WfAssignments",
              "AttributeDefinitions": [
                {
                  "AttributeName": "id",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "triggerType",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "triggerTypeData",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "wf",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "createdAt",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "id",
                  "KeyType": "HASH"
                }
              ],
              "BillingMode": "PAY_PER_REQUEST",
              "GlobalSecondaryIndexes": [
                {
                  "IndexName": "WorkflowIndex",
                  "KeySchema": [
                    {
                      "AttributeName": "wf",
                      "KeyType": "HASH"
                    },
                    {
                      "AttributeName": "createdAt",
                      "KeyType": "RANGE"
                    }
                  ],
                  "Projection": {
                    "ProjectionType": "ALL"
                  }
                },
                {
                  "IndexName": "TypeIndex",
                  "KeySchema": [
                    {
                      "AttributeName": "triggerType",
                      "KeyType": "HASH"
                    },
                    {
                      "AttributeName": "triggerTypeData",
                      "KeyType": "RANGE"
                    }
                  ],
                  "Projection": {
                    "ProjectionType": "ALL"
                  }
                }
              ]
            }
          },
          "EnvironmentsDb": {
            "Type": "AWS::DynamoDB::Table",
            "DependsOn": "AccountsDb",
            "Properties": {
              "TableName": "e2etest-va-swb-Environments",
              "AttributeDefinitions": [
                {
                  "AttributeName": "id",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "id",
                  "KeyType": "HASH"
                }
              ],
              "BillingMode": "PAY_PER_REQUEST"
            }
          },
          "EnvironmentsScDb": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "e2etest-va-swb-EnvironmentsSc",
              "AttributeDefinitions": [
                {
                  "AttributeName": "id",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "createdBy",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "id",
                  "KeyType": "HASH"
                }
              ],
              "GlobalSecondaryIndexes": [
                {
                  "IndexName": "ByOwnerUID",
                  "KeySchema": [
                    {
                      "AttributeName": "createdBy",
                      "KeyType": "HASH"
                    }
                  ],
                  "Projection": {
                    "ProjectionType": "ALL"
                  }
                }
              ],
              "BillingMode": "PAY_PER_REQUEST"
            }
          },
          "EnvironmentsTypesDb": {
            "Type": "AWS::DynamoDB::Table",
            "DependsOn": "UserRolesDb",
            "Properties": {
              "TableName": "e2etest-va-swb-EnvironmentTypes",
              "AttributeDefinitions": [
                {
                  "AttributeName": "id",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "id",
                  "KeyType": "HASH"
                }
              ],
              "BillingMode": "PAY_PER_REQUEST"
            }
          },
          "UserRolesDb": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "e2etest-va-swb-UserRoles",
              "AttributeDefinitions": [
                {
                  "AttributeName": "id",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "id",
                  "KeyType": "HASH"
                }
              ],
              "BillingMode": "PAY_PER_REQUEST"
            }
          },
          "AwsAccountsDb": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "e2etest-va-swb-AwsAccounts",
              "AttributeDefinitions": [
                {
                  "AttributeName": "id",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "id",
                  "KeyType": "HASH"
                }
              ],
              "BillingMode": "PAY_PER_REQUEST"
            }
          },
          "IndexesDb": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "e2etest-va-swb-Indexes",
              "AttributeDefinitions": [
                {
                  "AttributeName": "id",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "id",
                  "KeyType": "HASH"
                }
              ],
              "BillingMode": "PAY_PER_REQUEST"
            }
          },
          "CostApiCachesDb": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "e2etest-va-swb-CostApiCaches",
              "AttributeDefinitions": [
                {
                  "AttributeName": "indexId",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "query",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "indexId",
                  "KeyType": "HASH"
                },
                {
                  "AttributeName": "query",
                  "KeyType": "RANGE"
                }
              ],
              "BillingMode": "PAY_PER_REQUEST"
            }
          },
          "AccountsDb": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "e2etest-va-swb-Accounts",
              "AttributeDefinitions": [
                {
                  "AttributeName": "id",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "id",
                  "KeyType": "HASH"
                }
              ],
              "BillingMode": "PAY_PER_REQUEST"
            }
          },
          "ProjectsDb": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "e2etest-va-swb-Projects",
              "AttributeDefinitions": [
                {
                  "AttributeName": "id",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "id",
                  "KeyType": "HASH"
                }
              ],
              "BillingMode": "PAY_PER_REQUEST"
            }
          },
          "StudyPermissionsDb": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "e2etest-va-swb-StudyPermissions",
              "AttributeDefinitions": [
                {
                  "AttributeName": "id",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "id",
                  "KeyType": "HASH"
                }
              ],
              "BillingMode": "PAY_PER_REQUEST"
            }
          },
          "KeyPairsDb": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "e2etest-va-swb-KeyPairs",
              "AttributeDefinitions": [
                {
                  "AttributeName": "id",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "uid",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "id",
                  "KeyType": "HASH"
                }
              ],
              "GlobalSecondaryIndexes": [
                {
                  "IndexName": "ByUID",
                  "KeySchema": [
                    {
                      "AttributeName": "uid",
                      "KeyType": "HASH"
                    }
                  ],
                  "Projection": {
                    "ProjectionType": "ALL"
                  }
                }
              ],
              "BillingMode": "PAY_PER_REQUEST"
            }
          },
          "StorageGatewayDb": {
            "Type": "AWS::DynamoDB::Table",
            "DependsOn": "StudiesDb",
            "Properties": {
              "TableName": "e2etest-va-swb-StorageGateway",
              "AttributeDefinitions": [
                {
                  "AttributeName": "id",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "id",
                  "KeyType": "HASH"
                }
              ],
              "BillingMode": "PAY_PER_REQUEST"
            }
          },
          "DbPasswords": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "e2etest-va-swb-DbPasswords",
              "AttributeDefinitions": [
                {
                  "AttributeName": "username",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "username",
                  "KeyType": "HASH"
                }
              ],
              "BillingMode": "PAY_PER_REQUEST"
            }
          },
          "DbUserApiKeys": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "e2etest-va-swb-DbUserApiKeys",
              "AttributeDefinitions": [
                {
                  "AttributeName": "unameWithNs",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "id",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "unameWithNs",
                  "KeyType": "HASH"
                },
                {
                  "AttributeName": "id",
                  "KeyType": "RANGE"
                }
              ],
              "BillingMode": "PAY_PER_REQUEST"
            }
          },
          "DbUsers": {
            "Type": "AWS::DynamoDB::Table",
            "DependsOn": "DbPasswords",
            "Properties": {
              "TableName": "e2etest-va-swb-DbUsers",
              "AttributeDefinitions": [
                {
                  "AttributeName": "username",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "ns",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "username",
                  "KeyType": "HASH"
                },
                {
                  "AttributeName": "ns",
                  "KeyType": "RANGE"
                }
              ],
              "BillingMode": "PAY_PER_REQUEST"
            }
          },
          "DbAuthenticationProviderTypes": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "e2etest-va-swb-DbAuthenticationProviderTypes",
              "AttributeDefinitions": [
                {
                  "AttributeName": "type",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "type",
                  "KeyType": "HASH"
                }
              ],
              "BillingMode": "PAY_PER_REQUEST"
            }
          },
          "DbAuthenticationProviderConfigs": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "e2etest-va-swb-DbAuthenticationProviderConfigs",
              "AttributeDefinitions": [
                {
                  "AttributeName": "id",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "id",
                  "KeyType": "HASH"
                }
              ],
              "BillingMode": "PAY_PER_REQUEST"
            }
          },
          "DbRevokedTokens": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "e2etest-va-swb-DbRevokedTokens",
              "AttributeDefinitions": [
                {
                  "AttributeName": "id",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "id",
                  "KeyType": "HASH"
                }
              ],
              "TimeToLiveSpecification": {
                "AttributeName": "ttl",
                "Enabled": true
              },
              "BillingMode": "PAY_PER_REQUEST"
            }
          },
          "DbLocks": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "e2etest-va-swb-DbLocks",
              "AttributeDefinitions": [
                {
                  "AttributeName": "id",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "id",
                  "KeyType": "HASH"
                }
              ],
              "TimeToLiveSpecification": {
                "AttributeName": "ttl",
                "Enabled": true
              },
              "BillingMode": "PAY_PER_REQUEST"
            }
          },
          "DbStudies": {
            "Type": "AWS::DynamoDB::Table",
            "DependsOn": "DbLocks",
            "Properties": {
              "TableName": "e2etest-va-swb-DbStudies",
              "AttributeDefinitions": [
                {
                  "AttributeName": "id",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "category",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "id",
                  "KeyType": "HASH"
                }
              ],
              "BillingMode": "PAY_PER_REQUEST",
              "GlobalSecondaryIndexes": [
                {
                  "IndexName": "CategoryIndex",
                  "KeySchema": [
                    {
                      "AttributeName": "category",
                      "KeyType": "HASH"
                    }
                  ],
                  "Projection": {
                    "ProjectionType": "ALL"
                  }
                }
              ]
            }
          },
          "DbStepTemplates": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "e2etest-va-swb-DbStepTemplates",
              "AttributeDefinitions": [
                {
                  "AttributeName": "id",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "ver",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "id",
                  "KeyType": "HASH"
                },
                {
                  "AttributeName": "ver",
                  "KeyType": "RANGE"
                }
              ],
              "BillingMode": "PAY_PER_REQUEST"
            }
          },
          "DbWorkflowTemplates": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "e2etest-va-swb-DbWorkflowTemplates",
              "AttributeDefinitions": [
                {
                  "AttributeName": "id",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "ver",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "id",
                  "KeyType": "HASH"
                },
                {
                  "AttributeName": "ver",
                  "KeyType": "RANGE"
                }
              ],
              "BillingMode": "PAY_PER_REQUEST"
            }
          },
          "DbWorkflows": {
            "Type": "AWS::DynamoDB::Table",
            "DependsOn": "DbWorkflowInstances",
            "Properties": {
              "TableName": "e2etest-va-swb-DbWorkflows",
              "AttributeDefinitions": [
                {
                  "AttributeName": "id",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "ver",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "id",
                  "KeyType": "HASH"
                },
                {
                  "AttributeName": "ver",
                  "KeyType": "RANGE"
                }
              ],
              "BillingMode": "PAY_PER_REQUEST"
            }
          },
          "DbWorkflowTemplateDrafts": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "e2etest-va-swb-DbWorkflowTemplateDrafts",
              "AttributeDefinitions": [
                {
                  "AttributeName": "id",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "username",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "id",
                  "KeyType": "HASH"
                }
              ],
              "BillingMode": "PAY_PER_REQUEST",
              "GlobalSecondaryIndexes": [
                {
                  "IndexName": "UsernameIndex",
                  "KeySchema": [
                    {
                      "AttributeName": "username",
                      "KeyType": "HASH"
                    }
                  ],
                  "Projection": {
                    "ProjectionType": "ALL"
                  }
                }
              ]
            }
          },
          "DbWorkflowDrafts": {
            "Type": "AWS::DynamoDB::Table",
            "DependsOn": "DbWorkflowTemplates",
            "Properties": {
              "TableName": "e2etest-va-swb-DbWorkflowDrafts",
              "AttributeDefinitions": [
                {
                  "AttributeName": "id",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "username",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "id",
                  "KeyType": "HASH"
                }
              ],
              "BillingMode": "PAY_PER_REQUEST",
              "GlobalSecondaryIndexes": [
                {
                  "IndexName": "UsernameIndex",
                  "KeySchema": [
                    {
                      "AttributeName": "username",
                      "KeyType": "HASH"
                    }
                  ],
                  "Projection": {
                    "ProjectionType": "ALL"
                  }
                }
              ]
            }
          },
          "DbWorkflowInstances": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "e2etest-va-swb-DbWorkflowInstances",
              "AttributeDefinitions": [
                {
                  "AttributeName": "id",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "createdAt",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "wf",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "id",
                  "KeyType": "HASH"
                }
              ],
              "TimeToLiveSpecification": {
                "AttributeName": "ttl",
                "Enabled": true
              },
              "BillingMode": "PAY_PER_REQUEST",
              "GlobalSecondaryIndexes": [
                {
                  "IndexName": "WorkflowIndex",
                  "KeySchema": [
                    {
                      "AttributeName": "wf",
                      "KeyType": "HASH"
                    },
                    {
                      "AttributeName": "createdAt",
                      "KeyType": "RANGE"
                    }
                  ],
                  "Projection": {
                    "ProjectionType": "ALL"
                  }
                }
              ]
            }
          },
          "DbWfAssignments": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "e2etest-va-swb-DbWfAssignments",
              "AttributeDefinitions": [
                {
                  "AttributeName": "id",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "triggerType",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "triggerTypeData",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "wf",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "createdAt",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "id",
                  "KeyType": "HASH"
                }
              ],
              "BillingMode": "PAY_PER_REQUEST",
              "GlobalSecondaryIndexes": [
                {
                  "IndexName": "WorkflowIndex",
                  "KeySchema": [
                    {
                      "AttributeName": "wf",
                      "KeyType": "HASH"
                    },
                    {
                      "AttributeName": "createdAt",
                      "KeyType": "RANGE"
                    }
                  ],
                  "Projection": {
                    "ProjectionType": "ALL"
                  }
                },
                {
                  "IndexName": "TypeIndex",
                  "KeySchema": [
                    {
                      "AttributeName": "triggerType",
                      "KeyType": "HASH"
                    },
                    {
                      "AttributeName": "triggerTypeData",
                      "KeyType": "RANGE"
                    }
                  ],
                  "Projection": {
                    "ProjectionType": "ALL"
                  }
                }
              ]
            }
          },
          "DbEnvironments": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "e2etest-va-swb-DbEnvironments",
              "AttributeDefinitions": [
                {
                  "AttributeName": "id",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "id",
                  "KeyType": "HASH"
                }
              ],
              "BillingMode": "PAY_PER_REQUEST"
            }
          },
          "DbEnvironmentsSc": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "e2etest-va-swb-DbEnvironmentsSc",
              "AttributeDefinitions": [
                {
                  "AttributeName": "id",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "id",
                  "KeyType": "HASH"
                }
              ],
              "ProvisionedThroughput": {
                "ReadCapacityUnits": "10",
                "WriteCapacityUnits": "10"
              }
            }
          },
          "DbEnvironmentsTypes": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "e2etest-va-swb-DbEnvironmentTypes",
              "AttributeDefinitions": [
                {
                  "AttributeName": "id",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "id",
                  "KeyType": "HASH"
                }
              ],
              "ProvisionedThroughput": {
                "ReadCapacityUnits": "10",
                "WriteCapacityUnits": "10"
              }
            }
          },
          "DbUserRoles": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "e2etest-va-swb-DbUserRoles",
              "AttributeDefinitions": [
                {
                  "AttributeName": "id",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "id",
                  "KeyType": "HASH"
                }
              ],
              "BillingMode": "PAY_PER_REQUEST"
            }
          },
          "DbAwsAccounts": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "e2etest-va-swb-DbAwsAccounts",
              "AttributeDefinitions": [
                {
                  "AttributeName": "id",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "id",
                  "KeyType": "HASH"
                }
              ],
              "BillingMode": "PAY_PER_REQUEST"
            }
          },
          "DbIndexes": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "e2etest-va-swb-DbIndexes",
              "AttributeDefinitions": [
                {
                  "AttributeName": "id",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "id",
                  "KeyType": "HASH"
                }
              ],
              "BillingMode": "PAY_PER_REQUEST"
            }
          },
          "DbCostApiCaches": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "e2etest-va-swb-DbCostApiCaches",
              "AttributeDefinitions": [
                {
                  "AttributeName": "indexId",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "query",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "indexId",
                  "KeyType": "HASH"
                },
                {
                  "AttributeName": "query",
                  "KeyType": "RANGE"
                }
              ],
              "BillingMode": "PAY_PER_REQUEST"
            }
          },
          "DbAccounts": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "e2etest-va-swb-DbAccounts",
              "AttributeDefinitions": [
                {
                  "AttributeName": "id",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "id",
                  "KeyType": "HASH"
                }
              ],
              "BillingMode": "PAY_PER_REQUEST"
            }
          },
          "DbProjects": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "e2etest-va-swb-DbProjects",
              "AttributeDefinitions": [
                {
                  "AttributeName": "id",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "id",
                  "KeyType": "HASH"
                }
              ],
              "BillingMode": "PAY_PER_REQUEST"
            }
          },
          "DbStudyPermissions": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "e2etest-va-swb-DbStudyPermissions",
              "AttributeDefinitions": [
                {
                  "AttributeName": "id",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "id",
                  "KeyType": "HASH"
                }
              ],
              "BillingMode": "PAY_PER_REQUEST"
            }
          },
          "DbKeyPairs": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "e2etest-va-swb-DbKeyPairs",
              "AttributeDefinitions": [
                {
                  "AttributeName": "id",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "username",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "id",
                  "KeyType": "HASH"
                }
              ],
              "GlobalSecondaryIndexes": [
                {
                  "IndexName": "UsernameIndex",
                  "KeySchema": [
                    {
                      "AttributeName": "username",
                      "KeyType": "HASH"
                    }
                  ],
                  "Projection": {
                    "ProjectionType": "ALL"
                  }
                }
              ],
              "BillingMode": "PAY_PER_REQUEST"
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": "684277579687-e2etest-va-swb-artifacts"
          },
          "ServiceEndpoint": {
            "Description": "URL of the service endpoint",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  },
                  "/e2etest"
                ]
              ]
            }
          },
          "AuthenticationLayerHandlerRoleArn": {
            "Value": {
              "Fn::GetAtt": [
                "RoleAuthenticationLayerHandler",
                "Arn"
              ]
            }
          },
          "ApiHandlerRoleArn": {
            "Value": {
              "Fn::GetAtt": [
                "RoleApiHandler",
                "Arn"
              ]
            }
          },
          "WorkflowLoopRunnerRoleArn": {
            "Value": {
              "Fn::GetAtt": [
                "RoleWorkflowLoopRunner",
                "Arn"
              ]
            }
          },
          "OpenDataScrapeHandlerRoleArn": {
            "Value": {
              "Fn::GetAtt": [
                "RoleOpenDataScrapeHandler",
                "Arn"
              ]
            }
          },
          "EnvStatusPollHandlerRoleArn": {
            "Value": {
              "Fn::GetAtt": [
                "RoleEnvStatusPollHandler",
                "Arn"
              ]
            }
          },
          "EnvMgmtRoleArn": {
            "Value": {
              "Fn::GetAtt": [
                "RoleEnvMgmt",
                "Arn"
              ]
            }
          }
        },
        "Conditions": {
          "IsDev": {
            "Fn::Equals": [
              "e2eTest",
              "dev"
            ]
          }
        }
      },
      "vpc": {}
    },
    "custom": {
      "settings": {
        "version": "1.0.0",
        "regionShortNamesMap": {
          "us-east-2": "oh",
          "us-east-1": "va",
          "us-west-1": "ca",
          "us-west-2": "or",
          "ap-east-1": "hk",
          "ap-south-1": "mum",
          "ap-northeast-3": "osa",
          "ap-northeast-2": "sel",
          "ap-southeast-1": "sg",
          "ap-southeast-2": "syd",
          "ap-northeast-1": "ty",
          "ca-central-1": "ca",
          "cn-north-1": "cn",
          "cn-northwest-1": "nx",
          "eu-central-1": "fr",
          "eu-west-1": "irl",
          "eu-west-2": "ldn",
          "eu-west-3": "par",
          "eu-north-1": "sth",
          "me-south-1": "bhr",
          "sa-east-1": "sao",
          "us-gov-east-1": "gce",
          "us-gov-west-1": "gcw"
        },
        "awsRegion": "us-east-1",
        "awsRegionShortName": "va",
        "namespace": "e2etest-va-swb",
        "globalNamespace": "684277579687-e2etest-va-swb",
        "deploymentBucketName": "684277579687-e2etest-va-swb-artifacts",
        "deploymentBucketPolicy": {
          "Version": "2008-10-17",
          "Statement": [
            {
              "Sid": "Deny requests that do not use TLS",
              "Effect": "Deny",
              "Principal": "*",
              "Action": "s3:*",
              "Resource": "arn:aws:s3:::684277579687-e2etest-va-swb-artifacts/*",
              "Condition": {
                "Bool": {
                  "aws:SecureTransport": "false"
                }
              }
            },
            {
              "Sid": "Deny requests that do not use SigV4",
              "Effect": "Deny",
              "Principal": "*",
              "Action": "s3:*",
              "Resource": "arn:aws:s3:::684277579687-e2etest-va-swb-artifacts/*",
              "Condition": {
                "StringNotEquals": {
                  "s3:signatureversion": "AWS4-HMAC-SHA256"
                }
              }
            }
          ]
        },
        "environmentsBootstrapBucketName": "684277579687-e2etest-va-swb-environments-bootstrap-scripts",
        "environmentsBootstrapBucketPrefix": "environment-files",
        "envName": "e2etest",
        "envType": "e2eTest",
        "dbPrefix": "e2etest-va-swb",
        "paramStoreRoot": "e2etest/swb",
        "rootUserName": "root",
        "rootUserFirstName": "root",
        "rootUserLastName": "root",
        "rootUserEmail": "root@example.com",
        "enableExternalResearchers": false,
        "localRoleAutoAdjustTrust": true,
        "domainName": "",
        "certificateArn": "",
        "hostedZoneId": "NotSetAsCustomDomainDisabled",
        "envMgmtRoleName": "e2etest-va-swb-EnvMgmt",
        "launchConstraintRolePrefix": "e2etest-va-swb-*",
        "launchConstraintRoleName": "e2etest-va-swb-LaunchConstraint",
        "launchConstraintPolicyPrefix": "*",
        "enableBuiltInWorkspaces": false,
        "auditQldbName": "e2etest-va-swb-audit",
        "createServiceCatalogPortfolio": true,
        "jwtOptions": "{\"algorithm\":\"HS256\",\"expiresIn\":\"2 days\"}",
        "paramStoreJwtSecret": "/e2etest/swb/jwt/secret",
        "infrastructureStackName": "e2etest-va-swb-infrastructure",
        "websiteUrl": "https://d1nzolgo88wuwt.cloudfront.net",
        "corsAllowList": "[\"https://d1nzolgo88wuwt.cloudfront.net\"]",
        "corsAllowListLocal": "[\"http://localhost:3000\"]",
        "websiteBucketName": "684277579687-e2etest-va-swb-website",
        "loggingBucketName": "684277579687-e2etest-va-swb-logging",
        "dataBucketName": "684277579687-e2etest-va-swb-data",
        "externalCfnTemplatesBucketName": "684277579687-e2etest-va-swb-external-templates",
        "studyDataBucketName": "684277579687-e2etest-va-swb-studydata",
        "studyDataKmsKeyAlias": "684277579687-e2etest-va-swb/s3/studydata",
        "studyDataKmsKeyAliasArn": "arn:aws:kms:us-east-1:684277579687:alias/684277579687-e2etest-va-swb/s3/studydata",
        "studyDataKmsPolicyWorkspaceSid": "Allow workspace environments to retrieve S3 objects",
        "apiHandlerRoleName": "e2etest-va-swb-ApiHandler",
        "apiHandlerRoleArn": "arn:aws:iam::684277579687:role/e2etest-va-swb-ApiHandler",
        "envTypeConfigsBucketName": "684277579687-e2etest-va-swb-env-type-configs",
        "workflowsEnabled": true,
        "workflowStateMachineName": "e2etest-va-swb-workflow",
        "workflowStateMachineArn": "arn:aws:states:us-east-1:684277579687:stateMachine:e2etest-va-swb-workflow",
        "workflowLoopRunnerRoleName": "e2etest-va-swb-WorkflowLoopRunner",
        "workflowLoopRunnerRoleArn": "arn:aws:iam::684277579687:role/e2etest-va-swb-WorkflowLoopRunner",
        "ec2RStudioAmiPrefix": "e2etest-va-swb-EC2-RSTUDIO-AMI",
        "ec2LinuxAmiPrefix": "e2etest-va-swb-EC2-LINUX-AMI",
        "ec2WindowsAmiPrefix": "e2etest-va-swb-EC2-WINDOWS-AMI",
        "emrAmiPrefix": "e2etest-va-swb-EMR-AMI",
        "environmentInstanceFiles": "s3://684277579687-e2etest-va-swb-environments-bootstrap-scripts/environment-files",
        "dbAuthenticationProviderTypes": "e2etest-va-swb-AuthenticationProviderTypes",
        "dbAuthenticationProviderConfigs": "e2etest-va-swb-AuthenticationProviderConfigs",
        "dbUsers": "e2etest-va-swb-Users",
        "dbPasswords": "e2etest-va-swb-Passwords",
        "dbUserApiKeys": "e2etest-va-swb-UserApiKeys",
        "dbRevokedTokens": "e2etest-va-swb-RevokedTokens",
        "dbLocks": "e2etest-va-swb-Locks",
        "dbStepTemplates": "e2etest-va-swb-StepTemplates",
        "dbWorkflowTemplates": "e2etest-va-swb-WorkflowTemplates",
        "dbWorkflowTemplateDrafts": "e2etest-va-swb-WorkflowTemplateDrafts",
        "dbWorkflows": "e2etest-va-swb-Workflows",
        "dbWorkflowDrafts": "e2etest-va-swb-WorkflowDrafts",
        "dbWorkflowInstances": "e2etest-va-swb-WorkflowInstances",
        "dbWfAssignments": "e2etest-va-swb-WfAssignments",
        "dbStudies": "e2etest-va-swb-Studies",
        "dbStudiesCategoryIndex": "CategoryIndex",
        "dbEnvironments": "e2etest-va-swb-Environments",
        "dbEnvironmentsSc": "e2etest-va-swb-EnvironmentsSc",
        "dbEnvironmentTypes": "e2etest-va-swb-EnvironmentTypes",
        "dbUserRoles": "e2etest-va-swb-UserRoles",
        "dbAwsAccounts": "e2etest-va-swb-AwsAccounts",
        "dbIndexes": "e2etest-va-swb-Indexes",
        "dbCostApiCaches": "e2etest-va-swb-CostApiCaches",
        "dbAccounts": "e2etest-va-swb-Accounts",
        "dbProjects": "e2etest-va-swb-Projects",
        "dbEnvironmentTokens": "e2etest-va-swb-EnvironmentTokens",
        "dbStudyPermissions": "e2etest-va-swb-StudyPermissions",
        "dbKeyPairs": "e2etest-va-swb-KeyPairs",
        "dbStorageGateway": "e2etest-va-swb-StorageGateway",
        "dbTableAuthenticationProviderTypes": "e2etest-va-swb-DbAuthenticationProviderTypes",
        "dbTableAuthenticationProviderConfigs": "e2etest-va-swb-DbAuthenticationProviderConfigs",
        "dbTableUsers": "e2etest-va-swb-DbUsers",
        "dbTablePasswords": "e2etest-va-swb-DbPasswords",
        "dbTableUserApiKeys": "e2etest-va-swb-DbUserApiKeys",
        "dbTableRevokedTokens": "e2etest-va-swb-DbRevokedTokens",
        "dbTableLocks": "e2etest-va-swb-DbLocks",
        "dbTableStepTemplates": "e2etest-va-swb-DbStepTemplates",
        "dbTableWorkflowTemplates": "e2etest-va-swb-DbWorkflowTemplates",
        "dbTableWorkflowTemplateDrafts": "e2etest-va-swb-DbWorkflowTemplateDrafts",
        "dbTableWorkflows": "e2etest-va-swb-DbWorkflows",
        "dbTableWorkflowDrafts": "e2etest-va-swb-DbWorkflowDrafts",
        "dbTableWorkflowInstances": "e2etest-va-swb-DbWorkflowInstances",
        "dbTableWfAssignments": "e2etest-va-swb-DbWfAssignments",
        "dbTableStudies": "e2etest-va-swb-DbStudies",
        "dbTableStudiesCategoryIndex": "CategoryIndex",
        "dbTableEnvironments": "e2etest-va-swb-DbEnvironments",
        "dbTableEnvironmentsSc": "e2etest-va-swb-DbEnvironmentsSc",
        "dbTableEnvironmentTypes": "e2etest-va-swb-DbEnvironmentTypes",
        "dbTableUserRoles": "e2etest-va-swb-DbUserRoles",
        "dbTableAwsAccounts": "e2etest-va-swb-DbAwsAccounts",
        "dbTableIndexes": "e2etest-va-swb-DbIndexes",
        "dbTableCostApiCaches": "e2etest-va-swb-DbCostApiCaches",
        "dbTableAccounts": "e2etest-va-swb-DbAccounts",
        "dbTableProjects": "e2etest-va-swb-DbProjects",
        "dbTableEnvironmentTokens": "e2etest-va-swb-DbEnvironmentTokens",
        "dbTableStudyPermissions": "e2etest-va-swb-DbStudyPermissions",
        "dbTableKeyPairs": "e2etest-va-swb-DbKeyPairs",
        "solutionName": "swb",
        "awsProfile": "galileo-common",
        "awsAccountInfo": {
          "awsAccountId": "684277579687"
        }
      },
      "tags": {
        "$ref": "$[\"service\"][\"provider\"][\"stackTags\"]"
      },
      "deploymentBucket": {
        "policy": {
          "Version": "2008-10-17",
          "Statement": [
            {
              "Sid": "Deny requests that do not use TLS",
              "Effect": "Deny",
              "Principal": "*",
              "Action": "s3:*",
              "Resource": "arn:aws:s3:::684277579687-e2etest-va-swb-artifacts/*",
              "Condition": {
                "Bool": {
                  "aws:SecureTransport": "false"
                }
              }
            },
            {
              "Sid": "Deny requests that do not use SigV4",
              "Effect": "Deny",
              "Principal": "*",
              "Action": "s3:*",
              "Resource": "arn:aws:s3:::684277579687-e2etest-va-swb-artifacts/*",
              "Condition": {
                "StringNotEquals": {
                  "s3:signatureversion": "AWS4-HMAC-SHA256"
                }
              }
            }
          ]
        },
        "versioning": false
      },
      "serverless-offline": {
        "port": 4000
      },
      "webpack": {
        "webpackConfig": "./config/build/webpack.config.js",
        "packager": "pnpm",
        "keepOutputDirectory": true,
        "excludeFiles": "src/**/*.test.js"
      },
      "backendTools": {
        "environmentOverrides": {
          "provider": {
            "APP_AWS_REGION": "us-east-1",
            "APP_AWS_PROFILE": "galileo-common",
            "IS_OFFLINE": true,
            "APP_LOCAL_ROLE_AUTO_ADJUST_TRUST": true
          },
          "lambdas": {
            "authenticationLayerHandler": {
              "environment": {
                "APP_LOCAL_ROLE_ARN": "${cfnOutput('AuthenticationLayerHandlerRoleArn')}"
              }
            },
            "apiHandler": {
              "environment": {
                "APP_LOCAL_ROLE_ARN": "${cfnOutput('ApiHandlerRoleArn')}",
                "APP_ENV_MGMT_ROLE_ARN": "${cfnOutput('EnvMgmtRoleArn')}"
              }
            },
            "workflowLoopRunner": {
              "environment": {
                "APP_LOCAL_ROLE_ARN": "${cfnOutput('WorkflowLoopRunnerRoleArn')}",
                "APP_ENV_MGMT_ROLE_ARN": "${cfnOutput('EnvMgmtRoleArn')}"
              }
            },
            "openDataScrapeHandler": {
              "environment": {
                "APP_LOCAL_ROLE_ARN": "${cfnOutput('OpenDataScrapeHandlerRoleArn')}"
              }
            },
            "envStatusPollHandler": {
              "environment": {
                "APP_LOCAL_ROLE_ARN": "${cfnOutput('EnvStatusPollHandlerRoleArn')}"
              }
            }
          }
        }
      },
      "s3Sync": [
        {
          "bucketName": "684277579687-e2etest-va-swb-external-templates",
          "localDir": "../../../addons/addon-base-raas/packages/base-raas-cfn-templates/src/templates/external"
        }
      ]
    },
    "plugins": [
      "serverless-webpack",
      "serverless-offline",
      "serverless-deployment-bucket",
      "serverless-s3-sync",
      "@aws-ee/base-serverless-backend-tools"
    ],
    "pluginsData": {},
    "functions": {
      "authenticationLayerHandler": {
        "handler": "src/lambdas/authentication-layer-handler/handler.handler",
        "role": "RoleAuthenticationLayerHandler",
        "tags": {
          "Name": "e2etest-va-swb-backend"
        },
        "description": "Handles the authentication layer for API handlers.",
        "environment": {
          "APP_PARAM_STORE_JWT_SECRET": "/e2etest/swb/jwt/secret",
          "APP_JWT_OPTIONS": "{\"algorithm\":\"HS256\",\"expiresIn\":\"2 days\"}"
        },
        "events": [],
        "name": "va-swb-backend-e2etest-authenticationLayerHandler",
        "package": {
          "artifact": ".serverless/authenticationLayerHandler.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {}
      },
      "openDataScrapeHandler": {
        "handler": "src/lambdas/open-data-scrape-handler/handler.handler",
        "role": "RoleOpenDataScrapeHandler",
        "tags": {
          "Name": "e2etest-va-swb-backend"
        },
        "description": "Handles scraping the metadata from the AWS open data registry.",
        "environment": {
          "APP_DB_STUDIES_CATEGORY_INDEX": "CategoryIndex",
          "APP_STUDY_DATA_BUCKET_NAME": "684277579687-e2etest-va-swb-studydata"
        },
        "events": [
          {
            "schedule": {
              "rate": "rate(1 day)",
              "description": "Invokes the lambda function that scrapes the awslabs/open-data-registry to find new studies and insert them into DynamoDB."
            }
          }
        ],
        "name": "va-swb-backend-e2etest-openDataScrapeHandler",
        "package": {
          "artifact": ".serverless/openDataScrapeHandler.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {}
      },
      "envStatusPollHandler": {
        "handler": "src/lambdas/env-status-poll-handler/handler.handler",
        "role": "RoleApiHandler",
        "tags": {
          "Name": "e2etest-va-swb-backend"
        },
        "timeout": 900,
        "description": "Handles status polling for sc environments",
        "events": [
          {
            "schedule": {
              "rate": "rate(3 minutes)",
              "description": "Invokes the lambda function that polls and synchronize environment status."
            }
          }
        ],
        "name": "va-swb-backend-e2etest-envStatusPollHandler",
        "package": {
          "artifact": ".serverless/envStatusPollHandler.zip"
        },
        "memory": 1024,
        "runtime": "nodejs12.x",
        "vpc": {}
      },
      "apiHandler": {
        "handler": "src/lambdas/api-handler/handler.handler",
        "role": "RoleApiHandler",
        "tags": {
          "Name": "e2etest-va-swb-backend"
        },
        "description": "The API handler for all /api/* APIs",
        "events": [
          {
            "http": {
              "path": "api/authentication/public/provider/configs",
              "method": "get",
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          },
          {
            "http": {
              "path": "api/authentication/id-tokens",
              "method": "post",
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          },
          {
            "http": {
              "authorizer": {
                "name": "authenticationLayerHandler",
                "arn": {
                  "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"AuthenticationLayerHandlerLambdaPermissionApiGateway\"][\"Properties\"][\"FunctionName\"]"
                },
                "managedExternally": false,
                "identitySource": "method.request.header.Authorization"
              },
              "path": "api",
              "method": "get",
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          },
          {
            "http": {
              "authorizer": {
                "name": "authenticationLayerHandler",
                "arn": {
                  "Fn::GetAtt": [
                    "AuthenticationLayerHandlerLambdaFunction",
                    "Arn"
                  ]
                },
                "managedExternally": false,
                "identitySource": "method.request.header.Authorization"
              },
              "path": "api/{proxy+}",
              "method": "get",
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          },
          {
            "http": {
              "authorizer": {
                "name": "authenticationLayerHandler",
                "arn": {
                  "Fn::GetAtt": [
                    "AuthenticationLayerHandlerLambdaFunction",
                    "Arn"
                  ]
                },
                "managedExternally": false,
                "identitySource": "method.request.header.Authorization"
              },
              "path": "api",
              "method": "post",
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          },
          {
            "http": {
              "authorizer": {
                "name": "authenticationLayerHandler",
                "arn": {
                  "Fn::GetAtt": [
                    "AuthenticationLayerHandlerLambdaFunction",
                    "Arn"
                  ]
                },
                "managedExternally": false,
                "identitySource": "method.request.header.Authorization"
              },
              "path": "api/{proxy+}",
              "method": "post",
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          },
          {
            "http": {
              "authorizer": {
                "name": "authenticationLayerHandler",
                "arn": {
                  "Fn::GetAtt": [
                    "AuthenticationLayerHandlerLambdaFunction",
                    "Arn"
                  ]
                },
                "managedExternally": false,
                "identitySource": "method.request.header.Authorization"
              },
              "path": "api",
              "method": "put",
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "PUT"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          },
          {
            "http": {
              "authorizer": {
                "name": "authenticationLayerHandler",
                "arn": {
                  "Fn::GetAtt": [
                    "AuthenticationLayerHandlerLambdaFunction",
                    "Arn"
                  ]
                },
                "managedExternally": false,
                "identitySource": "method.request.header.Authorization"
              },
              "path": "api/{proxy+}",
              "method": "put",
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "PUT"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          },
          {
            "http": {
              "authorizer": {
                "name": "authenticationLayerHandler",
                "arn": {
                  "Fn::GetAtt": [
                    "AuthenticationLayerHandlerLambdaFunction",
                    "Arn"
                  ]
                },
                "managedExternally": false,
                "identitySource": "method.request.header.Authorization"
              },
              "path": "api",
              "method": "delete",
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "DELETE"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          },
          {
            "http": {
              "authorizer": {
                "name": "authenticationLayerHandler",
                "arn": {
                  "Fn::GetAtt": [
                    "AuthenticationLayerHandlerLambdaFunction",
                    "Arn"
                  ]
                },
                "managedExternally": false,
                "identitySource": "method.request.header.Authorization"
              },
              "path": "api/{proxy+}",
              "method": "delete",
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "DELETE"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "environment": {
          "APP_HOSTED_ZONE_ID": "NotSetAsCustomDomainDisabled",
          "APP_DOMAIN_NAME": "",
          "APP_WEBSITE_URL": "https://d1nzolgo88wuwt.cloudfront.net",
          "APP_CORS_ALLOW_LIST": "[\"https://d1nzolgo88wuwt.cloudfront.net\"]",
          "APP_CORS_ALLOW_LIST_LOCAL": "[\"http://localhost:3000\"]",
          "APP_PARAM_STORE_JWT_SECRET": "/e2etest/swb/jwt/secret",
          "APP_JWT_OPTIONS": "{\"algorithm\":\"HS256\",\"expiresIn\":\"2 days\"}",
          "APP_SM_WORKFLOW": "arn:aws:states:us-east-1:684277579687:stateMachine:e2etest-va-swb-workflow",
          "APP_PARAM_STORE_ROOT": "e2etest/swb",
          "APP_EC2_RSTUDIO_AMI_PREFIX": "e2etest-va-swb-EC2-RSTUDIO-AMI",
          "APP_EC2_LINUX_AMI_PREFIX": "e2etest-va-swb-EC2-LINUX-AMI",
          "APP_EC2_WINDOWS_AMI_PREFIX": "e2etest-va-swb-EC2-WINDOWS-AMI",
          "APP_EMR_AMI_PREFIX": "e2etest-va-swb-EMR-AMI",
          "APP_DB_STUDIES_CATEGORY_INDEX": "CategoryIndex",
          "APP_STUDY_DATA_BUCKET_NAME": "684277579687-e2etest-va-swb-studydata",
          "APP_WORKFLOW_ROLE_ARN": "arn:aws:iam::684277579687:role/e2etest-va-swb-WorkflowLoopRunner",
          "APP_API_HANDLER_ARN": "arn:aws:iam::684277579687:role/e2etest-va-swb-ApiHandler",
          "APP_EXTERNAL_CFN_TEMPLATES_BUCKET_NAME": "684277579687-e2etest-va-swb-external-templates",
          "APP_ENVIRONMENT_INSTANCE_FILES": "s3://684277579687-e2etest-va-swb-environments-bootstrap-scripts/environment-files",
          "APP_STUDY_DATA_KMS_KEY_ALIAS": "684277579687-e2etest-va-swb/s3/studydata",
          "APP_STUDY_DATA_KMS_KEY_ARN": "arn:aws:kms:us-east-1:684277579687:alias/684277579687-e2etest-va-swb/s3/studydata",
          "APP_STUDY_DATA_KMS_POLICY_WORKSPACE_SID": "Allow workspace environments to retrieve S3 objects",
          "APP_ENV_MGMT_ROLE_ARN": {
            "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ApiHandlerLambdaFunction\"][\"Properties\"][\"Environment\"][\"Variables\"][\"APP_ENV_MGMT_ROLE_ARN\"]"
          },
          "APP_LAUNCH_CONSTRAINT_ROLE_PREFIX": "e2etest-va-swb-*",
          "APP_LAUNCH_CONSTRAINT_POLICY_PREFIX": "*",
          "APP_ENV_TYPE_CONFIGS_BUCKET_NAME": "684277579687-e2etest-va-swb-env-type-configs"
        },
        "name": "va-swb-backend-e2etest-apiHandler",
        "package": {
          "artifact": ".serverless/apiHandler.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {}
      },
      "workflowLoopRunner": {
        "handler": "src/lambdas/workflow-loop-runner/handler.handler",
        "role": "RoleWorkflowLoopRunner",
        "timeout": 900,
        "tags": {
          "Name": "e2etest-va-swb-backend"
        },
        "description": "The workflow loop runner, it is expected to be invoked by AWS Step Functions and not directly",
        "environment": {
          "APP_SM_WORKFLOW": "arn:aws:states:us-east-1:684277579687:stateMachine:e2etest-va-swb-workflow",
          "APP_PARAM_STORE_ROOT": "e2etest/swb",
          "APP_PARAM_STORE_JWT_SECRET": "/e2etest/swb/jwt/secret",
          "APP_JWT_OPTIONS": "{\"algorithm\":\"HS256\",\"expiresIn\":\"2 days\"}",
          "APP_DB_STUDIES_CATEGORY_INDEX": "CategoryIndex",
          "APP_STUDY_DATA_BUCKET_NAME": "684277579687-e2etest-va-swb-studydata",
          "APP_ARTIFACTS_BUCKET_NAME": "684277579687-e2etest-va-swb-artifacts",
          "APP_ENVIRONMENT_INSTANCE_FILES": "s3://684277579687-e2etest-va-swb-environments-bootstrap-scripts/environment-files",
          "APP_STUDY_DATA_KMS_KEY_ALIAS": "684277579687-e2etest-va-swb/s3/studydata",
          "APP_STUDY_DATA_KMS_KEY_ARN": {
            "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"WorkflowLoopRunnerLambdaFunction\"][\"Properties\"][\"Environment\"][\"Variables\"][\"APP_STUDY_DATA_KMS_KEY_ARN\"]"
          },
          "APP_STUDY_DATA_KMS_POLICY_WORKSPACE_SID": "Allow workspace environments to retrieve S3 objects",
          "APP_ENV_MGMT_ROLE_ARN": {
            "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"WorkflowLoopRunnerLambdaFunction\"][\"Properties\"][\"Environment\"][\"Variables\"][\"APP_ENV_MGMT_ROLE_ARN\"]"
          },
          "APP_LAUNCH_CONSTRAINT_ROLE_PREFIX": "e2etest-va-swb-*",
          "APP_LAUNCH_CONSTRAINT_POLICY_PREFIX": "*",
          "APP_ENV_TYPE_CONFIGS_BUCKET_NAME": "684277579687-e2etest-va-swb-env-type-configs",
          "APP_HOSTED_ZONE_ID": "NotSetAsCustomDomainDisabled",
          "APP_DOMAIN_NAME": ""
        },
        "events": [],
        "name": "va-swb-backend-e2etest-workflowLoopRunner",
        "package": {
          "artifact": ".serverless/workflowLoopRunner.zip"
        },
        "memory": 1024,
        "runtime": "nodejs12.x",
        "vpc": {}
      }
    },
    "resources": {
      "Description": "Service-Workbench-on-AWS 1.0.0 swb e2etest Backend",
      "Conditions": {
        "IsDev": {
          "Fn::Equals": [
            "e2eTest",
            "dev"
          ]
        }
      },
      "Resources": {
        "StudyDataBucket": {
          "Type": "AWS::S3::Bucket",
          "Properties": {
            "BucketName": "684277579687-e2etest-va-swb-studydata",
            "BucketEncryption": {
              "ServerSideEncryptionConfiguration": [
                {
                  "ServerSideEncryptionByDefault": {
                    "SSEAlgorithm": "aws:kms",
                    "KMSMasterKeyID": {
                      "Fn::GetAtt": [
                        "StudyDataEncryptionKey",
                        "Arn"
                      ]
                    }
                  }
                }
              ]
            },
            "OwnershipControls": {
              "Rules": [
                {
                  "ObjectOwnership": "BucketOwnerPreferred"
                }
              ]
            },
            "LoggingConfiguration": {
              "DestinationBucketName": "684277579687-e2etest-va-swb-logging",
              "LogFilePrefix": "studydata/"
            },
            "VersioningConfiguration": {
              "Status": "Enabled"
            },
            "CorsConfiguration": {
              "CorsRules": [
                {
                  "AllowedOrigins": [
                    "https://d1nzolgo88wuwt.cloudfront.net",
                    {
                      "Fn::If": [
                        "IsDev",
                        "http://localhost:3000",
                        {
                          "Ref": "AWS::NoValue"
                        }
                      ]
                    }
                  ],
                  "AllowedMethods": [
                    "POST"
                  ],
                  "ExposedHeaders": [
                    "ETag"
                  ]
                }
              ]
            },
            "PublicAccessBlockConfiguration": {
              "BlockPublicAcls": true,
              "BlockPublicPolicy": true,
              "IgnorePublicAcls": true,
              "RestrictPublicBuckets": true
            }
          }
        },
        "StudyDataBucketPolicy": {
          "Type": "AWS::S3::BucketPolicy",
          "Properties": {
            "Bucket": {
              "Ref": "StudyDataBucket"
            },
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Id": "PutObjectPolicy",
              "Statement": [
                {
                  "Sid": "Deny object uploads not using default encryption settings",
                  "Effect": "Deny",
                  "Principal": "*",
                  "Action": "s3:PutObject",
                  "Resource": {
                    "Fn::Join": [
                      "/",
                      [
                        {
                          "Fn::GetAtt": [
                            "StudyDataBucket",
                            "Arn"
                          ]
                        },
                        "*"
                      ]
                    ]
                  },
                  "Condition": {
                    "Null": {
                      "s3:x-amz-server-side-encryption": false
                    },
                    "StringNotEqualsIfExists": {
                      "s3:x-amz-server-side-encryption": "aws:kms"
                    }
                  }
                },
                {
                  "Sid": "Deny object uploads not using default encryption settings",
                  "Effect": "Deny",
                  "Principal": "*",
                  "Action": "s3:PutObject",
                  "Resource": {
                    "Fn::Join": [
                      "/",
                      [
                        {
                          "Fn::GetAtt": [
                            "StudyDataBucket",
                            "Arn"
                          ]
                        },
                        "*"
                      ]
                    ]
                  },
                  "Condition": {
                    "StringNotEquals": {
                      "s3:x-amz-server-side-encryption": "aws:kms"
                    },
                    "StringNotEqualsIfExists": {
                      "s3:x-amz-server-side-encryption-aws-kms-key-id": {
                        "Fn::GetAtt": [
                          "StudyDataEncryptionKey",
                          "Arn"
                        ]
                      }
                    }
                  }
                },
                {
                  "Sid": "Deny requests that do not use TLS",
                  "Effect": "Deny",
                  "Principal": "*",
                  "Action": "s3:*",
                  "Resource": {
                    "Fn::Join": [
                      "/",
                      [
                        {
                          "Fn::GetAtt": [
                            "StudyDataBucket",
                            "Arn"
                          ]
                        },
                        "*"
                      ]
                    ]
                  },
                  "Condition": {
                    "Bool": {
                      "aws:SecureTransport": false
                    }
                  }
                },
                {
                  "Sid": "Deny requests that do not use SigV4",
                  "Effect": "Deny",
                  "Principal": "*",
                  "Action": "s3:*",
                  "Resource": {
                    "Fn::Join": [
                      "/",
                      [
                        {
                          "Fn::GetAtt": [
                            "StudyDataBucket",
                            "Arn"
                          ]
                        },
                        "*"
                      ]
                    ]
                  },
                  "Condition": {
                    "StringNotEquals": {
                      "s3:signatureversion": "AWS4-HMAC-SHA256"
                    }
                  }
                }
              ]
            }
          }
        },
        "StudyDataEncryptionKey": {
          "Type": "AWS::KMS::Key",
          "Properties": {
            "Description": "Master key used to encrypt objects stored in the 684277579687-e2etest-va-swb-studydata bucket",
            "KeyPolicy": {
              "Version": "2012-10-17",
              "Id": "study-data-kms-policy",
              "Statement": [
                {
                  "Sid": "Allow root",
                  "Effect": "Allow",
                  "Principal": {
                    "AWS": [
                      {
                        "Fn::Sub": "arn:aws:iam::${AWS::AccountId}:root"
                      }
                    ]
                  },
                  "Action": [
                    "kms:*"
                  ],
                  "Resource": "*"
                },
                {
                  "Sid": "Allow API access to create object and update policy for new workspaces",
                  "Effect": "Allow",
                  "Principal": {
                    "AWS": [
                      {
                        "Fn::GetAtt": [
                          "RoleApiHandler",
                          "Arn"
                        ]
                      }
                    ]
                  },
                  "Action": [
                    "kms:GenerateDataKey",
                    "kms:DescribeKey",
                    "kms:GetKeyPolicy",
                    "kms:PutKeyPolicy"
                  ],
                  "Resource": "*"
                },
                {
                  "Sid": "Allow workflows to update key policy for new workspaces",
                  "Effect": "Allow",
                  "Principal": {
                    "AWS": [
                      {
                        "Fn::GetAtt": [
                          "RoleWorkflowLoopRunner",
                          "Arn"
                        ]
                      }
                    ]
                  },
                  "Action": [
                    "kms:DescribeKey",
                    "kms:GetKeyPolicy",
                    "kms:PutKeyPolicy"
                  ],
                  "Resource": "*"
                }
              ]
            }
          }
        },
        "StudyDataEncryptionKeyAlias": {
          "Type": "AWS::KMS::Alias",
          "Properties": {
            "AliasName": "alias/684277579687-e2etest-va-swb/s3/studydata",
            "TargetKeyId": {
              "Ref": "StudyDataEncryptionKey"
            }
          }
        },
        "ExternalCfnTemplatesBucket": {
          "Type": "AWS::S3::Bucket",
          "Properties": {
            "BucketName": "684277579687-e2etest-va-swb-external-templates",
            "BucketEncryption": {
              "ServerSideEncryptionConfiguration": [
                {
                  "ServerSideEncryptionByDefault": {
                    "SSEAlgorithm": "AES256"
                  }
                }
              ]
            },
            "LoggingConfiguration": {
              "DestinationBucketName": "684277579687-e2etest-va-swb-logging",
              "LogFilePrefix": "external-cfn-templates/"
            },
            "PublicAccessBlockConfiguration": {
              "BlockPublicAcls": true,
              "BlockPublicPolicy": true,
              "IgnorePublicAcls": true,
              "RestrictPublicBuckets": true
            }
          }
        },
        "ExternalCfnTemplatesBucketPolicy": {
          "Type": "AWS::S3::BucketPolicy",
          "Properties": {
            "Bucket": {
              "Ref": "ExternalCfnTemplatesBucket"
            },
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Sid": "Deny requests that do not use TLS",
                  "Effect": "Deny",
                  "Principal": "*",
                  "Action": "s3:*",
                  "Resource": {
                    "Fn::Join": [
                      "/",
                      [
                        {
                          "Fn::GetAtt": [
                            "ExternalCfnTemplatesBucket",
                            "Arn"
                          ]
                        },
                        "*"
                      ]
                    ]
                  },
                  "Condition": {
                    "Bool": {
                      "aws:SecureTransport": false
                    }
                  }
                },
                {
                  "Sid": "Deny requests that do not use SigV4",
                  "Effect": "Deny",
                  "Principal": "*",
                  "Action": "s3:*",
                  "Resource": {
                    "Fn::Join": [
                      "/",
                      [
                        {
                          "Fn::GetAtt": [
                            "ExternalCfnTemplatesBucket",
                            "Arn"
                          ]
                        },
                        "*"
                      ]
                    ]
                  },
                  "Condition": {
                    "StringNotEquals": {
                      "s3:signatureversion": "AWS4-HMAC-SHA256"
                    }
                  }
                }
              ]
            }
          }
        },
        "EnvironmentsBootstrapBucket": {
          "Type": "AWS::S3::Bucket",
          "Properties": {
            "BucketName": "684277579687-e2etest-va-swb-environments-bootstrap-scripts",
            "BucketEncryption": {
              "ServerSideEncryptionConfiguration": [
                {
                  "ServerSideEncryptionByDefault": {
                    "SSEAlgorithm": "AES256"
                  }
                }
              ]
            },
            "PublicAccessBlockConfiguration": {
              "BlockPublicAcls": true,
              "BlockPublicPolicy": true,
              "IgnorePublicAcls": true,
              "RestrictPublicBuckets": true
            }
          }
        },
        "EnvironmentsBootstrapBucketPolicy": {
          "Type": "AWS::S3::BucketPolicy",
          "Properties": {
            "Bucket": {
              "Ref": "EnvironmentsBootstrapBucket"
            },
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Id": "PutObjectPolicy",
              "Statement": [
                {
                  "Sid": "Deny requests that do not use TLS",
                  "Effect": "Deny",
                  "Principal": "*",
                  "Action": "s3:*",
                  "Resource": {
                    "Fn::Join": [
                      "/",
                      [
                        {
                          "Fn::GetAtt": [
                            "EnvironmentsBootstrapBucket",
                            "Arn"
                          ]
                        },
                        "*"
                      ]
                    ]
                  },
                  "Condition": {
                    "Bool": {
                      "aws:SecureTransport": false
                    }
                  }
                },
                {
                  "Sid": "Deny requests that do not use SigV4",
                  "Effect": "Deny",
                  "Principal": "*",
                  "Action": "s3:*",
                  "Resource": {
                    "Fn::Join": [
                      "/",
                      [
                        {
                          "Fn::GetAtt": [
                            "EnvironmentsBootstrapBucket",
                            "Arn"
                          ]
                        },
                        "*"
                      ]
                    ]
                  },
                  "Condition": {
                    "StringNotEquals": {
                      "s3:signatureversion": "AWS4-HMAC-SHA256"
                    }
                  }
                }
              ]
            }
          }
        },
        "EnvTypeConfigsBucket": {
          "Type": "AWS::S3::Bucket",
          "Properties": {
            "BucketName": "684277579687-e2etest-va-swb-env-type-configs",
            "BucketEncryption": {
              "ServerSideEncryptionConfiguration": [
                {
                  "ServerSideEncryptionByDefault": {
                    "SSEAlgorithm": "AES256"
                  }
                }
              ]
            },
            "PublicAccessBlockConfiguration": {
              "BlockPublicAcls": true,
              "BlockPublicPolicy": true,
              "IgnorePublicAcls": true,
              "RestrictPublicBuckets": true
            }
          }
        },
        "EnvTypeConfigsBucketPolicy": {
          "Type": "AWS::S3::BucketPolicy",
          "Properties": {
            "Bucket": {
              "Ref": "EnvTypeConfigsBucket"
            },
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Id": "PutObjectPolicy",
              "Statement": [
                {
                  "Sid": "Deny requests that do not use TLS",
                  "Effect": "Deny",
                  "Principal": "*",
                  "Action": "s3:*",
                  "Resource": {
                    "Fn::Join": [
                      "/",
                      [
                        {
                          "Fn::GetAtt": [
                            "EnvTypeConfigsBucket",
                            "Arn"
                          ]
                        },
                        "*"
                      ]
                    ]
                  },
                  "Condition": {
                    "Bool": {
                      "aws:SecureTransport": false
                    }
                  }
                },
                {
                  "Sid": "Deny requests that do not use SigV4",
                  "Effect": "Deny",
                  "Principal": "*",
                  "Action": "s3:*",
                  "Resource": {
                    "Fn::Join": [
                      "/",
                      [
                        {
                          "Fn::GetAtt": [
                            "EnvTypeConfigsBucket",
                            "Arn"
                          ]
                        },
                        "*"
                      ]
                    ]
                  },
                  "Condition": {
                    "StringNotEquals": {
                      "s3:signatureversion": "AWS4-HMAC-SHA256"
                    }
                  }
                }
              ]
            }
          }
        },
        "RoleAuthenticationLayerHandler": {
          "Type": "AWS::IAM::Role",
          "Properties": {
            "AssumeRolePolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Principal": {
                    "Service": "lambda.amazonaws.com"
                  },
                  "Action": "sts:AssumeRole"
                }
              ]
            },
            "ManagedPolicyArns": [
              "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
            ],
            "Policies": [
              {
                "PolicyName": "db-access",
                "PolicyDocument": {
                  "Statement": {
                    "Effect": "Allow",
                    "Action": [
                      "dynamodb:DeleteItem",
                      "dynamodb:GetItem",
                      "dynamodb:PutItem",
                      "dynamodb:Query",
                      "dynamodb:Scan",
                      "dynamodb:UpdateItem"
                    ],
                    "Resource": [
                      {
                        "Fn::GetAtt": [
                          "PasswordsDb",
                          "Arn"
                        ]
                      },
                      {
                        "Fn::GetAtt": [
                          "UsersDb",
                          "Arn"
                        ]
                      },
                      {
                        "Fn::Sub": "${UsersDb.Arn}/index/*"
                      },
                      {
                        "Fn::GetAtt": [
                          "AuthenticationProviderTypesDb",
                          "Arn"
                        ]
                      },
                      {
                        "Fn::GetAtt": [
                          "AuthenticationProviderConfigsDb",
                          "Arn"
                        ]
                      },
                      {
                        "Fn::GetAtt": [
                          "RevokedTokensDb",
                          "Arn"
                        ]
                      },
                      {
                        "Fn::GetAtt": [
                          "UserRolesDb",
                          "Arn"
                        ]
                      }
                    ]
                  }
                }
              },
              {
                "PolicyName": "param-store-access",
                "PolicyDocument": {
                  "Statement": {
                    "Effect": "Allow",
                    "Action": [
                      "ssm:GetParameter"
                    ],
                    "Resource": {
                      "Fn::Sub": "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/e2etest/swb/*"
                    }
                  }
                }
              }
            ]
          }
        },
        "RoleApiHandler": {
          "Type": "AWS::IAM::Role",
          "Properties": {
            "RoleName": "e2etest-va-swb-ApiHandler",
            "AssumeRolePolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Principal": {
                    "Service": "lambda.amazonaws.com"
                  },
                  "Action": "sts:AssumeRole"
                }
              ]
            },
            "ManagedPolicyArns": [
              "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
            ],
            "Policies": [
              {
                "PolicyName": "db-access",
                "PolicyDocument": {
                  "Statement": {
                    "Effect": "Allow",
                    "Action": [
                      "dynamodb:DeleteItem",
                      "dynamodb:GetItem",
                      "dynamodb:BatchGetItem",
                      "dynamodb:PutItem",
                      "dynamodb:Query",
                      "dynamodb:Scan",
                      "dynamodb:UpdateItem"
                    ],
                    "Resource": [
                      {
                        "Fn::GetAtt": [
                          "AuthenticationProviderTypesDb",
                          "Arn"
                        ]
                      },
                      {
                        "Fn::GetAtt": [
                          "AuthenticationProviderConfigsDb",
                          "Arn"
                        ]
                      },
                      {
                        "Fn::GetAtt": [
                          "RevokedTokensDb",
                          "Arn"
                        ]
                      },
                      {
                        "Fn::GetAtt": [
                          "UsersDb",
                          "Arn"
                        ]
                      },
                      {
                        "Fn::Sub": "${UsersDb.Arn}/index/*"
                      },
                      {
                        "Fn::GetAtt": [
                          "PasswordsDb",
                          "Arn"
                        ]
                      },
                      {
                        "Fn::GetAtt": [
                          "LocksDb",
                          "Arn"
                        ]
                      },
                      {
                        "Fn::GetAtt": [
                          "StudiesDb",
                          "Arn"
                        ]
                      },
                      {
                        "Fn::GetAtt": [
                          "StudyPermissionsDb",
                          "Arn"
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            {
                              "Fn::GetAtt": [
                                "StudiesDb",
                                "Arn"
                              ]
                            },
                            "/index/*"
                          ]
                        ]
                      },
                      {
                        "Fn::GetAtt": [
                          "StepTemplatesDb",
                          "Arn"
                        ]
                      },
                      {
                        "Fn::GetAtt": [
                          "WorkflowTemplatesDb",
                          "Arn"
                        ]
                      },
                      {
                        "Fn::GetAtt": [
                          "WorkflowTemplateDraftsDb",
                          "Arn"
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            {
                              "Fn::GetAtt": [
                                "WorkflowTemplateDraftsDb",
                                "Arn"
                              ]
                            },
                            "/index/*"
                          ]
                        ]
                      },
                      {
                        "Fn::GetAtt": [
                          "WorkflowsDb",
                          "Arn"
                        ]
                      },
                      {
                        "Fn::GetAtt": [
                          "WorkflowDraftsDb",
                          "Arn"
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            {
                              "Fn::GetAtt": [
                                "WorkflowDraftsDb",
                                "Arn"
                              ]
                            },
                            "/index/*"
                          ]
                        ]
                      },
                      {
                        "Fn::GetAtt": [
                          "WorkflowInstancesDb",
                          "Arn"
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            {
                              "Fn::GetAtt": [
                                "WorkflowInstancesDb",
                                "Arn"
                              ]
                            },
                            "/index/*"
                          ]
                        ]
                      },
                      {
                        "Fn::GetAtt": [
                          "WfAssignmentsDb",
                          "Arn"
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            {
                              "Fn::GetAtt": [
                                "WfAssignmentsDb",
                                "Arn"
                              ]
                            },
                            "/index/*"
                          ]
                        ]
                      },
                      {
                        "Fn::GetAtt": [
                          "StudiesDb",
                          "Arn"
                        ]
                      },
                      {
                        "Fn::GetAtt": [
                          "StudyPermissionsDb",
                          "Arn"
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            {
                              "Fn::GetAtt": [
                                "StudiesDb",
                                "Arn"
                              ]
                            },
                            "/index/*"
                          ]
                        ]
                      },
                      {
                        "Fn::GetAtt": [
                          "EnvironmentsDb",
                          "Arn"
                        ]
                      },
                      {
                        "Fn::GetAtt": [
                          "EnvironmentsScDb",
                          "Arn"
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            {
                              "Fn::GetAtt": [
                                "EnvironmentsScDb",
                                "Arn"
                              ]
                            },
                            "/index/*"
                          ]
                        ]
                      },
                      {
                        "Fn::GetAtt": [
                          "EnvironmentsTypesDb",
                          "Arn"
                        ]
                      },
                      {
                        "Fn::GetAtt": [
                          "UserRolesDb",
                          "Arn"
                        ]
                      },
                      {
                        "Fn::GetAtt": [
                          "AwsAccountsDb",
                          "Arn"
                        ]
                      },
                      {
                        "Fn::GetAtt": [
                          "IndexesDb",
                          "Arn"
                        ]
                      },
                      {
                        "Fn::GetAtt": [
                          "CostApiCachesDb",
                          "Arn"
                        ]
                      },
                      {
                        "Fn::GetAtt": [
                          "ProjectsDb",
                          "Arn"
                        ]
                      },
                      {
                        "Fn::GetAtt": [
                          "AccountsDb",
                          "Arn"
                        ]
                      },
                      {
                        "Fn::GetAtt": [
                          "KeyPairsDb",
                          "Arn"
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            {
                              "Fn::GetAtt": [
                                "KeyPairsDb",
                                "Arn"
                              ]
                            },
                            "/index/*"
                          ]
                        ]
                      },
                      {
                        "Fn::GetAtt": [
                          "StorageGatewayDb",
                          "Arn"
                        ]
                      }
                    ]
                  }
                }
              },
              {
                "PolicyName": "param-store-access",
                "PolicyDocument": {
                  "Statement": {
                    "Effect": "Allow",
                    "Action": [
                      "ssm:GetParameter"
                    ],
                    "Resource": [
                      {
                        "Fn::Sub": "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/e2etest/swb/*"
                      },
                      {
                        "Fn::Sub": "arn:aws:ssm:${AWS::Region}:*:parameter/aws/service/storagegateway/ami/FILE_S3/latest"
                      }
                    ]
                  }
                }
              },
              {
                "PolicyName": "storage-gateway-access",
                "PolicyDocument": {
                  "Statement": {
                    "Effect": "Allow",
                    "Action": [
                      "storagegateway:CreateNFSFileShare",
                      "storagegateway:ListFileShares",
                      "storagegateway:DescribeNFSFileShares",
                      "storagegateway:UpdateNFSFileShare"
                    ],
                    "Resource": "*"
                  }
                }
              },
              {
                "PolicyName": "iam-pass-role",
                "PolicyDocument": {
                  "Statement": {
                    "Effect": "Allow",
                    "Action": [
                      "iam:PassRole"
                    ],
                    "Resource": "*"
                  }
                }
              },
              {
                "PolicyName": "step-functions-invocation",
                "PolicyDocument": {
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Action": [
                        "states:StartExecution"
                      ],
                      "Resource": [
                        {
                          "Ref": "SMWorkflow"
                        }
                      ]
                    }
                  ]
                }
              },
              {
                "PolicyName": "s3-access",
                "PolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Action": [
                        "s3:*"
                      ],
                      "Resource": [
                        "arn:aws:s3:::684277579687-e2etest-va-swb-studydata/*"
                      ]
                    },
                    {
                      "Effect": "Allow",
                      "Action": [
                        "s3:ListBucket"
                      ],
                      "Resource": [
                        "arn:aws:s3:::684277579687-e2etest-va-swb-studydata"
                      ]
                    },
                    {
                      "Effect": "Allow",
                      "Action": [
                        "kms:GenerateDataKey"
                      ],
                      "Resource": [
                        {
                          "Fn::Sub": "arn:aws:kms:${AWS::Region}:${AWS::AccountId}:alias/684277579687-e2etest-va-swb/s3/studydata"
                        }
                      ]
                    },
                    {
                      "Effect": "Allow",
                      "Action": [
                        "s3:*"
                      ],
                      "Resource": [
                        "arn:aws:s3:::684277579687-e2etest-va-swb-external-templates/*"
                      ]
                    },
                    {
                      "Effect": "Allow",
                      "Action": [
                        "s3:GetBucketPolicy",
                        "s3:PutBucketPolicy"
                      ],
                      "Resource": [
                        "arn:aws:s3:::684277579687-e2etest-va-swb-environments-bootstrap-scripts",
                        "arn:aws:s3:::684277579687-e2etest-va-swb-studydata"
                      ]
                    }
                  ]
                }
              },
              {
                "PolicyName": "env-type-configs-s3-access",
                "PolicyDocument": {
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Action": [
                        "s3:GetObject",
                        "s3:PutObject",
                        "s3:DeleteObject"
                      ],
                      "Resource": [
                        "arn:aws:s3:::684277579687-e2etest-va-swb-env-type-configs/*"
                      ]
                    },
                    {
                      "Effect": "Allow",
                      "Action": [
                        "s3:ListBucket",
                        "s3:HeadBucket"
                      ],
                      "Resource": [
                        "arn:aws:s3:::684277579687-e2etest-va-swb-env-type-configs"
                      ]
                    }
                  ]
                }
              },
              {
                "PolicyName": "sagemaker-access",
                "PolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Action": [
                        "sagemaker:CreatePresignedNotebookInstanceUrl"
                      ],
                      "Resource": [
                        "*"
                      ]
                    }
                  ]
                }
              },
              {
                "PolicyName": "ec2-access",
                "PolicyDocument": {
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Action": [
                        "ec2:*"
                      ],
                      "Resource": "*"
                    }
                  ]
                }
              },
              {
                "PolicyName": "cost-explorer",
                "PolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Action": [
                        "ce:*"
                      ],
                      "Resource": "*"
                    }
                  ]
                }
              },
              {
                "PolicyName": "assume-role",
                "PolicyDocument": {
                  "Statement": {
                    "Action": [
                      "sts:AssumeRole",
                      "sts:GetCallerIdentity"
                    ],
                    "Effect": "Allow",
                    "Resource": "*"
                  }
                }
              },
              {
                "PolicyName": "study-kms-policy-update",
                "PolicyDocument": {
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Action": [
                        "kms:DescribeKey",
                        "kms:GetKeyPolicy",
                        "kms:PutKeyPolicy"
                      ],
                      "Resource": [
                        {
                          "Fn::Sub": "arn:aws:kms:${AWS::Region}:${AWS::AccountId}:alias/684277579687-e2etest-va-swb/s3/studydata"
                        }
                      ]
                    }
                  ]
                }
              }
            ]
          }
        },
        "RoleWorkflowLoopRunner": {
          "Type": "AWS::IAM::Role",
          "Properties": {
            "RoleName": "e2etest-va-swb-WorkflowLoopRunner",
            "AssumeRolePolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Principal": {
                    "Service": "lambda.amazonaws.com"
                  },
                  "Action": "sts:AssumeRole"
                }
              ]
            },
            "ManagedPolicyArns": [
              "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
            ],
            "Policies": [
              {
                "PolicyName": "db-access",
                "PolicyDocument": {
                  "Statement": {
                    "Effect": "Allow",
                    "Action": [
                      "dynamodb:DeleteItem",
                      "dynamodb:GetItem",
                      "dynamodb:BatchGetItem",
                      "dynamodb:PutItem",
                      "dynamodb:Query",
                      "dynamodb:Scan",
                      "dynamodb:UpdateItem"
                    ],
                    "Resource": [
                      {
                        "Fn::GetAtt": [
                          "PasswordsDb",
                          "Arn"
                        ]
                      },
                      {
                        "Fn::GetAtt": [
                          "UsersDb",
                          "Arn"
                        ]
                      },
                      {
                        "Fn::GetAtt": [
                          "LocksDb",
                          "Arn"
                        ]
                      },
                      {
                        "Fn::GetAtt": [
                          "StepTemplatesDb",
                          "Arn"
                        ]
                      },
                      {
                        "Fn::GetAtt": [
                          "WorkflowTemplatesDb",
                          "Arn"
                        ]
                      },
                      {
                        "Fn::GetAtt": [
                          "WorkflowTemplateDraftsDb",
                          "Arn"
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            {
                              "Fn::GetAtt": [
                                "WorkflowTemplateDraftsDb",
                                "Arn"
                              ]
                            },
                            "/index/*"
                          ]
                        ]
                      },
                      {
                        "Fn::GetAtt": [
                          "WorkflowsDb",
                          "Arn"
                        ]
                      },
                      {
                        "Fn::GetAtt": [
                          "WorkflowDraftsDb",
                          "Arn"
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            {
                              "Fn::GetAtt": [
                                "WorkflowDraftsDb",
                                "Arn"
                              ]
                            },
                            "/index/*"
                          ]
                        ]
                      },
                      {
                        "Fn::GetAtt": [
                          "WorkflowInstancesDb",
                          "Arn"
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            {
                              "Fn::GetAtt": [
                                "WorkflowInstancesDb",
                                "Arn"
                              ]
                            },
                            "/index/*"
                          ]
                        ]
                      },
                      {
                        "Fn::GetAtt": [
                          "WfAssignmentsDb",
                          "Arn"
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            {
                              "Fn::GetAtt": [
                                "WfAssignmentsDb",
                                "Arn"
                              ]
                            },
                            "/index/*"
                          ]
                        ]
                      },
                      {
                        "Fn::GetAtt": [
                          "EnvironmentsDb",
                          "Arn"
                        ]
                      },
                      {
                        "Fn::GetAtt": [
                          "EnvironmentsScDb",
                          "Arn"
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            {
                              "Fn::GetAtt": [
                                "EnvironmentsScDb",
                                "Arn"
                              ]
                            },
                            "/index/*"
                          ]
                        ]
                      },
                      {
                        "Fn::GetAtt": [
                          "EnvironmentsTypesDb",
                          "Arn"
                        ]
                      },
                      {
                        "Fn::GetAtt": [
                          "StudiesDb",
                          "Arn"
                        ]
                      },
                      {
                        "Fn::GetAtt": [
                          "ProjectsDb",
                          "Arn"
                        ]
                      },
                      {
                        "Fn::GetAtt": [
                          "StudyPermissionsDb",
                          "Arn"
                        ]
                      },
                      {
                        "Fn::GetAtt": [
                          "IndexesDb",
                          "Arn"
                        ]
                      },
                      {
                        "Fn::GetAtt": [
                          "ProjectsDb",
                          "Arn"
                        ]
                      },
                      {
                        "Fn::GetAtt": [
                          "AccountsDb",
                          "Arn"
                        ]
                      },
                      {
                        "Fn::GetAtt": [
                          "AwsAccountsDb",
                          "Arn"
                        ]
                      },
                      {
                        "Fn::GetAtt": [
                          "AuthenticationProviderTypesDb",
                          "Arn"
                        ]
                      },
                      {
                        "Fn::GetAtt": [
                          "AuthenticationProviderConfigsDb",
                          "Arn"
                        ]
                      },
                      {
                        "Fn::GetAtt": [
                          "RevokedTokensDb",
                          "Arn"
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            {
                              "Fn::GetAtt": [
                                "StudiesDb",
                                "Arn"
                              ]
                            },
                            "/index/*"
                          ]
                        ]
                      },
                      {
                        "Fn::GetAtt": [
                          "IndexesDb",
                          "Arn"
                        ]
                      },
                      {
                        "Fn::GetAtt": [
                          "CostApiCachesDb",
                          "Arn"
                        ]
                      },
                      {
                        "Fn::GetAtt": [
                          "UserRolesDb",
                          "Arn"
                        ]
                      },
                      {
                        "Fn::GetAtt": [
                          "StorageGatewayDb",
                          "Arn"
                        ]
                      }
                    ]
                  }
                }
              },
              {
                "PolicyName": "param-store-access",
                "PolicyDocument": {
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Action": [
                        "ssm:GetParameter"
                      ],
                      "Resource": [
                        {
                          "Fn::Sub": "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/e2etest/swb/*"
                        },
                        {
                          "Fn::Sub": "arn:aws:ssm:${AWS::Region}:*:parameter/aws/service/storagegateway/ami/FILE_S3/latest"
                        }
                      ]
                    },
                    {
                      "Effect": "Allow",
                      "Action": [
                        "ssm:PutParameter",
                        "ssm:DeleteParameter"
                      ],
                      "Resource": [
                        {
                          "Fn::Sub": "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/e2etest/swb/*"
                        }
                      ]
                    }
                  ]
                }
              },
              {
                "PolicyName": "dns-record-access",
                "PolicyDocument": {
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Action": [
                        "route53:ChangeResourceRecordSets"
                      ],
                      "Resource": "arn:aws:route53:::hostedzone/NotSetAsCustomDomainDisabled"
                    }
                  ]
                }
              },
              {
                "PolicyName": "ec2-access",
                "PolicyDocument": {
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Action": [
                        "ec2:*"
                      ],
                      "Resource": "*"
                    }
                  ]
                }
              },
              {
                "PolicyName": "storage-gateway",
                "PolicyDocument": {
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Action": [
                        "storagegateway:ActivateGateway",
                        "storagegateway:ListLocalDisks",
                        "storagegateway:AddCache",
                        "storagegateway:DeleteGateway",
                        "storagegateway:CreateNFSFileShare",
                        "storagegateway:ListFileShares",
                        "storagegateway:DescribeNFSFileShares",
                        "storagegateway:UpdateNFSFileShare"
                      ],
                      "Resource": "*"
                    }
                  ]
                }
              },
              {
                "PolicyName": "study-s3-policy-update",
                "PolicyDocument": {
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Action": [
                        "s3:GetBucketPolicy",
                        "s3:PutBucketPolicy"
                      ],
                      "Resource": [
                        "arn:aws:s3:::684277579687-e2etest-va-swb-studydata",
                        "arn:aws:s3:::684277579687-e2etest-va-swb-artifacts",
                        "arn:aws:s3:::684277579687-e2etest-va-swb-environments-bootstrap-scripts"
                      ]
                    }
                  ]
                }
              },
              {
                "PolicyName": "study-kms-policy-update",
                "PolicyDocument": {
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Action": [
                        "kms:DescribeKey",
                        "kms:GetKeyPolicy",
                        "kms:PutKeyPolicy"
                      ],
                      "Resource": [
                        {
                          "Fn::Sub": "arn:aws:kms:${AWS::Region}:${AWS::AccountId}:alias/684277579687-e2etest-va-swb/s3/studydata"
                        }
                      ]
                    }
                  ]
                }
              },
              {
                "PolicyName": "cfn-access",
                "PolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Action": [
                        "cloudformation:CreateStack",
                        "cloudformation:DeleteStack",
                        "cloudformation:DescribeStacks"
                      ],
                      "Resource": "*"
                    }
                  ]
                }
              },
              {
                "PolicyName": "assume-role",
                "PolicyDocument": {
                  "Statement": {
                    "Action": "sts:AssumeRole",
                    "Effect": "Allow",
                    "Resource": "*"
                  }
                }
              },
              {
                "PolicyName": "env-type-configs-s3-access",
                "PolicyDocument": {
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Action": [
                        "s3:GetObject",
                        "s3:PutObject",
                        "s3:DeleteObject"
                      ],
                      "Resource": [
                        "arn:aws:s3:::684277579687-e2etest-va-swb-env-type-configs/*"
                      ]
                    },
                    {
                      "Effect": "Allow",
                      "Action": [
                        "s3:ListBucket",
                        "s3:HeadBucket"
                      ],
                      "Resource": [
                        "arn:aws:s3:::684277579687-e2etest-va-swb-env-type-configs"
                      ]
                    }
                  ]
                }
              }
            ]
          }
        },
        "RoleStepFunctionsWorkflow": {
          "Type": "AWS::IAM::Role",
          "Properties": {
            "AssumeRolePolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Principal": {
                    "Service": {
                      "Fn::Sub": "states.${AWS::Region}.amazonaws.com"
                    }
                  },
                  "Action": "sts:AssumeRole"
                }
              ]
            },
            "ManagedPolicyArns": [
              "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
            ],
            "Policies": [
              {
                "PolicyName": "lambda",
                "PolicyDocument": {
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Action": "lambda:InvokeFunction",
                      "Resource": [
                        {
                          "Fn::GetAtt": [
                            "WorkflowLoopRunnerLambdaFunction",
                            "Arn"
                          ]
                        }
                      ]
                    }
                  ]
                }
              }
            ]
          }
        },
        "RoleOpenDataScrapeHandler": {
          "Type": "AWS::IAM::Role",
          "Properties": {
            "AssumeRolePolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Principal": {
                    "Service": "lambda.amazonaws.com"
                  },
                  "Action": "sts:AssumeRole"
                }
              ]
            },
            "ManagedPolicyArns": [
              "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
            ],
            "Policies": [
              {
                "PolicyName": "db-access",
                "PolicyDocument": {
                  "Statement": {
                    "Effect": "Allow",
                    "Action": [
                      "dynamodb:DeleteItem",
                      "dynamodb:GetItem",
                      "dynamodb:PutItem",
                      "dynamodb:Query",
                      "dynamodb:Scan",
                      "dynamodb:UpdateItem"
                    ],
                    "Resource": [
                      {
                        "Fn::GetAtt": [
                          "StudiesDb",
                          "Arn"
                        ]
                      }
                    ]
                  }
                }
              }
            ]
          }
        },
        "RoleEnvStatusPollHandler": {
          "Type": "AWS::IAM::Role",
          "Properties": {
            "AssumeRolePolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Principal": {
                    "Service": "lambda.amazonaws.com"
                  },
                  "Action": "sts:AssumeRole"
                }
              ]
            },
            "ManagedPolicyArns": [
              "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
            ],
            "Policies": [
              {
                "PolicyName": "db-environment-access",
                "PolicyDocument": {
                  "Statement": {
                    "Effect": "Allow",
                    "Action": [
                      "dynamodb:GetItem",
                      "dynamodb:Query",
                      "dynamodb:Scan",
                      "dynamodb:UpdateItem"
                    ],
                    "Resource": [
                      {
                        "Fn::GetAtt": [
                          "EnvironmentsScDb",
                          "Arn"
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            {
                              "Fn::GetAtt": [
                                "EnvironmentsScDb",
                                "Arn"
                              ]
                            },
                            "/index/*"
                          ]
                        ]
                      }
                    ]
                  }
                }
              },
              {
                "PolicyName": "db-scan",
                "PolicyDocument": {
                  "Statement": {
                    "Effect": "Allow",
                    "Action": [
                      "dynamodb:Scan"
                    ],
                    "Resource": [
                      {
                        "Fn::GetAtt": [
                          "IndexesDb",
                          "Arn"
                        ]
                      },
                      {
                        "Fn::GetAtt": [
                          "ProjectsDb",
                          "Arn"
                        ]
                      },
                      {
                        "Fn::GetAtt": [
                          "AwsAccountsDb",
                          "Arn"
                        ]
                      }
                    ]
                  }
                }
              },
              {
                "PolicyName": "assume-role",
                "PolicyDocument": {
                  "Statement": {
                    "Action": "sts:AssumeRole",
                    "Effect": "Allow",
                    "Resource": "*"
                  }
                }
              }
            ]
          }
        },
        "RoleEnvMgmt": {
          "Type": "AWS::IAM::Role",
          "Properties": {
            "RoleName": "e2etest-va-swb-EnvMgmt",
            "AssumeRolePolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Principal": {
                    "AWS": {
                      "Fn::Sub": "${AWS::AccountId}"
                    }
                  },
                  "Action": "sts:AssumeRole"
                }
              ]
            },
            "ManagedPolicyArns": [
              "arn:aws:iam::aws:policy/AWSServiceCatalogAdminFullAccess"
            ],
            "Policies": [
              {
                "PolicyName": "ec2-access",
                "PolicyDocument": {
                  "Statement": {
                    "Action": [
                      "ec2:CreateKeyPair",
                      "ec2:DeleteKeyPair",
                      "ec2:GetPasswordData",
                      "ec2:ModifyImageAttribute",
                      "ec2:DescribeImages",
                      "ec2:DescribeInstances",
                      "ec2-instance-connect:SendSSHPublicKey"
                    ],
                    "Effect": "Allow",
                    "Resource": "*"
                  }
                }
              },
              {
                "PolicyName": "param-store-access",
                "PolicyDocument": {
                  "Statement": {
                    "Effect": "Allow",
                    "Action": [
                      "ssm:PutParameter",
                      "ssm:GetParameter",
                      "ssm:GetParameters",
                      "ssm:DeleteParameter"
                    ],
                    "Resource": {
                      "Fn::Sub": "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/e2etest/swb/*"
                    }
                  }
                }
              },
              {
                "PolicyName": "cfn-read-access",
                "PolicyDocument": {
                  "Statement": {
                    "Effect": "Allow",
                    "Action": [
                      "s3:GetObject"
                    ],
                    "Resource": [
                      "*"
                    ]
                  }
                }
              },
              {
                "PolicyName": "iam-role-access",
                "PolicyDocument": {
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Action": [
                        "iam:GetRole",
                        "iam:CreateRole",
                        "iam:TagRole",
                        "iam:GetRolePolicy",
                        "iam:PutRolePolicy",
                        "iam:DeleteRolePolicy",
                        "iam:ListRolePolicies",
                        "iam:ListAttachedRolePolicies",
                        "iam:UpdateAssumeRolePolicy",
                        "iam:UpdateRoleDescription",
                        "iam:AttachRolePolicy",
                        "iam:DetachRolePolicy"
                      ],
                      "Resource": [
                        {
                          "Fn::Sub": "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/e2etest-va-swb-*"
                        }
                      ]
                    },
                    {
                      "Effect": "Allow",
                      "Action": [
                        "iam:CreatePolicy",
                        "iam:GetPolicy",
                        "iam:GetPolicyVersion",
                        "iam:ListPolicyVersions",
                        "iam:DeletePolicy",
                        "iam:DeletePolicyVersion"
                      ],
                      "Resource": [
                        {
                          "Fn::Sub": "arn:${AWS::Partition}:iam::${AWS::AccountId}:policy/*"
                        }
                      ]
                    }
                  ]
                }
              }
            ]
          }
        },
        "SMWorkflow": {
          "Type": "AWS::StepFunctions::StateMachine",
          "Properties": {
            "StateMachineName": "e2etest-va-swb-workflow",
            "DefinitionString": {
              "Fn::Sub": "{\n  \"Comment\": \"Workflow State Machine\",\n  \"StartAt\": \"WorkflowLoopRunner\",\n  \"Version\": \"1.0\",\n  \"States\": {\n    \"WorkflowLoopRunner\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"${WorkflowLoopRunnerLambdaFunction.Arn}\",\n      \"ResultPath\": \"$.loop\",\n      \"Next\": \"MakeAChoice\",\n      \"Catch\": [{\n        \"ErrorEquals\": [\"States.ALL\"],\n        \"ResultPath\": \"$.error\",\n        \"Next\": \"Failed\"\n      }]\n    },\n    \"MakeAChoice\": {\n      \"Type\": \"Choice\",\n      \"Choices\": [{\n        \"Variable\": \"$.loop.shouldWait\",\n        \"NumericEquals\": 1,\n        \"Next\": \"LetsWait\"\n      }, {\n        \"Variable\": \"$.loop.shouldLoop\",\n        \"NumericEquals\": 1,\n        \"Next\": \"WorkflowLoopRunner\"\n      }, {\n        \"Variable\": \"$.loop.shouldPass\",\n        \"NumericEquals\": 1,\n        \"Next\": \"Passed\"\n      }, {\n        \"Variable\": \"$.loop.shouldFail\",\n        \"NumericEquals\": 1,\n        \"Next\": \"Failed\"\n      }],\n      \"Default\": \"Failed\"\n    },\n    \"LetsWait\": {\n      \"Type\": \"Wait\",\n      \"SecondsPath\": \"$.loop.wait\",\n      \"Next\": \"WorkflowLoopRunner\"\n    },\n    \"Passed\": {\n      \"Type\": \"Pass\",\n      \"End\": true\n    },\n    \"Failed\": {\n      \"Type\": \"Fail\"\n    }\n  }\n}\n"
            },
            "RoleArn": {
              "Fn::GetAtt": [
                "RoleStepFunctionsWorkflow",
                "Arn"
              ]
            }
          }
        },
        "PasswordsDb": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "e2etest-va-swb-Passwords",
            "AttributeDefinitions": [
              {
                "AttributeName": "username",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "username",
                "KeyType": "HASH"
              }
            ],
            "BillingMode": "PAY_PER_REQUEST"
          }
        },
        "UserApiKeysDb": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "e2etest-va-swb-UserApiKeys",
            "AttributeDefinitions": [
              {
                "AttributeName": "id",
                "AttributeType": "S"
              },
              {
                "AttributeName": "uid",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "id",
                "KeyType": "HASH"
              }
            ],
            "BillingMode": "PAY_PER_REQUEST",
            "GlobalSecondaryIndexes": [
              {
                "IndexName": "ByUID",
                "KeySchema": [
                  {
                    "AttributeName": "uid",
                    "KeyType": "HASH"
                  }
                ],
                "Projection": {
                  "ProjectionType": "ALL"
                }
              }
            ]
          }
        },
        "UsersDb": {
          "Type": "AWS::DynamoDB::Table",
          "DependsOn": "PasswordsDb",
          "Properties": {
            "TableName": "e2etest-va-swb-Users",
            "AttributeDefinitions": [
              {
                "AttributeName": "uid",
                "AttributeType": "S"
              },
              {
                "AttributeName": "username",
                "AttributeType": "S"
              },
              {
                "AttributeName": "ns",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "uid",
                "KeyType": "HASH"
              }
            ],
            "BillingMode": "PAY_PER_REQUEST",
            "GlobalSecondaryIndexes": [
              {
                "IndexName": "Principal",
                "KeySchema": [
                  {
                    "AttributeName": "username",
                    "KeyType": "HASH"
                  },
                  {
                    "AttributeName": "ns",
                    "KeyType": "RANGE"
                  }
                ],
                "Projection": {
                  "ProjectionType": "ALL"
                }
              }
            ]
          }
        },
        "AuthenticationProviderTypesDb": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "e2etest-va-swb-AuthenticationProviderTypes",
            "AttributeDefinitions": [
              {
                "AttributeName": "type",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "type",
                "KeyType": "HASH"
              }
            ],
            "BillingMode": "PAY_PER_REQUEST"
          }
        },
        "AuthenticationProviderConfigsDb": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "e2etest-va-swb-AuthenticationProviderConfigs",
            "AttributeDefinitions": [
              {
                "AttributeName": "id",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "id",
                "KeyType": "HASH"
              }
            ],
            "BillingMode": "PAY_PER_REQUEST"
          }
        },
        "RevokedTokensDb": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "e2etest-va-swb-RevokedTokens",
            "AttributeDefinitions": [
              {
                "AttributeName": "id",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "id",
                "KeyType": "HASH"
              }
            ],
            "TimeToLiveSpecification": {
              "AttributeName": "ttl",
              "Enabled": true
            },
            "BillingMode": "PAY_PER_REQUEST"
          }
        },
        "LocksDb": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "e2etest-va-swb-Locks",
            "AttributeDefinitions": [
              {
                "AttributeName": "id",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "id",
                "KeyType": "HASH"
              }
            ],
            "TimeToLiveSpecification": {
              "AttributeName": "ttl",
              "Enabled": true
            },
            "BillingMode": "PAY_PER_REQUEST"
          }
        },
        "StudiesDb": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "e2etest-va-swb-Studies",
            "AttributeDefinitions": [
              {
                "AttributeName": "id",
                "AttributeType": "S"
              },
              {
                "AttributeName": "category",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "id",
                "KeyType": "HASH"
              }
            ],
            "BillingMode": "PAY_PER_REQUEST",
            "GlobalSecondaryIndexes": [
              {
                "IndexName": "CategoryIndex",
                "KeySchema": [
                  {
                    "AttributeName": "category",
                    "KeyType": "HASH"
                  }
                ],
                "Projection": {
                  "ProjectionType": "ALL"
                }
              }
            ]
          }
        },
        "StepTemplatesDb": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "e2etest-va-swb-StepTemplates",
            "AttributeDefinitions": [
              {
                "AttributeName": "id",
                "AttributeType": "S"
              },
              {
                "AttributeName": "ver",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "id",
                "KeyType": "HASH"
              },
              {
                "AttributeName": "ver",
                "KeyType": "RANGE"
              }
            ],
            "BillingMode": "PAY_PER_REQUEST"
          }
        },
        "WorkflowTemplatesDb": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "e2etest-va-swb-WorkflowTemplates",
            "AttributeDefinitions": [
              {
                "AttributeName": "id",
                "AttributeType": "S"
              },
              {
                "AttributeName": "ver",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "id",
                "KeyType": "HASH"
              },
              {
                "AttributeName": "ver",
                "KeyType": "RANGE"
              }
            ],
            "BillingMode": "PAY_PER_REQUEST"
          }
        },
        "WorkflowsDb": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "e2etest-va-swb-Workflows",
            "AttributeDefinitions": [
              {
                "AttributeName": "id",
                "AttributeType": "S"
              },
              {
                "AttributeName": "ver",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "id",
                "KeyType": "HASH"
              },
              {
                "AttributeName": "ver",
                "KeyType": "RANGE"
              }
            ],
            "BillingMode": "PAY_PER_REQUEST"
          }
        },
        "WorkflowTemplateDraftsDb": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "e2etest-va-swb-WorkflowTemplateDrafts",
            "AttributeDefinitions": [
              {
                "AttributeName": "id",
                "AttributeType": "S"
              },
              {
                "AttributeName": "uid",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "id",
                "KeyType": "HASH"
              }
            ],
            "BillingMode": "PAY_PER_REQUEST",
            "GlobalSecondaryIndexes": [
              {
                "IndexName": "ByUID",
                "KeySchema": [
                  {
                    "AttributeName": "uid",
                    "KeyType": "HASH"
                  }
                ],
                "Projection": {
                  "ProjectionType": "ALL"
                }
              }
            ]
          }
        },
        "WorkflowDraftsDb": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "e2etest-va-swb-WorkflowDrafts",
            "AttributeDefinitions": [
              {
                "AttributeName": "id",
                "AttributeType": "S"
              },
              {
                "AttributeName": "uid",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "id",
                "KeyType": "HASH"
              }
            ],
            "BillingMode": "PAY_PER_REQUEST",
            "GlobalSecondaryIndexes": [
              {
                "IndexName": "ByUID",
                "KeySchema": [
                  {
                    "AttributeName": "uid",
                    "KeyType": "HASH"
                  }
                ],
                "Projection": {
                  "ProjectionType": "ALL"
                }
              }
            ]
          }
        },
        "WorkflowInstancesDb": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "e2etest-va-swb-WorkflowInstances",
            "AttributeDefinitions": [
              {
                "AttributeName": "id",
                "AttributeType": "S"
              },
              {
                "AttributeName": "createdAt",
                "AttributeType": "S"
              },
              {
                "AttributeName": "wf",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "id",
                "KeyType": "HASH"
              }
            ],
            "TimeToLiveSpecification": {
              "AttributeName": "ttl",
              "Enabled": true
            },
            "BillingMode": "PAY_PER_REQUEST",
            "GlobalSecondaryIndexes": [
              {
                "IndexName": "WorkflowIndex",
                "KeySchema": [
                  {
                    "AttributeName": "wf",
                    "KeyType": "HASH"
                  },
                  {
                    "AttributeName": "createdAt",
                    "KeyType": "RANGE"
                  }
                ],
                "Projection": {
                  "ProjectionType": "ALL"
                }
              }
            ]
          }
        },
        "WfAssignmentsDb": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "e2etest-va-swb-WfAssignments",
            "AttributeDefinitions": [
              {
                "AttributeName": "id",
                "AttributeType": "S"
              },
              {
                "AttributeName": "triggerType",
                "AttributeType": "S"
              },
              {
                "AttributeName": "triggerTypeData",
                "AttributeType": "S"
              },
              {
                "AttributeName": "wf",
                "AttributeType": "S"
              },
              {
                "AttributeName": "createdAt",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "id",
                "KeyType": "HASH"
              }
            ],
            "BillingMode": "PAY_PER_REQUEST",
            "GlobalSecondaryIndexes": [
              {
                "IndexName": "WorkflowIndex",
                "KeySchema": [
                  {
                    "AttributeName": "wf",
                    "KeyType": "HASH"
                  },
                  {
                    "AttributeName": "createdAt",
                    "KeyType": "RANGE"
                  }
                ],
                "Projection": {
                  "ProjectionType": "ALL"
                }
              },
              {
                "IndexName": "TypeIndex",
                "KeySchema": [
                  {
                    "AttributeName": "triggerType",
                    "KeyType": "HASH"
                  },
                  {
                    "AttributeName": "triggerTypeData",
                    "KeyType": "RANGE"
                  }
                ],
                "Projection": {
                  "ProjectionType": "ALL"
                }
              }
            ]
          }
        },
        "EnvironmentsDb": {
          "Type": "AWS::DynamoDB::Table",
          "DependsOn": "AccountsDb",
          "Properties": {
            "TableName": "e2etest-va-swb-Environments",
            "AttributeDefinitions": [
              {
                "AttributeName": "id",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "id",
                "KeyType": "HASH"
              }
            ],
            "BillingMode": "PAY_PER_REQUEST"
          }
        },
        "EnvironmentsScDb": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "e2etest-va-swb-EnvironmentsSc",
            "AttributeDefinitions": [
              {
                "AttributeName": "id",
                "AttributeType": "S"
              },
              {
                "AttributeName": "createdBy",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "id",
                "KeyType": "HASH"
              }
            ],
            "GlobalSecondaryIndexes": [
              {
                "IndexName": "ByOwnerUID",
                "KeySchema": [
                  {
                    "AttributeName": "createdBy",
                    "KeyType": "HASH"
                  }
                ],
                "Projection": {
                  "ProjectionType": "ALL"
                }
              }
            ],
            "BillingMode": "PAY_PER_REQUEST"
          }
        },
        "EnvironmentsTypesDb": {
          "Type": "AWS::DynamoDB::Table",
          "DependsOn": "UserRolesDb",
          "Properties": {
            "TableName": "e2etest-va-swb-EnvironmentTypes",
            "AttributeDefinitions": [
              {
                "AttributeName": "id",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "id",
                "KeyType": "HASH"
              }
            ],
            "BillingMode": "PAY_PER_REQUEST"
          }
        },
        "UserRolesDb": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "e2etest-va-swb-UserRoles",
            "AttributeDefinitions": [
              {
                "AttributeName": "id",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "id",
                "KeyType": "HASH"
              }
            ],
            "BillingMode": "PAY_PER_REQUEST"
          }
        },
        "AwsAccountsDb": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "e2etest-va-swb-AwsAccounts",
            "AttributeDefinitions": [
              {
                "AttributeName": "id",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "id",
                "KeyType": "HASH"
              }
            ],
            "BillingMode": "PAY_PER_REQUEST"
          }
        },
        "IndexesDb": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "e2etest-va-swb-Indexes",
            "AttributeDefinitions": [
              {
                "AttributeName": "id",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "id",
                "KeyType": "HASH"
              }
            ],
            "BillingMode": "PAY_PER_REQUEST"
          }
        },
        "CostApiCachesDb": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "e2etest-va-swb-CostApiCaches",
            "AttributeDefinitions": [
              {
                "AttributeName": "indexId",
                "AttributeType": "S"
              },
              {
                "AttributeName": "query",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "indexId",
                "KeyType": "HASH"
              },
              {
                "AttributeName": "query",
                "KeyType": "RANGE"
              }
            ],
            "BillingMode": "PAY_PER_REQUEST"
          }
        },
        "AccountsDb": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "e2etest-va-swb-Accounts",
            "AttributeDefinitions": [
              {
                "AttributeName": "id",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "id",
                "KeyType": "HASH"
              }
            ],
            "BillingMode": "PAY_PER_REQUEST"
          }
        },
        "ProjectsDb": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "e2etest-va-swb-Projects",
            "AttributeDefinitions": [
              {
                "AttributeName": "id",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "id",
                "KeyType": "HASH"
              }
            ],
            "BillingMode": "PAY_PER_REQUEST"
          }
        },
        "StudyPermissionsDb": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "e2etest-va-swb-StudyPermissions",
            "AttributeDefinitions": [
              {
                "AttributeName": "id",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "id",
                "KeyType": "HASH"
              }
            ],
            "BillingMode": "PAY_PER_REQUEST"
          }
        },
        "KeyPairsDb": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "e2etest-va-swb-KeyPairs",
            "AttributeDefinitions": [
              {
                "AttributeName": "id",
                "AttributeType": "S"
              },
              {
                "AttributeName": "uid",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "id",
                "KeyType": "HASH"
              }
            ],
            "GlobalSecondaryIndexes": [
              {
                "IndexName": "ByUID",
                "KeySchema": [
                  {
                    "AttributeName": "uid",
                    "KeyType": "HASH"
                  }
                ],
                "Projection": {
                  "ProjectionType": "ALL"
                }
              }
            ],
            "BillingMode": "PAY_PER_REQUEST"
          }
        },
        "StorageGatewayDb": {
          "Type": "AWS::DynamoDB::Table",
          "DependsOn": "StudiesDb",
          "Properties": {
            "TableName": "e2etest-va-swb-StorageGateway",
            "AttributeDefinitions": [
              {
                "AttributeName": "id",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "id",
                "KeyType": "HASH"
              }
            ],
            "BillingMode": "PAY_PER_REQUEST"
          }
        },
        "DbPasswords": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "e2etest-va-swb-DbPasswords",
            "AttributeDefinitions": [
              {
                "AttributeName": "username",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "username",
                "KeyType": "HASH"
              }
            ],
            "BillingMode": "PAY_PER_REQUEST"
          }
        },
        "DbUserApiKeys": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "e2etest-va-swb-DbUserApiKeys",
            "AttributeDefinitions": [
              {
                "AttributeName": "unameWithNs",
                "AttributeType": "S"
              },
              {
                "AttributeName": "id",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "unameWithNs",
                "KeyType": "HASH"
              },
              {
                "AttributeName": "id",
                "KeyType": "RANGE"
              }
            ],
            "BillingMode": "PAY_PER_REQUEST"
          }
        },
        "DbUsers": {
          "Type": "AWS::DynamoDB::Table",
          "DependsOn": "DbPasswords",
          "Properties": {
            "TableName": "e2etest-va-swb-DbUsers",
            "AttributeDefinitions": [
              {
                "AttributeName": "username",
                "AttributeType": "S"
              },
              {
                "AttributeName": "ns",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "username",
                "KeyType": "HASH"
              },
              {
                "AttributeName": "ns",
                "KeyType": "RANGE"
              }
            ],
            "BillingMode": "PAY_PER_REQUEST"
          }
        },
        "DbAuthenticationProviderTypes": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "e2etest-va-swb-DbAuthenticationProviderTypes",
            "AttributeDefinitions": [
              {
                "AttributeName": "type",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "type",
                "KeyType": "HASH"
              }
            ],
            "BillingMode": "PAY_PER_REQUEST"
          }
        },
        "DbAuthenticationProviderConfigs": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "e2etest-va-swb-DbAuthenticationProviderConfigs",
            "AttributeDefinitions": [
              {
                "AttributeName": "id",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "id",
                "KeyType": "HASH"
              }
            ],
            "BillingMode": "PAY_PER_REQUEST"
          }
        },
        "DbRevokedTokens": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "e2etest-va-swb-DbRevokedTokens",
            "AttributeDefinitions": [
              {
                "AttributeName": "id",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "id",
                "KeyType": "HASH"
              }
            ],
            "TimeToLiveSpecification": {
              "AttributeName": "ttl",
              "Enabled": true
            },
            "BillingMode": "PAY_PER_REQUEST"
          }
        },
        "DbLocks": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "e2etest-va-swb-DbLocks",
            "AttributeDefinitions": [
              {
                "AttributeName": "id",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "id",
                "KeyType": "HASH"
              }
            ],
            "TimeToLiveSpecification": {
              "AttributeName": "ttl",
              "Enabled": true
            },
            "BillingMode": "PAY_PER_REQUEST"
          }
        },
        "DbStudies": {
          "Type": "AWS::DynamoDB::Table",
          "DependsOn": "DbLocks",
          "Properties": {
            "TableName": "e2etest-va-swb-DbStudies",
            "AttributeDefinitions": [
              {
                "AttributeName": "id",
                "AttributeType": "S"
              },
              {
                "AttributeName": "category",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "id",
                "KeyType": "HASH"
              }
            ],
            "BillingMode": "PAY_PER_REQUEST",
            "GlobalSecondaryIndexes": [
              {
                "IndexName": "CategoryIndex",
                "KeySchema": [
                  {
                    "AttributeName": "category",
                    "KeyType": "HASH"
                  }
                ],
                "Projection": {
                  "ProjectionType": "ALL"
                }
              }
            ]
          }
        },
        "DbStepTemplates": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "e2etest-va-swb-DbStepTemplates",
            "AttributeDefinitions": [
              {
                "AttributeName": "id",
                "AttributeType": "S"
              },
              {
                "AttributeName": "ver",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "id",
                "KeyType": "HASH"
              },
              {
                "AttributeName": "ver",
                "KeyType": "RANGE"
              }
            ],
            "BillingMode": "PAY_PER_REQUEST"
          }
        },
        "DbWorkflowTemplates": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "e2etest-va-swb-DbWorkflowTemplates",
            "AttributeDefinitions": [
              {
                "AttributeName": "id",
                "AttributeType": "S"
              },
              {
                "AttributeName": "ver",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "id",
                "KeyType": "HASH"
              },
              {
                "AttributeName": "ver",
                "KeyType": "RANGE"
              }
            ],
            "BillingMode": "PAY_PER_REQUEST"
          }
        },
        "DbWorkflows": {
          "Type": "AWS::DynamoDB::Table",
          "DependsOn": "DbWorkflowInstances",
          "Properties": {
            "TableName": "e2etest-va-swb-DbWorkflows",
            "AttributeDefinitions": [
              {
                "AttributeName": "id",
                "AttributeType": "S"
              },
              {
                "AttributeName": "ver",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "id",
                "KeyType": "HASH"
              },
              {
                "AttributeName": "ver",
                "KeyType": "RANGE"
              }
            ],
            "BillingMode": "PAY_PER_REQUEST"
          }
        },
        "DbWorkflowTemplateDrafts": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "e2etest-va-swb-DbWorkflowTemplateDrafts",
            "AttributeDefinitions": [
              {
                "AttributeName": "id",
                "AttributeType": "S"
              },
              {
                "AttributeName": "username",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "id",
                "KeyType": "HASH"
              }
            ],
            "BillingMode": "PAY_PER_REQUEST",
            "GlobalSecondaryIndexes": [
              {
                "IndexName": "UsernameIndex",
                "KeySchema": [
                  {
                    "AttributeName": "username",
                    "KeyType": "HASH"
                  }
                ],
                "Projection": {
                  "ProjectionType": "ALL"
                }
              }
            ]
          }
        },
        "DbWorkflowDrafts": {
          "Type": "AWS::DynamoDB::Table",
          "DependsOn": "DbWorkflowTemplates",
          "Properties": {
            "TableName": "e2etest-va-swb-DbWorkflowDrafts",
            "AttributeDefinitions": [
              {
                "AttributeName": "id",
                "AttributeType": "S"
              },
              {
                "AttributeName": "username",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "id",
                "KeyType": "HASH"
              }
            ],
            "BillingMode": "PAY_PER_REQUEST",
            "GlobalSecondaryIndexes": [
              {
                "IndexName": "UsernameIndex",
                "KeySchema": [
                  {
                    "AttributeName": "username",
                    "KeyType": "HASH"
                  }
                ],
                "Projection": {
                  "ProjectionType": "ALL"
                }
              }
            ]
          }
        },
        "DbWorkflowInstances": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "e2etest-va-swb-DbWorkflowInstances",
            "AttributeDefinitions": [
              {
                "AttributeName": "id",
                "AttributeType": "S"
              },
              {
                "AttributeName": "createdAt",
                "AttributeType": "S"
              },
              {
                "AttributeName": "wf",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "id",
                "KeyType": "HASH"
              }
            ],
            "TimeToLiveSpecification": {
              "AttributeName": "ttl",
              "Enabled": true
            },
            "BillingMode": "PAY_PER_REQUEST",
            "GlobalSecondaryIndexes": [
              {
                "IndexName": "WorkflowIndex",
                "KeySchema": [
                  {
                    "AttributeName": "wf",
                    "KeyType": "HASH"
                  },
                  {
                    "AttributeName": "createdAt",
                    "KeyType": "RANGE"
                  }
                ],
                "Projection": {
                  "ProjectionType": "ALL"
                }
              }
            ]
          }
        },
        "DbWfAssignments": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "e2etest-va-swb-DbWfAssignments",
            "AttributeDefinitions": [
              {
                "AttributeName": "id",
                "AttributeType": "S"
              },
              {
                "AttributeName": "triggerType",
                "AttributeType": "S"
              },
              {
                "AttributeName": "triggerTypeData",
                "AttributeType": "S"
              },
              {
                "AttributeName": "wf",
                "AttributeType": "S"
              },
              {
                "AttributeName": "createdAt",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "id",
                "KeyType": "HASH"
              }
            ],
            "BillingMode": "PAY_PER_REQUEST",
            "GlobalSecondaryIndexes": [
              {
                "IndexName": "WorkflowIndex",
                "KeySchema": [
                  {
                    "AttributeName": "wf",
                    "KeyType": "HASH"
                  },
                  {
                    "AttributeName": "createdAt",
                    "KeyType": "RANGE"
                  }
                ],
                "Projection": {
                  "ProjectionType": "ALL"
                }
              },
              {
                "IndexName": "TypeIndex",
                "KeySchema": [
                  {
                    "AttributeName": "triggerType",
                    "KeyType": "HASH"
                  },
                  {
                    "AttributeName": "triggerTypeData",
                    "KeyType": "RANGE"
                  }
                ],
                "Projection": {
                  "ProjectionType": "ALL"
                }
              }
            ]
          }
        },
        "DbEnvironments": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "e2etest-va-swb-DbEnvironments",
            "AttributeDefinitions": [
              {
                "AttributeName": "id",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "id",
                "KeyType": "HASH"
              }
            ],
            "BillingMode": "PAY_PER_REQUEST"
          }
        },
        "DbEnvironmentsSc": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "e2etest-va-swb-DbEnvironmentsSc",
            "AttributeDefinitions": [
              {
                "AttributeName": "id",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "id",
                "KeyType": "HASH"
              }
            ],
            "ProvisionedThroughput": {
              "ReadCapacityUnits": "10",
              "WriteCapacityUnits": "10"
            }
          }
        },
        "DbEnvironmentsTypes": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "e2etest-va-swb-DbEnvironmentTypes",
            "AttributeDefinitions": [
              {
                "AttributeName": "id",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "id",
                "KeyType": "HASH"
              }
            ],
            "ProvisionedThroughput": {
              "ReadCapacityUnits": "10",
              "WriteCapacityUnits": "10"
            }
          }
        },
        "DbUserRoles": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "e2etest-va-swb-DbUserRoles",
            "AttributeDefinitions": [
              {
                "AttributeName": "id",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "id",
                "KeyType": "HASH"
              }
            ],
            "BillingMode": "PAY_PER_REQUEST"
          }
        },
        "DbAwsAccounts": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "e2etest-va-swb-DbAwsAccounts",
            "AttributeDefinitions": [
              {
                "AttributeName": "id",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "id",
                "KeyType": "HASH"
              }
            ],
            "BillingMode": "PAY_PER_REQUEST"
          }
        },
        "DbIndexes": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "e2etest-va-swb-DbIndexes",
            "AttributeDefinitions": [
              {
                "AttributeName": "id",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "id",
                "KeyType": "HASH"
              }
            ],
            "BillingMode": "PAY_PER_REQUEST"
          }
        },
        "DbCostApiCaches": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "e2etest-va-swb-DbCostApiCaches",
            "AttributeDefinitions": [
              {
                "AttributeName": "indexId",
                "AttributeType": "S"
              },
              {
                "AttributeName": "query",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "indexId",
                "KeyType": "HASH"
              },
              {
                "AttributeName": "query",
                "KeyType": "RANGE"
              }
            ],
            "BillingMode": "PAY_PER_REQUEST"
          }
        },
        "DbAccounts": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "e2etest-va-swb-DbAccounts",
            "AttributeDefinitions": [
              {
                "AttributeName": "id",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "id",
                "KeyType": "HASH"
              }
            ],
            "BillingMode": "PAY_PER_REQUEST"
          }
        },
        "DbProjects": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "e2etest-va-swb-DbProjects",
            "AttributeDefinitions": [
              {
                "AttributeName": "id",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "id",
                "KeyType": "HASH"
              }
            ],
            "BillingMode": "PAY_PER_REQUEST"
          }
        },
        "DbStudyPermissions": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "e2etest-va-swb-DbStudyPermissions",
            "AttributeDefinitions": [
              {
                "AttributeName": "id",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "id",
                "KeyType": "HASH"
              }
            ],
            "BillingMode": "PAY_PER_REQUEST"
          }
        },
        "DbKeyPairs": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "e2etest-va-swb-DbKeyPairs",
            "AttributeDefinitions": [
              {
                "AttributeName": "id",
                "AttributeType": "S"
              },
              {
                "AttributeName": "username",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "id",
                "KeyType": "HASH"
              }
            ],
            "GlobalSecondaryIndexes": [
              {
                "IndexName": "UsernameIndex",
                "KeySchema": [
                  {
                    "AttributeName": "username",
                    "KeyType": "HASH"
                  }
                ],
                "Projection": {
                  "ProjectionType": "ALL"
                }
              }
            ],
            "BillingMode": "PAY_PER_REQUEST"
          }
        }
      },
      "Outputs": {
        "AuthenticationLayerHandlerRoleArn": {
          "Value": {
            "Fn::GetAtt": [
              "RoleAuthenticationLayerHandler",
              "Arn"
            ]
          }
        },
        "ApiHandlerRoleArn": {
          "Value": {
            "Fn::GetAtt": [
              "RoleApiHandler",
              "Arn"
            ]
          }
        },
        "WorkflowLoopRunnerRoleArn": {
          "Value": {
            "Fn::GetAtt": [
              "RoleWorkflowLoopRunner",
              "Arn"
            ]
          }
        },
        "OpenDataScrapeHandlerRoleArn": {
          "Value": {
            "Fn::GetAtt": [
              "RoleOpenDataScrapeHandler",
              "Arn"
            ]
          }
        },
        "EnvStatusPollHandlerRoleArn": {
          "Value": {
            "Fn::GetAtt": [
              "RoleEnvStatusPollHandler",
              "Arn"
            ]
          }
        },
        "EnvMgmtRoleArn": {
          "Value": {
            "Fn::GetAtt": [
              "RoleEnvMgmt",
              "Arn"
            ]
          }
        }
      }
    },
    "serviceFilename": "serverless.yml",
    "layers": {},
    "isDashboardMonitoringPreconfigured": false
  },
  "package": {
    "individually": true,
    "artifactDirectoryName": "serverless/va-swb-backend/e2etest/1611872248807-2021-01-28T22:17:28.807Z",
    "artifact": ""
  }
}