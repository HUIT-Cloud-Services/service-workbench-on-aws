{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Service-Workbench-on-AWS 1.0.0 swb e2etest Edge-Lambda",
  "Resources": {
    "RoleCloudFrontInterceptor": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com",
                  "edgelambda.amazonaws.com"
                ]
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/AWSLambdaExecute",
          "arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess"
        ],
        "Policies": [
          {
            "PolicyName": "logs-access",
            "PolicyDocument": {
              "Statement": {
                "Effect": "Allow",
                "Action": [
                  "logs:CreateLogGroup",
                  "logs:CreateLogStream",
                  "logs:PutLogEvents"
                ],
                "Resource": "arn:aws:logs:*:*:*"
              }
            }
          }
        ]
      }
    },
    "EdgeLambda": {
      "Type": "AWS::Lambda::Function",
      "DeletionPolicy": "Retain",
      "Properties": {
        "Description": "Lambda@Edge function to set security headers in CloudFront responses",
        "Runtime": "nodejs12.x",
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "RoleCloudFrontInterceptor",
            "Arn"
          ]
        },
        "Code": {
          "ZipFile": "\"use strict\";\nconst url = require(\"url\");\n\nconst handler = async event => {\n  //Get contents of cloudfront response\n  const response = event.Records[0].cf.response;\n  const headers = response.headers;\n\n  //Set new headers\n  headers[\"strict-transport-security\"] = [\n    {\n      key: \"Strict-Transport-Security\",\n      value: \"max-age=63072000; includeSubdomains\"\n    }\n  ];\n\n  const q = url.parse('https://6pnv22hyv5.execute-api.us-east-1.amazonaws.com/e2etest');\n  // q.host includes port number\n  const backendApi = `${q.protocol}//${q.host}`;\n  const otherConnectSrc = '*.amazonaws.com';\n  const connectSrc = `${backendApi} ${otherConnectSrc}`;\n  headers[\"content-security-policy\"] = [\n    {\n      key: \"Content-Security-Policy\",\n      value: `default-src 'none'; connect-src ${connectSrc}; img-src 'self' data:; script-src 'self'; style-src 'self' 'unsafe-inline'; font-src 'self' data:`\n    }\n  ];\n\n  headers[\"x-content-type-options\"] = [\n    { key: \"X-Content-Type-Options\", value: \"nosniff\" }\n  ];\n  headers[\"x-frame-options\"] = [{ key: \"X-Frame-Options\", value: \"DENY\" }];\n  headers[\"x-xss-protection\"] = [\n    { key: \"X-XSS-Protection\", value: \"1; mode=block\" }\n  ];\n  headers[\"referrer-policy\"] = [\n    { key: \"Referrer-Policy\", value: \"same-origin\" }\n  ];\n  //Return modified response\n  return response;\n};\n\nmodule.exports.handler = handler;\n"
        }
      }
    }
  },
  "Outputs": {
    "ServerlessDeploymentBucketName": {
      "Value": "684277579687-e2etest-va-swb-artifacts"
    },
    "EdgeLambdaArn": {
      "Description": "The ARN of the Lambda@Edge function",
      "Value": {
        "Fn::GetAtt": [
          "EdgeLambda",
          "Arn"
        ]
      }
    }
  }
}